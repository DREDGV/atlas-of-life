// js/app.js
import { state, $, $$, initDemoData, getRandomProjectColor, generateId, getRandomIdeaColor, getRandomNoteColor, getDomainMood, getMoodColor, findObjectById, getObjectType, addChecklistItem, removeChecklistItem, toggleChecklistItem, getChecklistProgress, createChecklist, eventBus } from "./state.js";
import { loadState, saveState, exportJson, importJsonV26 as importJson, backupStateSnapshot, listBackups } from "./storage.js";
import {
  initMap,
  layoutMap,
  drawMap,
  centerView,
  fitActiveDomain,
  fitActiveProject,
  resetView,
  setShowFps,
  undoLastMove,
  getMapNodes,
  requestDraw,
  requestLayout,
} from "./view_map.js";
import { renderToday } from "./view_today.js";
import { parseQuick } from "./parser.js";
import { openInspectorFor } from "./inspector.js";
import { logEvent } from "./utils/analytics.js";
import { initializeHotkeys } from "./hotkeys.js";
import { initAutocomplete } from "./autocomplete.js";
import { updateWip } from "./wip.js";
import { AnalyticsDashboard, analyticsDashboard } from "./analytics.js";
import { CosmicAnimations } from "./cosmic-effects.js";
import { openChecklist, closeChecklist } from "./ui/checklist.js";
import { openChecklistWindow, closeChecklistWindow } from "./ui/checklist-window.js";
import { initInbox } from "./inbox.js";

// I18N
const I18N = {
  views: { map: "–ö–∞—Ä—Ç–∞", today: "–°–µ–≥–æ–¥–Ω—è" },
  sidebar: { domains: "–î–æ–º–µ–Ω—ã", filters: "–§–∏–ª—å—Ç—Ä—ã" },
  hints: { quick: "–®–æ—Ä—Ç–∫–∞—Ç—ã: #—Ç–µ–≥ @–ø—Ä–æ–µ–∫—Ç !—Å–µ–≥–æ–¥–Ω—è 10:00 ~30–º" },
  actions: { export: "–≠–∫—Å–ø–æ—Ä—Ç", import: "–ò–º–ø–æ—Ä—Ç" },
  toggles: {
    links: "–°–≤—è–∑–∏",
    aging: "–î–∞–≤–Ω–æ—Å—Ç—å",
    glow: "–°–≤–µ—á–µ–Ω–∏–µ",
    edges: "–†—ë–±—Ä–∞",
  },
  wip: (cur, lim) => `WIP: ${cur} / ${lim}`,
  errors: { import: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON: " },
  defaults: { taskTitle: "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞" },
};
window.I18N = I18N;

// Expose state globally for addons compatibility
try { window.state = state; } catch (_) {}

// Expose hierarchy functions globally for debugging
try { 
  // window.isHierarchyV2Enabled = isHierarchyV2Enabled;
  // window.setHierarchyV2Enabled = setHierarchyV2Enabled;
} catch (_) {}

// App version (SemVer-like label used in UI)
let APP_VERSION = "Atlas_of_life_v0.8.5.0";

// ephemeral UI state
const ui = {
  newDomain: false,
  newDomColor: "#2dd4bf",
  newDomDraft: "",
  newDomError: "",
};
const palette = [
  "#2dd4bf",
  "#f59e0b",
  "#60a5fa",
  "#a78bfa",
  "#ef4444",
  "#10b981",
  "#f472b6",
  "#eab308",
];

// simple modal helpers
function openModal({
  title,
  bodyHTML,
  onConfirm,
  confirmText = "–û–∫",
  cancelText = "–û—Ç–º–µ–Ω–∞",
}) {
  const modal = document.getElementById("modal");
  document.getElementById("modalTitle").textContent = title || "–î–∏–∞–ª–æ–≥";
  document.getElementById("modalBody").innerHTML = bodyHTML || "";
  const btnOk = document.getElementById("modalOk");
  const btnCancel = document.getElementById("modalCancel");
  btnOk.textContent = confirmText;
  document.getElementById("modalCancel").textContent = cancelText;
  function close() {
    modal.style.display = "none";
    btnOk.onclick = null;
    btnCancel.onclick = null;
  }
  btnCancel.onclick = () => close();
  btnOk.onclick = () => {
    try {
      onConfirm && onConfirm(document.getElementById("modalBody"));
    } finally {
      close();
    }
  };
  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (title && title !== "–î–∏–∞–ª–æ–≥" && title !== "") {
  modal.style.display = "flex";
  }
}

// Read-only audit modal for hierarchy (safe)
function openHierarchyAuditModal() {
  try {
    // Lazy import to avoid coupling; use already loaded functions if present
    const modal = document.getElementById('modal');
    if (!modal) return;

    // collect stats without mutations
    const all = [
      ...(state.domains||[]),
      ...(state.projects||[]),
      ...(state.tasks||[]),
      ...(state.ideas||[]),
      ...(state.notes||[]),
    ];
    const totals = {
      domains: state.domains?.length||0,
      projects: state.projects?.length||0,
      tasks: state.tasks?.length||0,
      ideas: state.ideas?.length||0,
      notes: state.notes?.length||0,
    };
    let withParent = 0, brokenChildren = 0;
    const orphaned = [];
    const byId = new Map(all.map(o=>[o.id,o]));

    all.forEach(o=>{ if (o && o.parentId) withParent++; });
    // shallow child-parent symmetry check (best-effort, no mutate)
    all.forEach(p=>{
      const ch = p && p.children ? Object.values(p.children).flat() : [];
      ch.forEach(cid=>{
        const c = byId.get(cid);
        if (!c || c.parentId !== p.id) brokenChildren++;
      });
    });

    // minimal orphan scan: parentId points to missing
    all.forEach(o=>{
      if (o && o.parentId && !byId.get(o.parentId)) orphaned.push(o.id);
    });

    // try use validator if available
    let validationCount = 0;
    try {
      if (typeof window !== 'undefined' && window.state) {
        // validation.js attaches named export; we imported through state.js earlier
        // guard: use global function if exposed in bundling
        if (typeof validateHierarchy === 'function') {
          const errs = validateHierarchy(state) || [];
          validationCount = errs.length;
        }
      }
    } catch(_) {}

    const backups = listBackups();

    modal.innerHTML = `
      <div class="modal-content">
        <h2>üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)</h2>
        <div class="stats-grid">
          <div class="stat-item"><span class="stat-label">–î–æ–º–µ–Ω—ã:</span><span class="stat-value">${totals.domains}</span></div>
          <div class="stat-item"><span class="stat-label">–ü—Ä–æ–µ–∫—Ç—ã:</span><span class="stat-value">${totals.projects}</span></div>
          <div class="stat-item"><span class="stat-label">–ó–∞–¥–∞—á–∏:</span><span class="stat-value">${totals.tasks}</span></div>
          <div class="stat-item"><span class="stat-label">–ò–¥–µ–∏:</span><span class="stat-value">${totals.ideas}</span></div>
          <div class="stat-item"><span class="stat-label">–ó–∞–º–µ—Ç–∫–∏:</span><span class="stat-value">${totals.notes}</span></div>
        </div>
        <div class="hierarchy-status">
          <h3>–°–≤–æ–¥–∫–∞:</h3>
          <div class="status-item"><span class="status-icon">üß≠</span><span class="status-text">–° —Ä–æ–¥–∏—Ç–µ–ª–µ–º: ${withParent}</span></div>
          <div class="status-item"><span class="status-icon">üß©</span><span class="status-text">–ù–µ—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${brokenChildren}</span></div>
          <div class="status-item"><span class="status-icon">ü™ô</span><span class="status-text">–û—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö: ${orphaned.length}</span></div>
          <div class="status-item"><span class="status-icon">‚úÖ</span><span class="status-text">–û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: ${validationCount}</span></div>
        </div>
        <div class="form-group">
          <label class="checkbox-label" style="cursor:default">
            <input type="checkbox" disabled ${false? 'checked':''}>
            <span class="checkmark"></span>
            –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –∞—É–¥–∏—Ç–∞)
          </label>
        </div>
        <div class="form-group">
          <div class="hint">–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö):<br>${backups.map(b=>`‚Ä¢ ${b.key.split('__').pop()}: ${b.savedAt||'–Ω–µ—Ç'}`).join('<br>')}</div>
        </div>
        <div class="modal-actions">
          <button class="btn" id="copyAuditBtn">–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç</button>
          <button class="btn" id="makeBackupBtn">–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø</button>
          <button class="btn primary" id="closeAuditBtn">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>`;

    modal.style.display = 'flex';

    const copyBtn = document.getElementById('copyAuditBtn');
    if (copyBtn) copyBtn.onclick = () => {
      const report = {
        totals,
        withParent,
        brokenChildren,
        orphaned,
        validationCount,
        backups
      };
      try {
        navigator.clipboard.writeText(JSON.stringify(report, null, 2));
        showToast('–û—Ç—á—ë—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω', 'ok');
      } catch (e) { showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å: '+e.message, 'warn'); }
    };

    const backupBtn = document.getElementById('makeBackupBtn');
    if (backupBtn) backupBtn.onclick = () => {
      try { backupStateSnapshot('hierarchy-audit'); showToast('–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω', 'ok'); }
      catch(e){ showToast('–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: '+e.message, 'warn'); }
    };

    const closeBtn = document.getElementById('closeAuditBtn');
    if (closeBtn) closeBtn.onclick = () => { modal.style.display = 'none'; };
  } catch (e) {
    showToast('–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞: ' + e.message, 'warn');
  }
}

// toast helper
function showToast(text, cls = "ok", ms = 2500) {
  const el = document.getElementById("toast");
  if (!el) return;
  el.className = "toast " + (cls || "");
  el.textContent = text;
  el.style.display = "block";
  el.style.opacity = "1";
  setTimeout(() => {
    el.style.transition = "opacity .3s linear";
    el.style.opacity = "0";
    setTimeout(() => {
      el.style.display = "none";
      el.style.transition = "";
    }, 320);
  }, ms);
}

// undo toast helper with action button
function showUndoToast(text, undoAction, ms = 8000) {
  const el = document.getElementById("toast");
  if (!el) return;
  
  // Create undo button
  const undoBtn = document.createElement("button");
  undoBtn.textContent = "–û—Ç–º–µ–Ω–∏—Ç—å";
  undoBtn.className = "undo-btn";
  undoBtn.style.cssText = `
    margin-left: 12px;
    padding: 4px 8px;
    background: var(--accent);
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
  `;
  
  // Set up toast content
  el.className = "toast undo";
  el.innerHTML = text;
  el.appendChild(undoBtn);
  el.style.display = "block";
  el.style.opacity = "1";
  
  // Handle undo button click
  undoBtn.onclick = () => {
    undoAction();
    el.style.display = "none";
  };
  
  // Auto-hide after timeout
  setTimeout(() => {
    if (el.style.display !== "none") {
      el.style.transition = "opacity .3s linear";
      el.style.opacity = "0";
      setTimeout(() => {
        el.style.display = "none";
        el.style.transition = "";
        el.innerHTML = "";
      }, 320);
    }
  }, ms);
}

function openHotkeysModal() {
  const hotkeys = state.settings.hotkeys;
  const hotkeyDescriptions = {
    newTask: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É',
    newProject: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç', 
    newDomain: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω',
    search: '–û—Ç–∫—Ä—ã—Ç—å –ø–æ–∏—Å–∫',
    closeInspector: '–ó–∞–∫—Ä—ã—Ç—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä',
    statusPlan: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–ü–ª–∞–Ω"',
    statusToday: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–°–µ–≥–æ–¥–Ω—è"', 
    statusDoing: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–í —Ä–∞–±–æ—Ç–µ"',
    statusDone: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–ì–æ—Ç–æ–≤–æ"',
    fitAll: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã',
    fitDomain: '–ü–æ–¥–æ–≥–Ω–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–º–µ–Ω',
    fitProject: '–ü–æ–¥–æ–≥–Ω–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç'
  };
  
  let bodyHTML = '<div style="display:flex;flex-direction:column;gap:12px;max-height:400px;overflow-y:auto;">';
  
  // Add help text
  bodyHTML += '<div style="background:var(--panel-2);padding:8px;border-radius:4px;margin-bottom:8px;">';
  bodyHTML += '<strong>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä—è—á–µ–π –∫–ª–∞–≤–∏—à–∏.';
  bodyHTML += '</div>';
  
  // Add current hotkeys reference
  bodyHTML += '<div style="background:var(--panel-2);padding:8px;border-radius:4px;margin-bottom:8px;">';
  bodyHTML += '<strong>‚å®Ô∏è –¢–µ–∫—É—â–∏–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:</strong><br/>';
  bodyHTML += '‚Ä¢ <kbd>Ctrl+N</kbd> - –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞<br/>';
  bodyHTML += '‚Ä¢ <kbd>Ctrl+Shift+N</kbd> - –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç<br/>';
  bodyHTML += '‚Ä¢ <kbd>Ctrl+Shift+D</kbd> - –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω<br/>';
  bodyHTML += '‚Ä¢ <kbd>Ctrl+F</kbd> - –ø–æ–∏—Å–∫<br/>';
  bodyHTML += '‚Ä¢ <kbd>1,2,3,4</kbd> - —Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞<br/>';
  bodyHTML += '‚Ä¢ <kbd>Escape</kbd> - –∑–∞–∫—Ä—ã—Ç—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä<br/>';
  bodyHTML += '‚Ä¢ <kbd>Ctrl+0</kbd> - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ<br/>';
  bodyHTML += '</div>';
  
  // Add hotkey settings
  for (const [action, combo] of Object.entries(hotkeys)) {
    const description = hotkeyDescriptions[action] || action;
    bodyHTML += `
      <div style="display:flex;align-items:center;gap:8px;padding:4px;">
        <label style="flex:1;font-size:14px;">${description}:</label>
        <input type="text" 
               id="hotkey-${action}" 
               value="${combo}" 
               style="width:120px;padding:4px 8px;border:1px solid var(--panel-2);border-radius:4px;background:var(--panel-1);color:var(--text);"
               readonly />
        <button onclick="clearHotkey('${action}')" 
                style="padding:4px 8px;background:var(--muted);color:white;border:none;border-radius:4px;cursor:pointer;font-size:12px;">
          –û—á–∏—Å—Ç–∏—Ç—å
        </button>
      </div>
    `;
  }
  
  bodyHTML += '</div>';
  
  openModal({
    title: "‚å®Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à",
    bodyHTML: bodyHTML,
    onConfirm: () => {
      // Save hotkey changes
      for (const [action] of Object.entries(hotkeys)) {
        const input = document.getElementById(`hotkey-${action}`);
        if (input && input.value !== state.settings.hotkeys[action]) {
          window.hotkeys.update(action, input.value);
        }
      }
      showToast("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "ok");
    },
    confirmText: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
    cancelText: "–û—Ç–º–µ–Ω–∞"
  });
  
  // Add event listeners for hotkey input
  setTimeout(() => {
    for (const [action] of Object.entries(hotkeys)) {
      const input = document.getElementById(`hotkey-${action}`);
      if (input) {
        input.addEventListener('keydown', (e) => {
          e.preventDefault();
          const combo = getKeyComboString(e);
          if (combo) {
            input.value = combo;
          }
        });
      }
    }
  }, 100);
}

function getKeyComboString(event) {
  const parts = [];
  if (event.ctrlKey) parts.push('ctrl');
  if (event.shiftKey) parts.push('shift');
  if (event.altKey) parts.push('alt');
  if (event.metaKey) parts.push('meta');
  
  if (!event.key) return null; // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined key
  let key = event.key.toLowerCase();
  if (key === ' ') key = 'space';
  if (key === 'control' || key === 'shift' || key === 'alt' || key === 'meta') return null;
  
  parts.push(key);
  return parts.join('+');
}

function clearHotkey(action) {
  const input = document.getElementById(`hotkey-${action}`);
  if (input) {
    input.value = '';
  }
}

function openDisplayModal() {
  let bodyHTML = '<div style="display:flex;flex-direction:column;gap:12px;">';
  bodyHTML += '<div style="background:var(--panel-2);padding:8px;border-radius:4px;">';
  bodyHTML += '<strong>üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:</strong>';
  bodyHTML += '</div>';
  
  bodyHTML += `
    <div style="display:flex;flex-direction:column;gap:8px;">
      <label style="display:flex;align-items:center;gap:8px;padding:8px;border:1px solid var(--panel-2);border-radius:4px;">
        <input type="checkbox" id="displayLinks" ${state.showLinks ? 'checked' : ''} style="margin:0;">
        <span>üîó –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏</span>
      </label>
      <label style="display:flex;align-items:center;gap:8px;padding:8px;border:1px solid var(--panel-2);border-radius:4px;">
        <input type="checkbox" id="displayAging" ${state.showAging ? 'checked' : ''} style="margin:0;">
        <span>‚è∞ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞–≤–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤</span>
      </label>
      <label style="display:flex;align-items:center;gap:8px;padding:8px;border:1px solid var(--panel-2);border-radius:4px;">
        <input type="checkbox" id="displayGlow" ${state.showGlow ? 'checked' : ''} style="margin:0;">
        <span>‚ú® –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤</span>
      </label>
      <label style="display:flex;align-items:center;gap:8px;padding:8px;border:1px solid var(--panel-2);border-radius:4px;">
        <input type="checkbox" id="displayDndHints" ${(state.settings && state.settings.showDndHints) ? 'checked' : ''} style="margin:0;">
        <span>üß≤ –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ü–µ–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ (DnD)</span>
      </label>
      <label style="display:flex;align-items:center;gap:8px;padding:8px;border:1px solid var(--panel-2);border-radius:4px;">
        <input type="checkbox" id="displayInbox" ${(state.settings && state.settings.showInbox) ? 'checked' : ''} style="margin:0;">
        <span>üì• –ò–Ω–±–æ–∫—Å - –±—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç –º—ã—Å–ª–µ–π (N - –∑–∞—Ö–≤–∞—Ç, I - —Ä–∞–∑–±–æ—Ä)</span>
      </label>
      <div style="display:flex;flex-direction:column;gap:6px;padding:8px;border:1px solid var(--panel-2);border-radius:4px;">
        <div style="font-weight:600;">üß© –í–∏–¥ –∏–∫–æ–Ω–∫–∏ —á–µ–∫-–ª–∏—Å—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ</div>
        <select id="checklistIconMode" style="width:100%;padding:6px;background:var(--panel);color:var(--text);border:1px solid var(--panel-2);border-radius:4px;">
          <option value="hybrid" ${state.settings && state.settings.checklistIconMode==='hybrid' ? 'selected' : ''}>–ì–∏–±—Ä–∏–¥: –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –±—ç–π–¥–∂, –ø—Ä–µ–≤—å—é –Ω–∞ –∑—É–º–µ/—Ö–æ–≤–µ—Ä–µ</option>
          <option value="title" ${state.settings && state.settings.checklistIconMode==='title' ? 'selected' : ''}>–¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫</option>
          <option value="minimal" ${state.settings && state.settings.checklistIconMode==='minimal' ? 'selected' : ''}>–ú–∏–Ω–∏–º—É–º: –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –ø—Ä–æ—Ü–µ–Ω—Ç</option>
          <option value="preview2" ${state.settings && state.settings.checklistIconMode==='preview2' ? 'selected' : ''}>–ü—Ä–µ–≤—å—é: –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏</option>
          <option value="preview3" ${state.settings && state.settings.checklistIconMode==='preview3' ? 'selected' : ''}>–ü—Ä–µ–≤—å—é: –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏</option>
        </select>
      </div>
      <div style="display:flex;flex-direction:column;gap:6px;padding:8px;border:1px solid var(--panel-2);border-radius:4px;">
        <div style="font-weight:600;">‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–º—Å)</div>
        <div style="display:flex;gap:8px;align-items:center;">
          <input type="number" id="tooltipDelay" min="0" max="10000" step="50" 
                 value="${state.settings && state.settings.tooltipDelay !== undefined ? state.settings.tooltipDelay : 500}"
                 style="flex:1;padding:6px;background:var(--panel);color:var(--text);border:1px solid var(--panel-2);border-radius:4px;"
                 placeholder="500"
                 oninput="this.value = Math.max(0, Math.min(10000, parseInt(this.value) || 0))"
                 onchange="this.value = Math.max(0, Math.min(10000, parseInt(this.value) || 0))">
          <div style="display:flex;flex-direction:column;gap:2px;">
            <button type="button" onclick="const input = document.getElementById('tooltipDelay'); input.value='0'; input.dispatchEvent(new Event('change'));" style="padding:4px 8px;font-size:11px;background:var(--panel-2);color:var(--text);border:1px solid var(--panel-2);border-radius:3px;cursor:pointer;">0–º—Å</button>
            <button type="button" onclick="const input = document.getElementById('tooltipDelay'); input.value='200'; input.dispatchEvent(new Event('change'));" style="padding:4px 8px;font-size:11px;background:var(--panel-2);color:var(--text);border:1px solid var(--panel-2);border-radius:3px;cursor:pointer;">200–º—Å</button>
            <button type="button" onclick="const input = document.getElementById('tooltipDelay'); input.value='500'; input.dispatchEvent(new Event('change'));" style="padding:4px 8px;font-size:11px;background:var(--panel-2);color:var(--text);border:1px solid var(--panel-2);border-radius:3px;cursor:pointer;">500–º—Å</button>
            <button type="button" onclick="const input = document.getElementById('tooltipDelay'); input.value='1000'; input.dispatchEvent(new Event('change'));" style="padding:4px 8px;font-size:11px;background:var(--panel-2);color:var(--text);border:1px solid var(--panel-2);border-radius:3px;cursor:pointer;">1000–º—Å</button>
          </div>
        </div>
        <div style="font-size:11px;color:var(--text-2);">
          üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0-200–º—Å (–±—ã—Å—Ç—Ä–æ), 500–º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), 1000-2000–º—Å (–º–µ–¥–ª–µ–Ω–Ω–æ)
        </div>
      </div>
    </div>
    
    <div style="border-top:1px solid var(--panel-2);padding-top:12px;margin-top:8px;">
      <button onclick="
        console.log('Analytics button clicked');
        console.log('analyticsDashboard available:', !!window.analyticsDashboard);
        if (window.analyticsDashboard) {
          window.analyticsDashboard.openModal();
  } else {
          alert('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—à–∏–±–æ–∫.');
        }
      " style="
        width:100%;padding:12px;background:var(--accent);color:white;border:none;border-radius:6px;cursor:pointer;font-weight:500;display:flex;align-items:center;justify-content:center;gap:8px;
      ">
        üìä –û—Ç–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
      </button>
    </div>
  `;
  
  bodyHTML += '</div>';
  
  openModal({
    title: "üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
    bodyHTML: bodyHTML,
    onConfirm: () => {
      const links = document.getElementById('displayLinks').checked;
      const aging = document.getElementById('displayAging').checked;
      const glow = document.getElementById('displayGlow').checked;
      const dndHints = document.getElementById('displayDndHints').checked;
      const inbox = document.getElementById('displayInbox').checked;
      const iconMode = (document.getElementById('checklistIconMode') || {}).value || 'title';
      const tooltipDelayInput = document.getElementById('tooltipDelay');
      const tooltipDelay = tooltipDelayInput ? Math.max(0, Math.min(10000, parseInt(tooltipDelayInput.value) || 500)) : 500;
      
      console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
        tooltipDelay,
        currentTooltipDelay: state.settings?.tooltipDelay,
        settingsChanged: tooltipDelay !== (state.settings?.tooltipDelay || 500)
      });
      
      if (links !== state.showLinks || aging !== state.showAging || glow !== state.showGlow || (state.settings && dndHints !== !!state.settings.showDndHints) || (state.settings && inbox !== !!state.settings.showInbox) || (state.settings && iconMode !== state.settings.checklistIconMode) || (state.settings && tooltipDelay !== (state.settings.tooltipDelay || 500))) {
        state.showLinks = links;
        state.showAging = aging;
        state.showGlow = glow;
        if (!state.settings) state.settings = {};
        state.settings.showDndHints = !!dndHints;
        state.settings.showInbox = !!inbox;
        state.settings.checklistIconMode = iconMode;
        state.settings.tooltipDelay = tooltipDelay;
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', state.settings);
        saveState();
        drawMap();
        showToast("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "ok");
      } else {
        console.log('‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
      }
    },
    confirmText: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
    cancelText: "–û—Ç–º–µ–Ω–∞"
  });
}

function openExportModal() {
  let bodyHTML = '<div style="display:flex;flex-direction:column;gap:12px;">';
  bodyHTML += '<div style="background:var(--panel-2);padding:8px;border-radius:4px;">';
  bodyHTML += '<strong>üíæ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:</strong>';
  bodyHTML += '</div>';
  
  bodyHTML += `
    <div style="display:flex;flex-direction:column;gap:8px;">
      <button id="exportBtn" style="padding:8px 12px;background:var(--accent);color:white;border:none;border-radius:4px;cursor:pointer;">
        üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      </button>
      <label for="importData" style="padding:8px 12px;background:var(--ok);color:white;border-radius:4px;cursor:pointer;text-align:center;">
        üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
      </label>
      <input type="file" id="importData" accept=".json" style="display:none;">
      <button id="clearBtn" style="padding:8px 12px;background:var(--warn);color:white;border:none;border-radius:4px;cursor:pointer;">
        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      </button>
    </div>
  `;
  
  bodyHTML += '</div>';
  
  openModal({
    title: "üíæ –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç",
    bodyHTML: bodyHTML,
    onConfirm: () => {
      // Setup event handlers after modal is shown
      setTimeout(() => {
        const exportBtn = document.getElementById('exportBtn');
        const importInput = document.getElementById('importData');
        const clearBtn = document.getElementById('clearBtn');
        
        if (exportBtn) {
          exportBtn.onclick = () => {
            try {
              exportJson();
              showToast("–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã", "ok");
            } catch (error) {
              showToast("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: " + error.message, "error");
            }
          };
        }
        
        if (importInput) {
          importInput.onchange = async (e) => {
            if (!e.target.files || !e.target.files[0]) return;
            try {
              await importJson(e.target.files[0]);
              renderSidebar();
              if (window.layoutMap) window.layoutMap();
              if (window.drawMap) window.drawMap();
              renderToday();
              showToast("–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã", "ok");
            } catch (err) {
              showToast("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: " + err.message, "error");
            } finally {
              e.target.value = "";
            }
          };
        }
        
        if (clearBtn) {
          clearBtn.onclick = () => {
            if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")) {
              try {
                localStorage.clear();
                location.reload();
              } catch (error) {
                showToast("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: " + error.message, "error");
              }
            }
          };
        }
      }, 100);
    },
    confirmText: "–ó–∞–∫—Ä—ã—Ç—å",
    cancelText: "–û—Ç–º–µ–Ω–∞"
  });
}

function openHierarchySettingsModal() {
  const modal = document.getElementById('modal');
  if (!modal) return;

  // Safe default (we keep v2 off by default for stability)
  const isEnabled = false;
  
  modal.innerHTML = `
    <div class="modal-content">
      <h2>üåê –°–∏—Å—Ç–µ–º–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2</h2>
      <div class="form-group">
        <button class="btn" id="auditHierarchyBtn">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)</button>
      </div>
      <div class="form-group">
        <label class="checkbox-label">
          <input type="checkbox" id="hierarchyToggle" ${isEnabled ? 'checked' : ''}>
          <span class="checkmark"></span>
          –í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2
        </label>
        <div class="hint">
          –°–∏—Å—Ç–µ–º–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ (–¥–æ–º–µ–Ω—ã ‚Üí –ø—Ä–æ–µ–∫—Ç—ã ‚Üí –∑–∞–¥–∞—á–∏).<br>
          <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –≠—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö.
        </div>
      </div>
      <div class="hierarchy-status">
        <h3>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</h3>
        <div class="status-item">
          <span class="status-icon">${isEnabled ? '‚úÖ' : '‚ùå'}</span>
          <span class="status-text">${isEnabled ? '–í–∫–ª—é—á–µ–Ω–∞' : '–û—Ç–∫–ª—é—á–µ–Ω–∞'}</span>
        </div>
      </div>
      <div class="modal-actions">
        <button class="btn" id="cancelHierarchyBtn">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn" id="migrationBtn">–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</button>
        <button class="btn primary" id="saveHierarchyBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      </div>
    </div>
  `;

  modal.style.display = 'flex';

  // Event handlers
  const auditBtn = document.getElementById('auditHierarchyBtn');
  if (auditBtn) {
    auditBtn.onclick = () => {
      closeModal();
      openHierarchyAuditModal();
    };
  }
  document.getElementById('saveHierarchyBtn').onclick = () => {
    const enabled = document.getElementById('hierarchyToggle').checked;
    // setHierarchyV2Enabled(enabled);
    saveState();
    
    closeModal();
    showToast(`–°–∏—Å—Ç–µ–º–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2 ${enabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`, 'ok');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    setTimeout(() => {
      window.location.reload();
    }, 1000);
  };

  document.getElementById('cancelHierarchyBtn').onclick = () => {
    closeModal();
  };

  document.getElementById('migrationBtn').onclick = () => {
    closeModal();
    openHierarchyMigrationModal();
  };
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏
function openHierarchyMigrationModal() {
  const modal = document.getElementById('modal');
  if (!modal) return;

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  // const stats = getHierarchyStatistics();
  
  modal.innerHTML = `
    <div class="modal-content">
      <h2>üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2</h2>
      
      <div class="migration-info">
        <h3>üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</h3>
        <div class="stats-grid">
          <div class="stat-item">
            <span class="stat-label">–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤:</span>
            <span class="stat-value">${stats.total}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">–° —Ä–æ–¥–∏—Ç–µ–ª–µ–º:</span>
            <span class="stat-value">${stats.withParent}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">–ù–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö:</span>
            <span class="stat-value">${stats.withoutParent}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π:</span>
            <span class="stat-value">${stats.totalConnections}</span>
          </div>
        </div>
      </div>

      <div class="migration-options">
        <h3>‚öôÔ∏è –û–ø—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:</h3>
        <div class="form-group">
          <label class="checkbox-label">
            <input type="checkbox" id="restoreConnections" checked>
            <span class="checkmark"></span>
            –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π (domainId, projectId)
          </label>
        </div>
        <div class="form-group">
          <label class="checkbox-label">
            <input type="checkbox" id="validateAfterMigration" checked>
            <span class="checkmark"></span>
            –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
          </label>
        </div>
        <div class="form-group">
          <label class="checkbox-label">
            <input type="checkbox" id="createBackup">
            <span class="checkmark"></span>
            –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
          </label>
        </div>
      </div>

      <div class="migration-warning">
        <h3>‚ö†Ô∏è –í–∞–∂–Ω–æ:</h3>
        <ul>
          <li>–ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–∏—Ç –ø–æ–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∫–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º</li>
          <li>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏ –±—É–¥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
          <li>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö</li>
          <li>–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç</li>
        </ul>
      </div>

      <div class="modal-actions">
        <button class="btn" id="cancelMigrationBtn">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn" id="previewMigrationBtn">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</button>
        <button class="btn primary" id="startMigrationBtn">–ù–∞—á–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é</button>
      </div>
    </div>
  `;

  modal.style.display = 'flex';

  // Event handlers
  document.getElementById('cancelMigrationBtn').onclick = () => {
    closeModal();
  };

  document.getElementById('previewMigrationBtn').onclick = () => {
    previewMigration();
  };

  document.getElementById('startMigrationBtn').onclick = () => {
    startMigration();
  };
}

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–∏
function previewMigration() {
  try {
    console.log('üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    const analysis = analyzeExistingData();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    const modal = document.getElementById('modal');
    if (modal) {
      modal.innerHTML = `
        <div class="modal-content">
          <h2>üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–∏–≥—Ä–∞—Ü–∏–∏</h2>
          
          <div class="preview-results">
            <h3>üìã –ß—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ:</h3>
            <div class="preview-item">
              <span class="preview-icon">üîß</span>
              <span class="preview-text">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–ª—è ${analysis.totalObjects} –æ–±—ä–µ–∫—Ç–æ–≤</span>
            </div>
            <div class="preview-item">
              <span class="preview-icon">üîó</span>
              <span class="preview-text">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${analysis.potentialConnections} —Å–≤—è–∑–µ–π</span>
            </div>
            <div class="preview-item">
              <span class="preview-icon">üîç</span>
              <span class="preview-text">–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–≤—è–∑–∏</span>
            </div>
            <div class="preview-item">
              <span class="preview-icon">üíæ</span>
              <span class="preview-text">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</span>
            </div>
          </div>

          <div class="preview-warnings">
            <h3>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</h3>
            ${analysis.issues.length > 0 ? 
              analysis.issues.map(issue => `<div class="warning-item">‚Ä¢ ${issue}</div>`).join('') :
              '<div class="warning-item">‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>'
            }
          </div>

          <div class="modal-actions">
            <button class="btn" id="backToMigrationBtn">–ù–∞–∑–∞–¥</button>
            <button class="btn primary" id="confirmMigrationBtn">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é</button>
          </div>
        </div>
      `;

      // Event handlers
      document.getElementById('backToMigrationBtn').onclick = () => {
        openHierarchyMigrationModal();
      };

      document.getElementById('confirmMigrationBtn').onclick = () => {
        startMigration();
      };
    }

  } catch (error) {
    console.error('‚ùå previewMigration: –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
    showToast('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–∏', 'error');
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
function startMigration() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏ –∏–∑ —Ñ–æ—Ä–º—ã
    const restoreConnections = document.getElementById('restoreConnections')?.checked ?? true;
    const validateAfterMigration = document.getElementById('validateAfterMigration')?.checked ?? true;
    const createBackup = document.getElementById('createBackup')?.checked ?? false;

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (createBackup) {
      console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    showMigrationProgress();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    // const result = migrateToHierarchyV2({
    //   restoreConnections,
    //   validateAfterMigration
    // });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    // showMigrationResults(result);

  } catch (error) {
    console.error('‚ùå startMigration: –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    showToast('–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏', 'error');
  }
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
function showMigrationProgress() {
  const modal = document.getElementById('modal');
  if (modal) {
    modal.innerHTML = `
      <div class="modal-content">
        <h2>üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</h2>
        
        <div class="progress-container">
          <div class="progress-bar">
            <div class="progress-fill" id="progressFill"></div>
          </div>
          <div class="progress-text" id="progressText">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</div>
        </div>

        <div class="migration-steps" id="migrationSteps">
          <div class="step-item" id="step1">
            <span class="step-icon">‚è≥</span>
            <span class="step-text">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã</span>
          </div>
          <div class="step-item" id="step2">
            <span class="step-icon">‚è≥</span>
            <span class="step-text">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π</span>
          </div>
          <div class="step-item" id="step3">
            <span class="step-icon">‚è≥</span>
            <span class="step-text">–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏</span>
          </div>
          <div class="step-item" id="step4">
            <span class="step-icon">‚è≥</span>
            <span class="step-text">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è</span>
          </div>
        </div>
      </div>
    `;

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    let progress = 0;
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');
    
    const steps = [
      { text: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...', duration: 1000 },
      { text: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π...', duration: 1500 },
      { text: '–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏...', duration: 1000 },
      { text: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...', duration: 500 }
    ];

    let currentStep = 0;
    const updateProgress = () => {
      if (currentStep < steps.length) {
        const step = steps[currentStep];
        if (progressText) progressText.textContent = step.text;
        
        const stepElement = document.getElementById(`step${currentStep + 1}`);
        if (stepElement) {
          stepElement.querySelector('.step-icon').textContent = 'üîÑ';
        }

        setTimeout(() => {
          if (stepElement) {
            stepElement.querySelector('.step-icon').textContent = '‚úÖ';
          }
          currentStep++;
          progress += 25;
          if (progressFill) progressFill.style.width = `${progress}%`;
          updateProgress();
        }, step.duration);
      }
    };

    updateProgress();
  }
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏
function showMigrationResults(result) {
  const modal = document.getElementById('modal');
  if (modal) {
    modal.innerHTML = `
      <div class="modal-content">
        <h2>${result.success ? '‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!' : '‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏'}</h2>
        
        <div class="migration-results">
          <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>
          <div class="results-grid">
            <div class="result-item">
              <span class="result-label">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:</span>
              <span class="result-value">${result.steps[0]?.details?.processedObjects || 0}</span>
            </div>
            <div class="result-item">
              <span class="result-label">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π:</span>
              <span class="result-value">${result.steps[1]?.details?.restoredConnections || 0}</span>
            </div>
            <div class="result-item">
              <span class="result-label">–û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:</span>
              <span class="result-value">${result.steps[2]?.details?.errors?.length || 0}</span>
            </div>
            <div class="result-item">
              <span class="result-label">–°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:</span>
              <span class="result-value">${result.steps[3]?.success ? '‚úÖ' : '‚ùå'}</span>
            </div>
          </div>
        </div>

        ${result.errors.length > 0 ? `
          <div class="migration-errors">
            <h3>‚ùå –û—à–∏–±–∫–∏:</h3>
            <ul>
              ${result.errors.map(error => `<li>${error}</li>`).join('')}
            </ul>
          </div>
        ` : ''}

        ${result.warnings.length > 0 ? `
          <div class="migration-warnings">
            <h3>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</h3>
            <ul>
              ${result.warnings.map(warning => `<li>${warning}</li>`).join('')}
            </ul>
          </div>
        ` : ''}

        <div class="modal-actions">
          ${!result.success ? `
            <button class="btn" id="rollbackMigrationBtn">–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é</button>
          ` : ''}
          <button class="btn primary" id="closeMigrationBtn">–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>
    `;

    // Event handlers
    document.getElementById('closeMigrationBtn').onclick = () => {
      closeModal();
      if (result.success) {
        showToast('–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'ok');
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      }
    };

    if (!result.success) {
      document.getElementById('rollbackMigrationBtn').onclick = () => {
        rollbackMigration();
      };
    }
  }
}

// –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
function rollbackMigration() {
  try {
    console.log('‚è™ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // const result = rollbackHierarchyMigration();
    
    // if (result.success) {
    //   showToast(`–û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û—á–∏—â–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${result.clearedObjects}`, 'ok');
    //   closeModal();
    //   // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    //   setTimeout(() => {
    //     window.location.reload();
    //   }, 1000);
    // } else {
    //   showToast('–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏', 'error');
    // }

  } catch (error) {
    console.error('‚ùå rollbackMigration: –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', error);
    showToast('–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏', 'error');
  }
}

// –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function analyzeExistingData() {
  try {
    const allObjects = [
      ...state.domains,
      ...state.projects,
      ...state.tasks,
      ...state.ideas,
      ...state.notes
    ];

    const analysis = {
      totalObjects: allObjects.length,
      objectsWithHierarchy: 0,
      objectsWithoutHierarchy: 0,
      existingConnections: 0,
      potentialConnections: 0,
      issues: [],
      recommendations: []
    };

    allObjects.forEach(obj => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
      const hasHierarchy = obj.parentId !== undefined || obj.children !== undefined || obj.locks !== undefined;
      
      if (hasHierarchy) {
        analysis.objectsWithHierarchy++;
      } else {
        analysis.objectsWithoutHierarchy++;
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏
      if (obj.parentId) {
        analysis.existingConnections++;
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
      if (obj.domainId && getObjectType(obj) !== 'domain') {
        analysis.potentialConnections++;
      }
      if (obj.projectId && getObjectType(obj) === 'task') {
        analysis.potentialConnections++;
      }
    });

    return analysis;

  } catch (error) {
    console.error('‚ùå analyzeExistingData: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    return {
      totalObjects: 0,
      objectsWithHierarchy: 0,
      objectsWithoutHierarchy: 0,
      existingConnections: 0,
      potentialConnections: 0,
      issues: [`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`],
      recommendations: ['–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É']
    };
  }
}

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
function showInfoPanel(text, icon = 'üí°', isHtml = false) {
  console.log('üí° Showing info panel:', text, icon, isHtml);
  const infoPanel = document.getElementById('infoPanel');
  const infoText = document.getElementById('infoText');
  const infoIcon = infoPanel.querySelector('.info-icon');
  
  if (infoPanel && infoText) {
    if (isHtml) {
      infoText.innerHTML = text;
    } else {
      infoText.textContent = text;
    }
    if (infoIcon) infoIcon.textContent = icon;
    infoPanel.classList.add('show');
    
    // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
    clearTimeout(window.infoPanelTimeout);
    if (text.length > 100) {
      window.infoPanelTimeout = setTimeout(() => {
        hideInfoPanel();
      }, 10000);
    }
  } else {
    console.error('‚ùå Info panel elements not found:', { infoPanel, infoText });
  }
}

function hideInfoPanel() {
  const infoPanel = document.getElementById('infoPanel');
  if (infoPanel) {
    infoPanel.classList.remove('show');
    clearTimeout(window.infoPanelTimeout);
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
function setupInfoPanelTooltips() {
  console.log('üîß Setting up info panel tooltips...');
  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const navButtons = [
    { selector: '#btnCenter', text: '–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤–∏–¥–µ (–≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: C)', icon: 'üéØ' },
    { selector: '#btnFitDomain', text: '–ü–æ–¥–æ–≥–Ω–∞—Ç—å –≤–∏–¥ –ø–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–º–µ–Ω (–≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: F)', icon: 'üåç' },
    { selector: '#btnFitProject', text: '–ü–æ–¥–æ–≥–Ω–∞—Ç—å –≤–∏–¥ –ø–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç (–≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: P)', icon: 'üéØ' },
    { selector: '#btnReset', text: '–°–±—Ä–æ—Å–∏—Ç—å –º–∞—Å—à—Ç–∞–± –∏ –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ä—Ç—ã (–≥–æ—Ä—è—á–∞—è –∫–ª–∞–≤–∏—à–∞: R)', icon: 'üîÑ' },
    { selector: '#btnFullscreen', text: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º', icon: '‚õ∂' }
  ];

  navButtons.forEach(button => {
    const element = document.querySelector(button.selector);
    if (element) {
      element.addEventListener('mouseenter', () => {
        showInfoPanel(button.text, button.icon);
      });
      element.addEventListener('mouseleave', hideInfoPanel);
    }
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è
  const createButtons = [
    { selector: '#createTaskBtn', text: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É <span class="kbd">Ctrl+N</span>', icon: '‚ûï', isHtml: true },
    { selector: '#createProjectBtn', text: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç <span class="kbd">Ctrl+Shift+N</span>', icon: 'üéØ', isHtml: true },
    { selector: '#createIdeaBtn', text: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–¥–µ—é - –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –º—ã—Å–ª–µ–π', icon: 'üåå' },
    { selector: '#createNoteBtn', text: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É - –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', icon: 'ü™®' },
    { selector: '#btnAddDomain', text: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω - –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ñ–µ—Ä—É –∂–∏–∑–Ω–∏ <span class="kbd">Ctrl+Shift+D</span>', icon: 'üåç', isHtml: true },
    { selector: '#btnAddChecklist', text: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç - –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á', icon: '‚úì' },
    { selector: '#btnInboxCapture', text: '–ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç –∏–¥–µ–π –∏ –∑–∞–¥–∞—á –≤ –∏–Ω–±–æ–∫—Å', icon: 'üì•' },
    { selector: '#btnInboxList', text: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω–±–æ–∫—Å–∞', icon: 'üìã' }
  ];

  createButtons.forEach(button => {
    const element = document.querySelector(button.selector);
    if (element) {
      element.addEventListener('mouseenter', () => {
        showInfoPanel(button.text, button.icon, button.isHtml || false);
      });
      element.addEventListener('mouseleave', hideInfoPanel);
    }
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
  const statusPills = [
    { selector: '.pill-backlog', text: '–ó–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∞—Ö - –±—É–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é <span class="kbd">1</span>', icon: 'üìã', isHtml: true },
    { selector: '.pill-today', text: '–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è <span class="kbd">2</span>', icon: 'üìÖ', isHtml: true },
    { selector: '.pill-doing', text: '–ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ - –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å <span class="kbd">3</span>', icon: '‚ö°', isHtml: true },
    { selector: '.pill-done', text: '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—é <span class="kbd">4</span>', icon: '‚úÖ', isHtml: true }
  ];

  statusPills.forEach(pill => {
    const elements = document.querySelectorAll(pill.selector);
    elements.forEach(element => {
      element.addEventListener('mouseenter', () => {
        showInfoPanel(pill.text, pill.icon, pill.isHtml || false);
      });
      element.addEventListener('mouseleave', hideInfoPanel);
    });
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const settingsItems = [
    { selector: '[data-action="hotkeys"]', text: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º', icon: '‚å®Ô∏è' },
    { selector: '[data-action="display"]', text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∏ –æ–±—ä–µ–∫—Ç–æ–≤', icon: 'üì±' },
    { selector: '[data-action="hierarchy"]', text: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)', icon: 'üåê' },
    { selector: '[data-action="export"]', text: '–≠–∫—Å–ø–æ—Ä—Ç –∏ –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', icon: 'üíæ' },
    { selector: '#btnSettings', text: '–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', icon: '‚öôÔ∏è' },
    { selector: '#btnAbout', text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (v0.2.16.2-chronos-concept)', icon: '‚ÑπÔ∏è' }
  ];

  settingsItems.forEach(item => {
    const element = document.querySelector(item.selector);
    if (element) {
      element.addEventListener('mouseenter', () => {
        showInfoPanel(item.text, item.icon);
      });
      element.addEventListener('mouseleave', hideInfoPanel);
    }
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –≤–∏–¥–æ–≤
  const viewChips = [
    { selector: '[data-view="map"]', text: '–ö–∞—Ä—Ç–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –∏—Ö —Å–≤—è–∑—è–º–∏', icon: 'üó∫Ô∏è' },
    { selector: '[data-view="today"]', text: '–°–µ–≥–æ–¥–Ω—è - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏', icon: 'üìÖ' }
  ];

  viewChips.forEach(chip => {
    const element = document.querySelector(chip.selector);
    if (element) {
      element.addEventListener('mouseenter', () => {
        showInfoPanel(chip.text, chip.icon);
      });
      element.addEventListener('mouseleave', hideInfoPanel);
    }
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∑—É–º-—Å–ª–∞–π–¥–µ—Ä–∞
  const zoomSlider = document.getElementById('zoomSlider');
  if (zoomSlider) {
    zoomSlider.addEventListener('mouseenter', () => {
      showInfoPanel('–†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ –∫–∞—Ä—Ç—ã - –æ—Ç 50% –¥–æ 220% <span class="kbd">Ctrl+0</span> <span class="kbd">Ctrl+1</span> <span class="kbd">Ctrl+2</span>', 'üîç', true);
    });
    zoomSlider.addEventListener('mouseleave', hideInfoPanel);
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const otherElements = [
    { selector: '.brand', text: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤–µ—Ä—Å–∏—è', icon: 'üè∑Ô∏è' },
    { selector: '.version', text: '–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', icon: 'üìã' },
    { selector: '.spacer', text: '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', icon: 'üìè' },
    { selector: '.legend', text: '–õ–µ–≥–µ–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á', icon: 'üìä' },
    { selector: '.toggle', text: '–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤', icon: 'üîÑ' }
  ];

  otherElements.forEach(element => {
    const el = document.querySelector(element.selector);
    if (el) {
      el.addEventListener('mouseenter', () => {
        showInfoPanel(element.text, element.icon);
      });
      el.addEventListener('mouseleave', hideInfoPanel);
    }
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û –≤–µ—Ä—Å–∏–∏"
  const aboutBtn = document.getElementById('btnAbout');
  if (aboutBtn) {
    aboutBtn.addEventListener('mouseenter', () => {
      showInfoPanel('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (v0.2.16.2-chronos-concept)', '‚ÑπÔ∏è');
    });
    aboutBtn.addEventListener('mouseleave', hideInfoPanel);
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
  const leftPanelSections = [
    { selector: '.section h3', text: '–°–µ–∫—Ü–∏–∏ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ - –¥–æ–º–µ–Ω—ã, —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏', icon: 'üìÇ' },
    { selector: '#domainsList', text: '–°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ - –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏', icon: 'üåç' },
    { selector: '#tagsList', text: '–§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–µ–≥–∞–º - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á', icon: 'üè∑Ô∏è' },
    { selector: '.creation-panel', text: '–ü–∞–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—ä–µ–∫—Ç–æ–≤', icon: '‚ûï' }
  ];

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const searchElements = [
    { selector: '#searchInput', text: '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ <span class="kbd">Ctrl+F</span>', icon: 'üîç', isHtml: true },
    { selector: '#searchButton', text: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É', icon: 'üîç' }
  ];

  leftPanelSections.forEach(section => {
    const elements = document.querySelectorAll(section.selector);
    elements.forEach(element => {
      element.addEventListener('mouseenter', () => {
        showInfoPanel(section.text, section.icon);
      });
      element.addEventListener('mouseleave', hideInfoPanel);
    });
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
  searchElements.forEach(element => {
    const el = document.querySelector(element.selector);
    if (el) {
      el.addEventListener('mouseenter', () => {
        showInfoPanel(element.text, element.icon, element.isHtml || false);
      });
      el.addEventListener('mouseleave', hideInfoPanel);
    }
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–∏–Ω—Å–ø–µ–∫—Ç–æ—Ä)
  const inspectorPanel = document.getElementById('inspector');
  if (inspectorPanel) {
    inspectorPanel.addEventListener('mouseenter', () => {
      showInfoPanel('–ò–Ω—Å–ø–µ–∫—Ç–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–∑–∞–¥–∞—á–∞, –ø—Ä–æ–µ–∫—Ç, –¥–æ–º–µ–Ω, –∏–¥–µ—è, –∑–∞–º–µ—Ç–∫–∞, —á–µ–∫-–ª–∏—Å—Ç)', 'üîç');
    });
    inspectorPanel.addEventListener('mouseleave', hideInfoPanel);
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —à–æ—Ä—Ç–∫–∞—Ç–æ–≤
  const hintSection = document.querySelector('.hint');
  if (hintSection) {
    hintSection.addEventListener('mouseenter', () => {
      showInfoPanel(
        '–®–æ—Ä—Ç–∫–∞—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: <code>#—Ç–µ–≥</code> <code>@–ø—Ä–æ–µ–∫—Ç</code> <code>!–≤—Ä–µ–º—è</code> <code>~–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</code> <code>#–∏–¥–µ—è –Ω–∞–∑–≤–∞–Ω–∏–µ</code> <code>#–∑–∞–º–µ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ</code>', 
        '‚ö°', 
        true
      );
    });
    hintSection.addEventListener('mouseleave', hideInfoPanel);
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const modalElements = [
    { selector: '#modal', text: '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π', icon: 'üí¨' },
    { selector: '#modalTitle', text: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞', icon: 'üìù' },
    { selector: '#modalBody', text: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞', icon: 'üìÑ' },
    { selector: '#modalCancel', text: '–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ', icon: '‚ùå' },
    { selector: '#modalOk', text: '–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ', icon: '‚úÖ' },
    { selector: '#toast', text: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', icon: 'üîî' }
  ];

  modalElements.forEach(element => {
    const el = document.querySelector(element.selector);
    if (el) {
      el.addEventListener('mouseenter', () => {
        showInfoPanel(element.text, element.icon);
      });
      el.addEventListener('mouseleave', hideInfoPanel);
    }
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏)
  const navHints = [
    { text: 'LMB + –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ = –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã', icon: 'üñ±Ô∏è' },
    { text: 'Alt + LMB + –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ = –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤', icon: 'üîÑ' },
    { text: '–ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ = –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤', icon: 'üìã' },
    { text: '–ö–æ–ª–µ—Å–æ –º—ã—à–∏ = –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã', icon: 'üîç' },
    { text: '–ö–ª–∏–∫ –ø–æ –æ–±—ä–µ–∫—Ç—É = –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑ –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ', icon: 'üëÜ' },
    { text: '–ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –æ–±—ä–µ–∫—Ç—ã = –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ', icon: 'üí°' },
    { text: '–î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É = –æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', icon: '‚úì' }
  ];

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–∞—Ä—Ç—É
  const canvas = document.getElementById('canvas');
  if (canvas) {
    let hintIndex = 0;
    canvas.addEventListener('mouseenter', () => {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
      // showInfoPanel(navHints[hintIndex].text, navHints[hintIndex].icon);
      // hintIndex = (hintIndex + 1) % navHints.length;
      console.log('üéØ Canvas hover - showing new tooltips instead of old nav hints');
    });
    canvas.addEventListener('mouseleave', hideInfoPanel);
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤
  const checklistElements = [
    { selector: '#checklistPopup', text: '–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —á–µ–∫-–ª–∏—Å—Ç–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º', icon: 'üìã' },
    { selector: '#editChecklistBtn', text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç', icon: '‚úèÔ∏è' },
    { selector: '#closeChecklistPopup', text: '–ó–∞–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —á–µ–∫-–ª–∏—Å—Ç–∞', icon: '‚ùå' }
  ];

  checklistElements.forEach(element => {
    const el = document.querySelector(element.selector);
    if (el) {
      el.addEventListener('mouseenter', () => {
        showInfoPanel(element.text, element.icon);
      });
      el.addEventListener('mouseleave', hideInfoPanel);
    }
  });

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ (—á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)
  setupMapObjectTooltips();
}

// –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
function setupMapObjectTooltips() {
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  document.addEventListener('mouseover', (e) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –æ–±—ä–µ–∫—Ç–æ–º –Ω–∞ –∫–∞—Ä—Ç–µ
    if (e.target.classList.contains('domain-item') || 
        e.target.classList.contains('project-item') || 
        e.target.classList.contains('task-item') ||
        e.target.classList.contains('idea-item') ||
        e.target.classList.contains('note-item')) {
      
      const type = e.target.classList.contains('domain-item') ? 'domain' :
                   e.target.classList.contains('project-item') ? 'project' :
                   e.target.classList.contains('task-item') ? 'task' :
                   e.target.classList.contains('idea-item') ? 'idea' : 'note';
      
      const tooltips = {
        domain: { text: '–î–æ–º–µ–Ω - –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ñ–µ—Ä–∞ –∂–∏–∑–Ω–∏ (—Ä–∞–±–æ—Ç–∞, –¥–æ–º, —Ö–æ–±–±–∏)', icon: 'üåç' },
        project: { text: '–ü—Ä–æ–µ–∫—Ç - –≥—Ä—É–ø–ø–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Ä–∞–º–∫–∞—Ö –¥–æ–º–µ–Ω–∞', icon: 'üéØ' },
        task: { text: '–ó–∞–¥–∞—á–∞ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', icon: '‚úÖ' },
        idea: { text: '–ò–¥–µ—è - —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –º—ã—Å–ª—å –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è', icon: 'üåå' },
        note: { text: '–ó–∞–º–µ—Ç–∫–∞ - –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', icon: 'üìù' }
      };
      
      if (tooltips[type]) {
        showInfoPanel(tooltips[type].text, tooltips[type].icon);
      }
    }
  });
  
  document.addEventListener('mouseout', (e) => {
    if (e.target.classList.contains('domain-item') || 
        e.target.classList.contains('project-item') || 
        e.target.classList.contains('task-item') ||
        e.target.classList.contains('idea-item') ||
        e.target.classList.contains('note-item')) {
      hideInfoPanel();
    }
  });
}

// expose globally for addons/other modules
try { window.showToast = showToast; } catch (_) {}
try { window.clearHotkey = clearHotkey; } catch (_) {}
try { window.openModal = openModal; } catch (_) {}
try { window.getMapNodes = getMapNodes; } catch (_) {}
try { window.showInfoPanel = showInfoPanel; } catch (_) {}
try { window.hideInfoPanel = hideInfoPanel; } catch (_) {}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
window.cleanupDuplicates = function() {
  console.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ state –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  if (!state || !state.ideas) {
    console.warn('‚ö†Ô∏è State –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É');
    return;
  }
  
  // –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–¥–µ–π - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
  if (state.ideas && state.ideas.length > 0) {
    const originalCount = state.ideas.length;
    const uniqueIdeas = [];
    const seenIds = new Set();
    const seenTitles = new Set();
    
    state.ideas.forEach(idea => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const isDuplicate = seenIds.has(idea.id) || seenTitles.has(idea.title);
      
      if (!isDuplicate && idea.id && idea.title) {
        seenIds.add(idea.id);
        seenTitles.add(idea.title);
        uniqueIdeas.push(idea);
      } else {
        console.warn('üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –∏–¥–µ–∏:', idea.title, idea.id);
      }
    });
    
    if (uniqueIdeas.length !== originalCount) {
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ –∏–¥–µ–π: ${originalCount} ‚Üí ${uniqueIdeas.length}`);
      state.ideas = uniqueIdeas;
    }
  }
  
  // –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–º–µ—Ç–æ–∫
  if (state.notes && state.notes.length > 0) {
    const originalCount = state.notes.length;
    const uniqueNotes = [];
    const seenIds = new Set();
    
    state.notes.forEach(note => {
      if (!seenIds.has(note.id) && note.id && note.title) {
        seenIds.add(note.id);
        uniqueNotes.push(note);
      }
    });
    
    if (uniqueNotes.length !== originalCount) {
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: ${originalCount} ‚Üí ${uniqueNotes.length}`);
      state.notes = uniqueNotes;
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
  saveState();
  requestLayout();
  console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–¥–µ—è–º–∏ –∏ –∑–∞–º–µ—Ç–∫–∞–º–∏
window.createIdea = function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∏–¥–µ–∏ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
  const existingIdea = state.ideas.find(idea => idea.title === '–ù–æ–≤–∞—è –∏–¥–µ—è');
  if (existingIdea) {
    console.warn('‚ö†Ô∏è –ò–¥–µ—è "–ù–æ–≤–∞—è –∏–¥–µ—è" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é');
    return existingIdea;
  }
  
  const idea = {
    id: generateId(),
    title: '–ù–æ–≤–∞—è –∏–¥–µ—è',
    content: '',
    domainId: state.activeDomain || 'd3',
    x: Math.random() * 400 - 200,
    y: Math.random() * 400 - 200,
    r: 30,
    color: getRandomIdeaColor(),
    opacity: 0.4,
    createdAt: Date.now(),
    updatedAt: Date.now()
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
  // initHierarchyFields(idea, 'idea'); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  
  state.ideas.push(idea);
  saveState();
  requestLayout(); // Use optimized layout request
  return idea;
};

window.createNote = function() {
  const note = {
    id: generateId(),
    title: '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞',
    content: '',
    domainId: state.activeDomain || 'd3',
    x: Math.random() * 400 - 200,
    y: Math.random() * 400 - 200,
    r: 8,
    color: getRandomNoteColor(),
    opacity: 1.0,
    createdAt: Date.now(),
    updatedAt: Date.now()
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
  // initHierarchyFields(note, 'note'); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
  
  state.notes.push(note);
  saveState();
  requestLayout(); // Use optimized layout request
  return note;
};

window.saveIdea = function(ideaId) {
  const idea = state.ideas.find(i => i.id === ideaId);
  if (!idea) return;
  
  const title = document.getElementById('ideaTitle').value;
  const content = document.getElementById('ideaContent').value;
  const color = document.getElementById('ideaColor').value;
  const size = parseInt(document.getElementById('ideaSize').value);
  const opacity = parseFloat(document.getElementById('ideaOpacity').value);
  
  if (title.trim()) {
    idea.title = title.trim();
    idea.content = content.trim();
    idea.color = color;
    idea.r = size;
    idea.opacity = opacity;
    idea.updatedAt = Date.now();
    saveState();
    layoutMap();
    drawMap();
    closeModal();
    showToast(`–ò–¥–µ—è "${idea.title}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞`, "ok");
  }
};

window.saveNote = function(noteId) {
  const note = state.notes.find(n => n.id === noteId);
  if (!note) return;
  
  const title = document.getElementById('noteTitle').value;
  const content = document.getElementById('noteContent').value;
  const color = document.getElementById('noteColor').value;
  const size = parseInt(document.getElementById('noteSize').value);
  const opacity = parseFloat(document.getElementById('noteOpacity').value);
  
  if (title.trim()) {
    note.title = title.trim();
    note.content = content.trim();
    note.color = color;
    note.r = size;
    note.opacity = opacity;
    note.updatedAt = Date.now();
    saveState();
    layoutMap();
    drawMap();
    closeModal();
    showToast(`–ó–∞–º–µ—Ç–∫–∞ "${note.title}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞`, "ok");
  }
};

window.deleteIdea = function(ideaId) {
  state.ideas = state.ideas.filter(i => i.id !== ideaId);
  saveState();
  layoutMap();
  drawMap();
  closeModal();
  showToast("–ò–¥–µ—è —É–¥–∞–ª–µ–Ω–∞", "ok");
};

window.deleteNote = function(noteId) {
  state.notes = state.notes.filter(n => n.id !== noteId);
  saveState();
  layoutMap();
  drawMap();
  closeModal();
  showToast("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞", "ok");
};

// –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
window.saveTask = function(taskId) {
  const task = state.tasks.find(t => t.id === taskId);
  if (!task) return;
  
  task.title = document.getElementById('taskTitle').value;
  task.description = document.getElementById('taskDescription').value;
  task.status = document.getElementById('taskStatus').value;
  task.priority = document.getElementById('taskPriority').value;
  task.tags = document.getElementById('taskTags').value.split(',').map(t => t.trim()).filter(t => t);
  task.dueDate = document.getElementById('taskDueDate').value ? new Date(document.getElementById('taskDueDate').value).getTime() : null;
  task.estimatedTime = document.getElementById('taskEstimatedTime').value;
  task.updatedAt = Date.now();
  
  saveState();
  layoutMap();
  drawMap();
  updateWip();
  closeModal();
  
  showToast(`–ó–∞–¥–∞—á–∞ "${task.title}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞`, "ok");
};

window.saveProject = function(projectId) {
  const project = state.projects.find(p => p.id === projectId);
  if (!project) return;
  
  project.title = document.getElementById('projectTitle').value;
  project.description = document.getElementById('projectDescription').value;
  project.domainId = document.getElementById('projectDomain').value;
  project.color = document.getElementById('projectColor').value;
  project.updatedAt = Date.now();
  
  saveState();
  layoutMap();
  drawMap();
  closeModal();
  
  showToast(`–ü—Ä–æ–µ–∫—Ç "${project.title}" –æ–±–Ω–æ–≤–ª–µ–Ω`, "ok");
};

window.deleteTask = function(taskId) {
  if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?')) {
    state.tasks = state.tasks.filter(t => t.id !== taskId);
    saveState();
    layoutMap();
    drawMap();
    updateWip();
    closeModal();
  }
};

window.deleteProject = function(projectId) {
  if (confirm('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –≤—Å–µ –µ–≥–æ –∑–∞–¥–∞—á–∏?')) {
    state.tasks = state.tasks.filter(t => t.projectId !== projectId);
    state.projects = state.projects.filter(p => p.id !== projectId);
    saveState();
    layoutMap();
    drawMap();
    closeModal();
  }
};

window.saveDomain = function(domainId) {
  const domain = state.domains.find(d => d.id === domainId);
  if (!domain) return;
  
  domain.title = document.getElementById('domainTitle').value;
  domain.description = document.getElementById('domainDescription').value;
  domain.mood = document.getElementById('domainMood').value;
  domain.color = document.getElementById('domainColor').value;
  domain.updatedAt = Date.now();
  
  saveState();
  layoutMap();
  drawMap();
  renderSidebar();
  closeModal();
  
  showToast(`–î–æ–º–µ–Ω "${domain.title}" –æ–±–Ω–æ–≤–ª–µ–Ω`, "ok");
};

window.deleteDomain = function(domainId) {
  if (confirm('–£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω –∏ –≤—Å–µ –µ–≥–æ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞–¥–∞—á–∏?')) {
    state.tasks = state.tasks.filter(t => {
      const project = state.projects.find(p => p.id === t.projectId);
      return project && project.domainId !== domainId;
    });
    state.projects = state.projects.filter(p => p.domainId !== domainId);
    state.domains = state.domains.filter(d => d.id !== domainId);
    saveState();
    layoutMap();
    drawMap();
    renderSidebar();
    closeModal();
  }
};

window.closeModal = function() {
  const modal = document.getElementById('modal');
  if (modal) {
    modal.style.display = 'none';
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –∏–∑ view_map.js
window.showIdeaEditor = function(idea) {
  // –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
  const modal = document.getElementById('modal');
  if (!modal) return;
  
  modal.innerHTML = `
    <div class="box idea-editor">
      <div class="title">üåå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é</div>
      <div class="body">
        <div class="form-group">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏:</label>
          <input type="text" id="ideaTitle" value="${idea.title}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏" class="form-input">
        </div>
        <div class="form-group">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
          <textarea id="ideaContent" placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ..." class="form-textarea">${idea.content}</textarea>
        </div>
        <div class="form-group">
          <label>–¶–≤–µ—Ç:</label>
          <div class="color-picker">
            <input type="color" id="ideaColor" value="${idea.color}" class="color-input">
            <div class="color-presets">
              <div class="color-preset" data-color="#ff6b6b" style="background: #ff6b6b;"></div>
              <div class="color-preset" data-color="#4ecdc4" style="background: #4ecdc4;"></div>
              <div class="color-preset" data-color="#45b7d1" style="background: #45b7d1;"></div>
              <div class="color-preset" data-color="#96ceb4" style="background: #96ceb4;"></div>
              <div class="color-preset" data-color="#feca57" style="background: #feca57;"></div>
              <div class="color-preset" data-color="#ff9ff3" style="background: #ff9ff3;"></div>
            </div>
          </div>
        </div>
        <div class="form-group">
          <label>–†–∞–∑–º–µ—Ä:</label>
          <input type="range" id="ideaSize" min="20" max="60" value="${idea.r}" class="form-range">
          <span class="size-value">${idea.r}px</span>
        </div>
        <div class="form-group">
          <label>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</label>
          <input type="range" id="ideaOpacity" min="0.1" max="1" step="0.1" value="${idea.opacity}" class="form-range">
          <span class="opacity-value">${Math.round(idea.opacity * 100)}%</span>
        </div>
      </div>
      <div class="buttons">
        <button class="btn" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn primary" onclick="saveIdea('${idea.id}')">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button class="btn danger" onclick="deleteIdea('${idea.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
      </div>
    </div>
    <div class="backdrop"></div>
  `;
  modal.style.display = 'flex';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
  modal.querySelectorAll('.color-preset').forEach(preset => {
    preset.addEventListener('click', () => {
      const color = preset.dataset.color;
      modal.querySelector('#ideaColor').value = color;
    });
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
  let sizeTimeout, opacityTimeout;
  
  modal.querySelector('#ideaSize').addEventListener('input', (e) => {
    modal.querySelector('.size-value').textContent = e.target.value + 'px';
    
    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    clearTimeout(sizeTimeout);
    sizeTimeout = setTimeout(() => {
      idea.r = parseInt(e.target.value);
      requestDraw();
    }, 100);
  });
  
  modal.querySelector('#ideaOpacity').addEventListener('input', (e) => {
    modal.querySelector('.opacity-value').textContent = Math.round(e.target.value * 100) + '%';
    
    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    clearTimeout(opacityTimeout);
    opacityTimeout = setTimeout(() => {
      idea.opacity = parseFloat(e.target.value);
      requestDraw();
    }, 100);
  });
};

window.showNoteEditor = function(note) {
  // –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
  const modal = document.getElementById('modal');
  if (!modal) return;
  
  modal.innerHTML = `
    <div class="box note-editor">
      <div class="title">ü™® –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É</div>
      <div class="body">
        <div class="form-group">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:</label>
          <input type="text" id="noteTitle" value="${note.title}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏" class="form-input">
        </div>
        <div class="form-group">
          <label>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
          <textarea id="noteContent" placeholder="–û–ø–∏—à–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏..." class="form-textarea">${note.content}</textarea>
        </div>
        <div class="form-group">
          <label>–¶–≤–µ—Ç:</label>
          <div class="color-picker">
            <input type="color" id="noteColor" value="${note.color}" class="color-input">
            <div class="color-presets">
              <div class="color-preset" data-color="#8b7355" style="background: #8b7355;"></div>
              <div class="color-preset" data-color="#a0a0a0" style="background: #a0a0a0;"></div>
              <div class="color-preset" data-color="#6c757d" style="background: #6c757d;"></div>
              <div class="color-preset" data-color="#495057" style="background: #495057;"></div>
              <div class="color-preset" data-color="#343a40" style="background: #343a40;"></div>
              <div class="color-preset" data-color="#212529" style="background: #212529;"></div>
            </div>
          </div>
        </div>
        <div class="form-group">
          <label>–†–∞–∑–º–µ—Ä:</label>
          <input type="range" id="noteSize" min="5" max="20" value="${note.r}" class="form-range">
          <span class="size-value">${note.r}px</span>
        </div>
        <div class="form-group">
          <label>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</label>
          <input type="range" id="noteOpacity" min="0.1" max="1" step="0.1" value="${note.opacity}" class="form-range">
          <span class="opacity-value">${Math.round(note.opacity * 100)}%</span>
        </div>
      </div>
      <div class="buttons">
        <button class="btn" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn primary" onclick="saveNote('${note.id}')">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button class="btn danger" onclick="deleteNote('${note.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
      </div>
    </div>
    <div class="backdrop"></div>
  `;
  modal.style.display = 'flex';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
  modal.querySelectorAll('.color-preset').forEach(preset => {
    preset.addEventListener('click', () => {
      const color = preset.dataset.color;
      modal.querySelector('#noteColor').value = color;
    });
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
  let sizeTimeout, opacityTimeout;
  
  modal.querySelector('#noteSize').addEventListener('input', (e) => {
    modal.querySelector('.size-value').textContent = e.target.value + 'px';
    
    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    clearTimeout(sizeTimeout);
    sizeTimeout = setTimeout(() => {
      note.r = parseInt(e.target.value);
      requestDraw();
    }, 100);
  });
  
  modal.querySelector('#noteOpacity').addEventListener('input', (e) => {
    modal.querySelector('.opacity-value').textContent = Math.round(e.target.value * 100) + '%';
    
    // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
    clearTimeout(opacityTimeout);
    opacityTimeout = setTimeout(() => {
      note.opacity = parseFloat(e.target.value);
      requestDraw();
    }, 100);
  });
};

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–¥–∞—á
window.showTaskEditor = function(task) {
  const modal = document.getElementById('modal');
  if (!modal) return;
  
  modal.innerHTML = `
    <div class="box task-editor">
      <div class="title">‚ûï –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É</div>
      <div class="body">
        <div class="form-group">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</label>
          <input type="text" id="taskTitle" value="${task.title}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" class="form-input">
        </div>
        <div class="form-group">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
          <textarea id="taskDescription" placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ..." class="form-textarea">${task.description || ''}</textarea>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label>–°—Ç–∞—Ç—É—Å:</label>
            <select id="taskStatus" class="form-select">
              <option value="backlog" ${task.status === 'backlog' ? 'selected' : ''}>Backlog</option>
              <option value="today" ${task.status === 'today' ? 'selected' : ''}>–°–µ–≥–æ–¥–Ω—è</option>
              <option value="doing" ${task.status === 'doing' ? 'selected' : ''}>–í —Ä–∞–±–æ—Ç–µ</option>
              <option value="done" ${task.status === 'done' ? 'selected' : ''}>–ì–æ—Ç–æ–≤–æ</option>
            </select>
          </div>
          <div class="form-group">
            <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
            <select id="taskPriority" class="form-select">
              <option value="p1" ${task.priority === 'p1' ? 'selected' : ''}>P1 - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
              <option value="p2" ${task.priority === 'p2' ? 'selected' : ''}>P2 - –í—ã—Å–æ–∫–∏–π</option>
              <option value="p3" ${task.priority === 'p3' ? 'selected' : ''}>P3 - –°—Ä–µ–¥–Ω–∏–π</option>
              <option value="p4" ${task.priority === 'p4' ? 'selected' : ''}>P4 - –ù–∏–∑–∫–∏–π</option>
            </select>
          </div>
        </div>
        <div class="form-group">
          <label>–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
          <input type="text" id="taskTags" value="${(task.tags || []).join(', ')}" placeholder="–≤–∞–∂–Ω–æ–µ, —Å—Ä–æ—á–Ω–æ–µ, –ø—Ä–æ–µ–∫—Ç" class="form-input">
        </div>
        <div class="form-row">
          <div class="form-group">
            <label>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</label>
            <input type="date" id="taskDueDate" value="${task.dueDate ? new Date(task.dueDate).toISOString().split('T')[0] : ''}" class="form-input">
          </div>
          <div class="form-group">
            <label>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:</label>
            <input type="text" id="taskEstimatedTime" value="${task.estimatedTime || ''}" placeholder="2—á, 30–º, 1–¥" class="form-input">
          </div>
        </div>
      </div>
      <div class="buttons">
        <button class="btn" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn primary" onclick="saveTask('${task.id}')">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button class="btn danger" onclick="deleteTask('${task.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
      </div>
    </div>
    <div class="backdrop"></div>
  `;
  modal.style.display = 'flex';
};

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
window.showProjectEditor = function(project) {
  const modal = document.getElementById('modal');
  if (!modal) return;
  
  const domainOptions = state.domains.map(domain => 
    `<option value="${domain.id}" ${project.domainId === domain.id ? 'selected' : ''}>${domain.title}</option>`
  ).join('');
  
  modal.innerHTML = `
    <div class="box project-editor">
      <div class="title">üéØ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</div>
      <div class="body">
        <div class="form-group">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</label>
          <input type="text" id="projectTitle" value="${project.title}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" class="form-input">
        </div>
        <div class="form-group">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
          <textarea id="projectDescription" placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ..." class="form-textarea">${project.description || ''}</textarea>
        </div>
        <div class="form-group">
          <label>–î–æ–º–µ–Ω:</label>
          <select id="projectDomain" class="form-select">
            ${domainOptions}
          </select>
        </div>
        <div class="form-group">
          <label>–¶–≤–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞:</label>
          <div class="color-picker">
            <input type="color" id="projectColor" value="${project.color || '#4CAF50'}" class="color-input">
            <div class="color-presets">
              <div class="color-preset" data-color="#4CAF50" style="background: #4CAF50;"></div>
              <div class="color-preset" data-color="#2196F3" style="background: #2196F3;"></div>
              <div class="color-preset" data-color="#FF9800" style="background: #FF9800;"></div>
              <div class="color-preset" data-color="#9C27B0" style="background: #9C27B0;"></div>
              <div class="color-preset" data-color="#F44336" style="background: #F44336;"></div>
              <div class="color-preset" data-color="#00BCD4" style="background: #00BCD4;"></div>
            </div>
          </div>
        </div>
      </div>
      <div class="buttons">
        <button class="btn" onclick="closeModal()">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn primary" onclick="saveProject('${project.id}')">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button class="btn danger" onclick="deleteProject('${project.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
      </div>
    </div>
    <div class="backdrop"></div>
  `;
  modal.style.display = 'flex';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
  modal.querySelectorAll('.color-preset').forEach(preset => {
    preset.addEventListener('click', () => {
      const color = preset.dataset.color;
      modal.querySelector('#projectColor').value = color;
    });
  });
};

window.showDomainEditor = function(domain) {
  const modal = document.getElementById('modal');
  if (!modal) return;
  
  const moodOptions = [
    { value: 'balance', label: '–ë–∞–ª–∞–Ω—Å', emoji: '‚öñÔ∏è' },
    { value: 'energy', label: '–≠–Ω–µ—Ä–≥–∏—è', emoji: '‚ö°' },
    { value: 'focus', label: '–§–æ–∫—É—Å', emoji: 'üéØ' },
    { value: 'creativity', label: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', emoji: 'üé®' },
    { value: 'growth', label: '–†–æ—Å—Ç', emoji: 'üå±' },
    { value: 'rest', label: '–û—Ç–¥—ã—Ö', emoji: 'üò¥' }
  ];
  
  const moodSelect = moodOptions.map(mood => 
    `<option value="${mood.value}" ${domain.mood === mood.value ? 'selected' : ''}>${mood.emoji} ${mood.label}</option>`
  ).join('');
  
  modal.innerHTML = `
    <div class="modal-content">
      <h2>üåç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω</h2>
      <div class="form-group">
        <label for="domainTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞:</label>
        <input type="text" id="domainTitle" value="${domain.title}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞" autofocus>
      </div>
      <div class="form-group">
        <label for="domainDescription">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
        <textarea id="domainDescription" rows="3" placeholder="–û–ø–∏—à–∏—Ç–µ –¥–æ–º–µ–Ω –ø–æ–¥—Ä–æ–±–Ω–µ–µ...">${domain.description || ''}</textarea>
      </div>
      <div class="form-group">
        <label for="domainMood">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞:</label>
        <select id="domainMood">
          ${moodSelect}
        </select>
      </div>
      <div class="form-group">
        <label for="domainColor">–¶–≤–µ—Ç –¥–æ–º–µ–Ω–∞:</label>
        <div class="color-picker">
          <input type="color" id="domainColor" value="${domain.color || '#6366F1'}">
          <div class="color-presets">
            <div class="color-preset" data-color="#6366F1" style="background: #6366F1;"></div>
            <div class="color-preset" data-color="#8B5CF6" style="background: #8B5CF6;"></div>
            <div class="color-preset" data-color="#EC4899" style="background: #EC4899;"></div>
            <div class="color-preset" data-color="#F59E0B" style="background: #F59E0B;"></div>
            <div class="color-preset" data-color="#10B981" style="background: #10B981;"></div>
            <div class="color-preset" data-color="#3B82F6" style="background: #3B82F6;"></div>
            <div class="color-preset" data-color="#2dd4bf" style="background: #2dd4bf;"></div>
            <div class="color-preset" data-color="#ef4444" style="background: #ef4444;"></div>
          </div>
        </div>
      </div>
      <div class="modal-actions">
        <button class="btn" id="cancelDomainEdit">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn primary" id="saveDomainEdit">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button class="btn danger" id="deleteDomainEdit">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
      </div>
    </div>
  `;
  modal.style.display = 'flex';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
  modal.querySelectorAll('.color-preset').forEach(preset => {
    preset.addEventListener('click', () => {
      const color = preset.dataset.color;
      modal.querySelector('#domainColor').value = color;
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
      modal.querySelectorAll('.color-preset').forEach(p => p.classList.remove('selected'));
      preset.classList.add('selected');
    });
  });
  
  // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–≤–µ—Ç
  const currentColor = domain.color || '#6366F1';
  const currentPreset = modal.querySelector(`.color-preset[data-color="${currentColor}"]`);
  if (currentPreset) {
    currentPreset.classList.add('selected');
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  document.getElementById('cancelDomainEdit').onclick = () => {
    closeModal();
  };
  
  document.getElementById('saveDomainEdit').onclick = () => {
    const title = document.getElementById('domainTitle').value.trim();
    const description = document.getElementById('domainDescription').value.trim();
    const mood = document.getElementById('domainMood').value;
    const color = document.getElementById('domainColor').value;
    
    if (!title) {
      showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞', 'error');
      return;
    }
    
    domain.title = title;
    domain.description = description;
    domain.mood = mood;
    domain.color = color;
    domain.updatedAt = Date.now();
    
    saveState();
    if (window.layoutMap) window.layoutMap();
    if (window.drawMap) window.drawMap();
    if (window.renderSidebar) window.renderSidebar();
    
    closeModal();
    showToast('–î–æ–º–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω', 'ok');
  };
  
  document.getElementById('deleteDomainEdit').onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω "${domain.title}"? –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞–¥–∞—á–∏ –≤ –Ω–µ–º –±—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.`)) {
      state.domains = state.domains.filter(d => d.id !== domain.id);
      state.projects = state.projects.filter(p => p.domainId !== domain.id);
      state.tasks = state.tasks.filter(t => t.domainId !== domain.id);
      state.ideas = state.ideas.filter(i => i.domainId !== domain.id);
      state.notes = state.notes.filter(n => n.domainId !== domain.id);
      
      if (state.activeDomain === domain.id) {
        state.activeDomain = state.domains[0]?.id || null;
      }
      
      saveState();
      if (window.layoutMap) window.layoutMap();
      if (window.drawMap) window.drawMap();
      if (window.renderSidebar) window.renderSidebar();
      
      closeModal();
      showToast('–î–æ–º–µ–Ω —É–¥–∞–ª–µ–Ω', 'ok');
    }
  };
  
  // Enter –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  document.getElementById('domainTitle').addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      document.getElementById('saveDomainEdit').click();
    }
  });
};

// Analytics dashboard will be initialized in init() function

// Initialize cosmic animations (with protection against multiple initialization)
let cosmicAnimations;
if (!window.cosmicAnimations) {
  try {
    cosmicAnimations = new CosmicAnimations();
    window.cosmicAnimations = cosmicAnimations;
    console.log('Cosmic animations initialized successfully');
  } catch (e) {
    console.warn('Failed to initialize cosmic animations:', e);
  }
} else {
  console.log('Cosmic animations already initialized, skipping...');
}

// Calculate statistics for sidebar
function calculateStats() {
  const tasks = state.tasks || [];
  
  
  // Start with all tasks
  let filteredTasks = tasks;
  
  // Apply active domain filter if active
  if (state.activeDomain) {
    filteredTasks = filteredTasks.filter(t => {
      // Task belongs to active domain if:
      // 1. Task has domainId matching active domain
      // 2. Task belongs to a project in the active domain
      if (t.domainId === state.activeDomain) return true;
      if (t.projectId) {
        const project = state.projects.find(p => p.id === t.projectId);
        return project && project.domainId === state.activeDomain;
      }
      return false;
    });
  }
  
  // Apply status filter if active
  if (state.filterStatus && state.filterStatus !== 'all') {
    filteredTasks = filteredTasks.filter(t => t.status === state.filterStatus);
  }
  
  // Apply search filter if active
  if (state.searchQuery) {
    filteredTasks = filteredTasks.filter(t => 
      t.title.toLowerCase().includes(state.searchQuery.toLowerCase()) ||
      (t.tags || []).some(tag => tag.toLowerCase().includes(state.searchQuery.toLowerCase()))
    );
  }
  
  return {
    totalTasks: filteredTasks.length,
    backlog: filteredTasks.filter(t => t.status === 'backlog').length,
    today: filteredTasks.filter(t => t.status === 'today').length,
    doing: filteredTasks.filter(t => t.status === 'doing').length,
    done: filteredTasks.filter(t => t.status === 'done').length
  };
}

// Highlight search results on the map
function highlightSearchResults(query, domains, projects, tasks) {
  // This will be used to highlight matching nodes on the map
  // For now, we'll store the search results in state for map rendering
  state.searchResults = {
    domains: domains.map(d => d.id),
    projects: projects.map(p => p.id),
    tasks: tasks.map(t => t.id)
  };
}

// Attach event handlers to domain rows
function attachDomainHandlers() {
  // Handle domain row clicks
  const domainRows = document.querySelectorAll('[data-domain]');
  domainRows.forEach(row => {
    const domainId = row.getAttribute('data-domain');
    
    // Single click
    row.addEventListener('click', (e) => {
      if (e && (e.ctrlKey || e.metaKey || e.shiftKey)) {
        // toggle multiselect list
        let ds = state.activeDomains;
        if (!ds) ds = state.activeDomains = [];
        const arr = Array.isArray(ds) ? ds : Array.from(ds);
        const set = new Set(arr);
        if (set.has(domainId)) set.delete(domainId);
        else set.add(domainId);
        state.activeDomains = Array.from(set);
        state.activeDomain = null;
        updateDomainsList();
        updateStatistics();
        if (window.layoutMap) window.layoutMap();
        if (window.drawMap) window.drawMap();
        try { window.mapApi && window.mapApi.fitAll && window.mapApi.fitAll(); } catch(_){}
        return;
      }
      state.activeDomain = domainId;
      try { state.activeDomains = []; } catch(_){}
      updateDomainsList();
      updateStatistics();
      if (window.layoutMap) window.layoutMap();
      if (window.drawMap) window.drawMap();
      if (window.mapApi && window.mapApi.fitActiveDomain) window.mapApi.fitActiveDomain();
      if (window.updateDomainButton) window.updateDomainButton();
    });
    
    // Double click
    row.addEventListener('dblclick', () => {
      state.activeDomain = domainId;
      updateStatistics();
      if (window.layoutMap) window.layoutMap();
      if (window.drawMap) window.drawMap();
      if (window.mapApi && window.mapApi.fitActiveDomain) window.mapApi.fitActiveDomain();
      if (window.updateDomainButton) window.updateDomainButton();
    });
    
    // Context menu
    row.addEventListener('contextmenu', (e) => {
      e.preventDefault();
      if (window.openDomainMenuX) window.openDomainMenuX(domainId, row);
    });
    
    // Prevent text selection and cursor appearance
    row.style.userSelect = 'none';
    row.style.cursor = 'pointer';
  });
  
  // Handle domain actions (‚ãØ button)
  const actionButtons = document.querySelectorAll('[data-dom]');
  actionButtons.forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const domainId = btn.getAttribute('data-dom');
      const row = btn.closest('[data-domain]');
      if (domainId && window.openDomainMenuX) {
        window.openDomainMenuX(domainId, row);
      }
    });
  });
}

// Update only statistics section without re-rendering entire sidebar
function updateStatistics() {
  const stats = calculateStats();
  const statsSection = document.querySelector('.stats-section');
  if (statsSection) {
    // Update total tasks count and clear domain filter button
    const totalSpan = statsSection.querySelector('span[style*="font-size:10px"]');
    if (totalSpan) {
      totalSpan.textContent = `${stats.totalTasks} –∑–∞–¥–∞—á`;
    }
    
    // Update clear domain filter button
    const clearBtn = statsSection.querySelector('#clearDomainFilter');
    if (state.activeDomain && !clearBtn) {
      // Add button if domain is active but button doesn't exist
      const container = statsSection.querySelector('div[style*="display:flex;align-items:center"]');
      if (container) {
        const button = document.createElement('button');
        button.id = 'clearDomainFilter';
        button.style.cssText = 'background:none;border:1px solid var(--muted);color:var(--muted);padding:2px 6px;border-radius:4px;font-size:9px;cursor:pointer';
        button.textContent = '–í—Å–µ –¥–æ–º–µ–Ω—ã';
                      button.addEventListener('click', () => {
                        state.activeDomain = null;
                        updateDomainsList();
                        updateStatistics();
                        if (window.layoutMap) window.layoutMap();
                        if (window.drawMap) window.drawMap();
                        if (window.updateDomainButton) window.updateDomainButton();
                      });
        container.insertBefore(button, totalSpan);
      }
    } else if (!state.activeDomain && clearBtn) {
      // Remove button if no domain is active
      clearBtn.remove();
    }
    
    // Update stat pills
    const pills = statsSection.querySelectorAll('.stat-pill');
    if (pills.length >= 4) {
      pills[0].textContent = `–ø–ª–∞–Ω: ${stats.backlog}`;
      pills[1].textContent = `—Å–µ–≥–æ–¥–Ω—è: ${stats.today}`;
      pills[2].textContent = `–≤ —Ä–∞–±–æ—Ç–µ: ${stats.doing}`;
      pills[3].textContent = `–≥–æ—Ç–æ–≤–æ: ${stats.done}`;
    }
  }
  
  // Update status filters - –°–ö–†–´–¢–´ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
  const statusWrap = document.getElementById("tagsList");
  if (statusWrap) {
    // –§–∏–ª—å—Ç—Ä—ã —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç—ã
    statusWrap.innerHTML = '';
  }
}

// Update only domains list without re-rendering entire sidebar
function updateDomainsList() {
  const dWrap = document.getElementById("domainsList");
  if (!dWrap) return;
  
  // Filter domains based on search query
  const domainsToShow = state.searchQuery 
    ? state.domains.filter(d => d.title.toLowerCase().includes(state.searchQuery.toLowerCase()))
    : state.domains;
    
  let html = domainsToShow
    .map((d) => {
      const projects = state.projects.filter((p) => p.domainId === d.id);
      const projectCount = projects.length;
      const taskCount = state.tasks.filter(t => {
        if (t.projectId) {
          return projects.some(p => p.id === t.projectId);
        }
        return t.domainId === d.id;
      }).length;
      
      let __active = false;
      try {
        const ds = state.activeDomains;
        if (ds && (Array.isArray(ds) ? ds.length : ds.size)) {
          const ids = new Set(Array.isArray(ds) ? ds : Array.from(ds));
          __active = ids.has(d.id);
        } else {
          __active = state.activeDomain === d.id;
        }
      } catch (_) {}
      const act = __active
        ? 'style="background:#111a23;border:1px solid #1e2a44"'
        : "";
      const color = d.color || "#2dd4bf";
      
      // Calculate mood for this domain
      let mood, moodColor, moodEmoji;
      try {
        mood = getDomainMood(d.id);
        moodColor = getMoodColor(mood);
        moodEmoji = {
          crisis: 'üö®',
          pressure: '‚ö†Ô∏è', 
          growth: 'üìà',
          balance: '‚öñÔ∏è'
        }[mood] || '‚öñÔ∏è';
      } catch (e) {
        mood = 'balance';
        moodColor = '#3b82f6';
        moodEmoji = '‚öñÔ∏è';
      }
      
      return `<div class="row" data-domain="${d.id}" ${act}>
      <div class="dot" style="background:${moodColor};box-shadow: 0 0 8px ${moodColor}40"></div>
      <div style="flex:1;min-width:0">
        <div class="title" style="font-weight:500;margin-bottom:2px">
          ${moodEmoji} ${d.title}
        </div>
        <div style="display:flex;gap:8px;font-size:10px;color:var(--muted)">
          <span>${projectCount} –ø—Ä–æ–µ–∫—Ç–æ–≤</span>
          <span>${taskCount} –∑–∞–¥–∞—á</span>
          <span style="color:${moodColor}">${mood}</span>
        </div>
      </div>
      <div class="hint actions" data-dom="${d.id}" style="cursor:pointer;padding:4px">‚ãØ</div>
    </div>`;
    })
    .join("");
    
  // Find the domains container
  const domainsContainer = dWrap.querySelector('.domains-container');
  if (domainsContainer) {
    domainsContainer.innerHTML = html;
    
    // Add click handler to container for clearing domain selection
    domainsContainer.addEventListener('click', (e) => {
      // Only clear if clicking on empty space (not on domain rows)
      if (e.target === domainsContainer) {
        state.activeDomain = null;
        updateDomainsList();
        updateStatistics();
        if (window.layoutMap) window.layoutMap();
        if (window.drawMap) window.drawMap();
        if (window.updateDomainButton) window.updateDomainButton();
      }
    });
    
    // Re-attach event handlers for domain rows
    attachDomainHandlers();
  }
}

function renderSidebar() {
  const dWrap = document.getElementById("domainsList");
  let html = "";
  
  // Search bar
  html += `<div class="search-section" style="padding:8px 12px;border-bottom:1px solid var(--panel-2)">
    <input id="sidebarSearch" placeholder="üîç –ü–æ–∏—Å–∫ –¥–æ–º–µ–Ω–æ–≤, –ø—Ä–æ–µ–∫—Ç–æ–≤, –∑–∞–¥–∞—á..." 
           value="${state.searchQuery || ''}"
           style="width:100%;padding:6px 8px;background:var(--panel-2);border:1px solid var(--panel-2);border-radius:6px;color:var(--text);font-size:12px;outline:none"/>
  </div>`;
  
  // Statistics section - calculate filtered stats
  const stats = calculateStats();
  
  html += `<div class="stats-section" style="padding:8px 12px;border-bottom:1px solid var(--panel-2)">
    <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:4px">
      <span style="font-size:11px;color:var(--muted);font-weight:600">–°–¢–ê–¢–ò–°–¢–ò–ö–ê</span>
      <div style="display:flex;align-items:center;gap:8px">
        ${state.activeDomain ? `<button id="clearDomainFilter" style="background:none;border:1px solid var(--muted);color:var(--muted);padding:2px 6px;border-radius:4px;font-size:9px;cursor:pointer">–í—Å–µ –¥–æ–º–µ–Ω—ã</button>` : ''}
        <span style="font-size:10px;color:var(--muted)">${stats.totalTasks} –∑–∞–¥–∞—á</span>
        <span style="font-size:9px;color:var(--muted);background:rgba(157,177,201,0.1);padding:2px 4px;border-radius:3px">map ${state.settings.mapVersion || 'v2'}</span>
      </div>
    </div>
    <div style="display:flex;gap:8px;flex-wrap:wrap">
      <div class="stat-pill" style="background:rgba(157,177,201,0.1);color:var(--muted);padding:2px 6px;border-radius:4px;font-size:10px">–ø–ª–∞–Ω: ${stats.backlog}</div>
      <div class="stat-pill" style="background:rgba(242,201,76,0.15);color:var(--warn);padding:2px 6px;border-radius:4px;font-size:10px">—Å–µ–≥–æ–¥–Ω—è: ${stats.today}</div>
      <div class="stat-pill" style="background:rgba(86,204,242,0.15);color:var(--accent);padding:2px 6px;border-radius:4px;font-size:10px">–≤ —Ä–∞–±–æ—Ç–µ: ${stats.doing}</div>
      <div class="stat-pill" style="background:rgba(25,195,125,0.15);color:var(--ok);padding:2px 6px;border-radius:4px;font-size:10px">–≥–æ—Ç–æ–≤–æ: ${stats.done}</div>
    </div>
  </div>`;
  
  if (ui.newDomain) {
    html += `<div class="row" id="newDomRow" style="gap:6px;flex-wrap:wrap">
      <input id="newDomName" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞" style="flex:1;min-width:140px;background:#0e172a;border:1px solid #1a2947;border-radius:8px;color:#e8f0fb;padding:6px 8px"/>
      <div id="newDomColors" style="display:flex;gap:6px;align-items:center">${palette
        .map(
          (c) =>
            `<div class="dot" data-col="${c}" style="width:14px;height:14px;border:1px solid #1e2a44;background:${c};border-radius:999px;cursor:pointer${
              c === ui.newDomColor ? ";outline:2px solid #fff5" : ""
            }"></div>`
        )
        .join("")}</div>
      <button class="btn" id="newDomSave">–°–æ–∑–¥–∞—Ç—å</button>
      <button class="btn" id="newDomCancel">–û—Ç–º–µ–Ω–∞</button>
    </div>`;
  }
  // Add domains container
  html += `<div class="domains-container"></div>`;
  
  dWrap.innerHTML = html;

  // Ensure domain controls (Show all / Fit all)
  try {
    if (!document.getElementById('domControls')) {
      const row = document.createElement('div');
      row.className = 'row';
      row.id = 'domControls';
      row.style.gap = '6px';
      row.style.flexWrap = 'wrap';
      const btnAll = document.createElement('button');
      btnAll.className = 'btn';
      btnAll.id = 'btnShowAll';
      btnAll.textContent = '–í—Å–µ –¥–æ–º–µ–Ω—ã';
      const btnFit = document.createElement('button');
      btnFit.className = 'btn';
      btnFit.id = 'btnFitAll';
      btnFit.textContent = '–í–ø–∏—Å–∞—Ç—å';
      row.appendChild(btnAll);
      row.appendChild(btnFit);
      dWrap.insertBefore(row, dWrap.firstChild);
    }
  } catch(_) {}
  
  // Populate domains container
  updateDomainsList();
  
  // Attach event handlers
  attachDomainHandlers();

  // handlers
  const addBtn = document.getElementById("btnAddDomain");
  if (addBtn) {
    addBtn.onclick = () => {
      showDomainCreationModal();
    };
  }
  const showAllBtn = document.getElementById('btnShowAll');
  if (showAllBtn) {
    showAllBtn.onclick = () => {
      try { state.activeDomains = []; } catch(_) {}
      state.activeDomain = null;
      renderSidebar();
      layoutMap();
      drawMap();
      try { window.mapApi && window.mapApi.fitAll && window.mapApi.fitAll(); } catch(_) {}
    };
  }
  const fitAllBtn = document.getElementById('btnFitAll');
  if (fitAllBtn) {
    fitAllBtn.onclick = () => {
      try { window.mapApi && window.mapApi.fitAll && window.mapApi.fitAll(); } catch(_) {}
    };
  }
  const row = document.getElementById("newDomRow");
  if (row) {
    const nameInput = $("#newDomName");
    if (nameInput) {
      nameInput.value = ui.newDomDraft || "";
      nameInput.placeholder = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞";
      nameInput.focus();
    }
    // localize and add hint
    const btnSave = document.getElementById("newDomSave");
    if (btnSave) btnSave.textContent = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å";
    const btnCancel = document.getElementById("newDomCancel");
    if (btnCancel) btnCancel.textContent = "–û—Ç–º–µ–Ω–∞";
    let hint = document.getElementById("newDomHint");
    if (!hint) {
      hint = document.createElement("div");
      hint.id = "newDomHint";
      hint.className = "hint";
      hint.style.width = "100%";
      row.appendChild(hint);
    }
    hint.textContent = ui.newDomError || "";
    $("#newDomColors")
      .querySelectorAll(".dot")
      .forEach((el) => {
        el.onclick = () => {
          ui.newDomColor = el.dataset.col;
          renderSidebar();
        };
      });
    function createDomain() {
      const name = (nameInput.value || "").trim();
      if (!name) {
        alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞");
        return;
      }
      if (
        state.domains.some((d) => d.title.toLowerCase() === name.toLowerCase())
      ) {
        alert("–¢–∞–∫–æ–π –¥–æ–º–µ–Ω —É–∂–µ –µ—Å—Ç—å");
        return;
      }
      const id = "d" + Math.random().toString(36).slice(2, 8);
      state.domains.push({
        id,
        title: name,
        color: ui.newDomColor,
        createdAt: Date.now(),
        updatedAt: Date.now(),
      });
      state.activeDomain = id;
      ui.newDomain = false;
      ui.newDomDraft = "";
      saveState();
      renderSidebar();
      if (window.layoutMap) window.layoutMap();
      if (window.drawMap) window.drawMap();
      fitActiveDomain();
    }
    $("#newDomSave").onclick = () => createDomain();
    $("#newDomCancel").onclick = () => {
      ui.newDomain = false;
      ui.newDomDraft = "";
      renderSidebar();
    };
    nameInput.addEventListener("input", () => {
      ui.newDomDraft = nameInput.value;
      let err = "";
      const n = (nameInput.value || "").trim();
      if (!n) err = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞";
      else if (
        state.domains.some((d) => d.title.toLowerCase() === n.toLowerCase())
      )
        err = "–¢–∞–∫–æ–π –¥–æ–º–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
      ui.newDomError = err;
      if (hint) hint.textContent = err;
    });
    // override save with soft validation + toast
    if (btnSave) {
      btnSave.onclick = () => {
        const n = (nameInput.value || "").trim();
        let err = "";
        if (!n) err = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞";
        else if (
          state.domains.some((d) => d.title.toLowerCase() === n.toLowerCase())
        )
          err = "–¢–∞–∫–æ–π –¥–æ–º–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
        ui.newDomError = err;
        if (hint) hint.textContent = err;
        if (err) return;
        const id = "d" + Math.random().toString(36).slice(2, 8);
        state.domains.push({
          id,
          title: n,
          color: ui.newDomColor,
          createdAt: Date.now(),
          updatedAt: Date.now(),
        });
        state.activeDomain = id;
        ui.newDomain = false;
        ui.newDomDraft = "";
        saveState();
        renderSidebar();
        layoutMap();
        drawMap();
        fitActiveDomain();
        showToast(`–°–æ–∑–¥–∞–Ω –¥–æ–º–µ–Ω: ${n}`, "ok");
      };
    }
    nameInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        createDomain();
      }
      if (e.key === "Escape") {
        e.preventDefault();
        ui.newDomain = false;
        ui.newDomDraft = "";
        renderSidebar();
      }
    });
  }
  // Event handlers are now attached by attachDomainHandlers()

  // Status filters - use current stats
  const statusFilters = [
    { key: 'all', label: '–í—Å–µ', count: stats.totalTasks, color: 'var(--muted)' },
    { key: 'backlog', label: '–ü–ª–∞–Ω', count: stats.backlog, color: 'var(--muted)' },
    { key: 'today', label: '–°–µ–≥–æ–¥–Ω—è', count: stats.today, color: 'var(--warn)' },
    { key: 'doing', label: '–í —Ä–∞–±–æ—Ç–µ', count: stats.doing, color: 'var(--accent)' },
    { key: 'done', label: '–ì–æ—Ç–æ–≤–æ', count: stats.done, color: 'var(--ok)' }
  ];
  
  const statusWrap = document.getElementById("tagsList");
  statusWrap.innerHTML = statusFilters.map(status => 
    `<div class="tag ${state.filterStatus === status.key ? "active" : ""}" 
          data-status="${status.key}" 
          style="border-color:${status.color};color:${status.color}">
      ${status.label} (${status.count})
    </div>`
  ).join("");
  
  // Status filter handlers
  statusWrap.querySelectorAll(".tag[data-status]").forEach((el) => {
    el.onclick = () => {
      const val = el.dataset.status === 'all' ? null : el.dataset.status;
      state.filterStatus = val;
        renderSidebar();
      if (window.layoutMap) window.layoutMap();
      if (window.drawMap) window.drawMap();
    };
  });

  // Tags section
  // Tags section - –°–ö–†–´–¢–´ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
  // –¢–µ–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
  
  // Tag handlers - –°–ö–†–´–¢–´ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
  
  // Search functionality
  const searchInput = document.getElementById("searchInput");
  const searchButton = document.getElementById("searchButton");
  
  if (searchInput && searchButton) {
    // Store current value to prevent it from being cleared
    const currentValue = searchInput.value;
    
    // Search function
    const performSearch = () => {
      const query = searchInput.value.trim();
      if (query) {
        console.log('üîç Searching for:', query);
        if (window.mapApi && window.mapApi.searchObjects) {
          window.mapApi.searchObjects(query);
        }
      }
    };
    
    // Search button click
    searchButton.addEventListener("click", performSearch);
    
    searchInput.addEventListener("input", (e) => {
      const query = e.target.value.toLowerCase().trim();
      
      if (query.length === 0) {
        // Clear search - show all
        state.searchQuery = null;
        state.searchResults = null;
        // Don't re-render sidebar to preserve input value
        if (window.layoutMap) window.layoutMap();
        if (window.drawMap) window.drawMap();
        return;
      }
      
      // Filter domains, projects, and tasks
      const filteredDomains = state.domains.filter(d => 
        d.title.toLowerCase().includes(query)
      );
      const filteredProjects = state.projects.filter(p => 
        p.title.toLowerCase().includes(query)
      );
      const filteredTasks = state.tasks.filter(t => 
        t.title.toLowerCase().includes(query) ||
        (t.tags || []).some(tag => tag.toLowerCase().includes(query))
      );
      
      // Highlight search results
      highlightSearchResults(query, filteredDomains, filteredProjects, filteredTasks);
      
      // Update filter to show only matching items
      state.searchQuery = query;
      // Update only domains list and statistics, not entire sidebar
      updateDomainsList();
      updateStatistics();
      if (window.layoutMap) window.layoutMap();
      if (window.drawMap) window.drawMap();
    });
    
    // Handle search input
    searchInput.addEventListener("keydown", (e) => {
      if (e.key === "Escape") {
        e.target.value = "";
        state.searchQuery = null;
        state.searchResults = null;
        updateDomainsList();
        updateStatistics();
        if (window.layoutMap) window.layoutMap();
        if (window.drawMap) window.drawMap();
      } else if (e.key === "Enter") {
      e.preventDefault();
        performSearch();
      }
    });
  }
  
  // Clear domain filter button
  const clearDomainFilterBtn = document.getElementById("clearDomainFilter");
  if (clearDomainFilterBtn) {
    clearDomainFilterBtn.addEventListener("click", () => {
      state.activeDomain = null;
      updateDomainsList();
      updateStatistics();
      if (window.layoutMap) window.layoutMap();
      if (window.drawMap) window.drawMap();
    });
  }
}

let currentMenu = null;
function closeDomainMenu() {
  if (currentMenu && currentMenu.remove) {
    currentMenu.remove();
    currentMenu = null;
    document.removeEventListener("click", onDocClick, true);
  }
}
function onDocClick(e) {
  if (currentMenu && !currentMenu.contains(e.target)) closeDomainMenu();
}
// REMOVED: legacy function openDomainMenu_old (150+ lines of unused code)

// Enhanced menu with friendly flows + toasts
function openDomainMenuX(id, rowEl) {
  closeDomainMenu();
  const d = state.domains.find((x) => x.id === id);
  const menu = document.createElement("div");
  menu.className = "domenu";
  menu.innerHTML = `
    <div class="item" data-act="focus">–§–æ–∫—É—Å</div>
    <div class="item" data-act="rename">–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å</div>
    <div class="item" data-act="color">–¶–≤–µ—Ç</div>
    <div class="palette" style="display:none">${palette
      .map(
        (c) => `<div class="dot" data-col="${c}" style="background:${c}"></div>`
      )
      .join("")}</div>
    <div class="item" data-act="merge">–°–ª–∏—Ç—å —Å‚Ä¶</div>
    <div class="sep"></div>
    <div class="item" data-act="delete" style="color:#ffd1d1">–£–¥–∞–ª–∏—Ç—å</div>
  `;
  rowEl.insertAdjacentElement("afterend", menu);
  currentMenu = menu;
  document.addEventListener("click", onDocClick, true);

  menu.querySelector('[data-act="focus"]').onclick = () => {
    state.activeDomain = id;
    layoutMap();
    drawMap();
    fitActiveDomain();
    closeDomainMenu();
  };

  menu.querySelector('[data-act="rename"]').onclick = () => {
    const body = `<div style="display:flex;flex-direction:column;gap:8px">
      <input id=\"domName\" value=\"${d.title}\" placeholder=\"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞\"/>
      <div id=\"domHint\" class=\"hint\"></div>
    </div>`;
    openModal({
      title: "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞",
      bodyHTML: body,
      confirmText: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
      onConfirm: (bodyEl) => {
        const inp = bodyEl.querySelector("#domName");
        const name = (inp.value || "").trim();
        if (!name) {
          bodyEl.querySelector("#domHint").textContent =
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞";
          return;
        }
        if (
          state.domains.some(
            (x) => x.id !== id && x.title.toLowerCase() === name.toLowerCase()
          )
        ) {
          bodyEl.querySelector("#domHint").textContent =
            "–¢–∞–∫–æ–π –¥–æ–º–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
          return;
        }
        d.title = name;
        d.updatedAt = Date.now();
        saveState();
        renderSidebar();
        layoutMap();
        drawMap();
        closeDomainMenu();
      },
    });
  };

  menu.querySelector('[data-act="color"]').onclick = () => {
    const pal = menu.querySelector(".palette");
    pal.style.display = pal.style.display === "none" ? "flex" : "none";
    pal.querySelectorAll(".dot").forEach((dot) => {
      dot.onclick = () => {
        d.color = dot.dataset.col;
        d.updatedAt = Date.now();
        saveState();
        renderSidebar();
        layoutMap();
        drawMap();
        closeDomainMenu();
      };
    });
  };

  menu.querySelector('[data-act="merge"]').onclick = () => {
    const others = state.domains.filter((x) => x.id !== id);
    if (others.length === 0) {
      alert("–ù–µ–∫—É–¥–∞ —Å–ª–∏–≤–∞—Ç—å: –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–æ–º–µ–Ω");
      return;
    }
    const body = `<label>–°–ª–∏—Ç—å –≤:</label> <select id=\"selDom\">${others
      .map((o) => `<option value=\"${o.id}\">${o.title}</option>`)
      .join("")}</select>`;
    openModal({
      title: `–°–ª–∏—Ç—å –¥–æ–º–µ–Ω "${d.title}"`,
      bodyHTML: body,
      confirmText: "–°–ª–∏—Ç—å",
      onConfirm: (bodyEl) => {
        const targetId = bodyEl.querySelector("#selDom").value;
        const target = state.domains.find((x) => x.id === targetId);
        if (!target || target.id === id) return;
        const movedPrjIds = state.projects
          .filter((p) => p.domainId === id)
          .map((p) => p.id);
        const prCount = movedPrjIds.length;
        const taskCount = state.tasks.filter((t) =>
          movedPrjIds.includes(t.projectId)
        ).length;
        state.projects.forEach((p) => {
          if (p.domainId === id) p.domainId = target.id;
        });
        state.domains = state.domains.filter((x) => x.id !== id);
        state.activeDomain = target.id;
        saveState();
        renderSidebar();
        layoutMap();
        drawMap();
        fitActiveDomain();
        closeDomainMenu();
        showToast(`–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: ${prCount} –ø—Ä–æ–µ–∫—Ç–æ–≤, ${taskCount} –∑–∞–¥–∞—á`, "ok");
      },
    });
  };

  menu.querySelector('[data-act="delete"]').onclick = () => {
    if (state.domains.length <= 1) {
      alert("–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–º–µ–Ω");
      return;
    }
    const others = state.domains.filter((x) => x.id !== id);
    const body = `
      <div style=\"display:flex;flex-direction:column;gap:8px\">
        <label><input type=\"radio\" name=\"mode\" value=\"move\" checked/> –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã –≤:</label>
        <select id=\"selDom\">${others
          .map((o) => `<option value=\"${o.id}\">${o.title}</option>`)
          .join("")}</select>
        <label><input type=\"radio\" name=\"mode\" value=\"delete\"/> –£–¥–∞–ª–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏</label>
      </div>`;
    openModal({
      title: `–£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω "${d.title}"?`,
      bodyHTML: body,
      confirmText: "–£–¥–∞–ª–∏—Ç—å",
      onConfirm: (bodyEl) => {
        const mode = bodyEl.querySelector('input[name="mode"]:checked').value;
        if (mode === "move") {
          const targetId = bodyEl.querySelector("#selDom").value;
          const projIds = state.projects
            .filter((p) => p.domainId === id)
            .map((p) => p.id);
          const taskCount = state.tasks.filter((t) =>
            projIds.includes(t.projectId)
          ).length;
          state.projects.forEach((p) => {
            if (p.domainId === id) p.domainId = targetId;
          });
          showToast(
            `–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: ${projIds.length} –ø—Ä–æ–µ–∫—Ç–æ–≤, ${taskCount} –∑–∞–¥–∞—á`,
            "ok"
          );
        } else {
          const projIds = state.projects
            .filter((p) => p.domainId === id)
            .map((p) => p.id);
          const removedTasks = state.tasks.filter((t) =>
            projIds.includes(t.projectId)
          ).length;
          state.tasks = state.tasks.filter(
            (t) => !projIds.includes(t.projectId)
          );
          state.projects = state.projects.filter((p) => p.domainId !== id);
          showToast(
            `–£–¥–∞–ª–µ–Ω–æ: ${projIds.length} –ø—Ä–æ–µ–∫—Ç–æ–≤, ${removedTasks} –∑–∞–¥–∞—á`,
            "warn"
          );
        }
        state.domains = state.domains.filter((x) => x.id !== id);
        // Clear active domain to show entire project instead of focusing on remaining domain
        state.activeDomain = null;
        saveState();
        
        // Update UI after domain deletion
        updateDomainsList();
        updateStatistics();
        if (window.layoutMap) window.layoutMap();
        if (window.drawMap) window.drawMap();
        if (window.renderToday) window.renderToday();
        if (window.renderSidebar) window.renderSidebar();
        renderSidebar();
        layoutMap();
        drawMap();
        closeDomainMenu();
      },
    });
  };
}

// Export to window for external access
window.openDomainMenuX = openDomainMenuX;

// REMOVED: legacy function domainActions_old (110+ lines of unused code)


function setupHeader() {
  $$(".chip").forEach((ch) => {
    ch.onclick = () => {
      $$(".chip").forEach((c) => c.classList.remove("active"));
      ch.classList.add("active");
      state.view = ch.dataset.view;
      $("#canvas").style.display = state.view === "map" ? "block" : "none";
      $("#viewToday").style.display = state.view === "today" ? "flex" : "none";
      if (state.view === "map") {
        drawMap();
      } else if (state.view === "today") {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º renderToday –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ today
        setTimeout(() => {
        renderToday();
        }, 10);
      }
    };
  });
  // Display settings moved to settings menu

  // fit/center buttons
  const btnCenter = $("#btnCenter");
  const btnFitDomain = $("#btnFitDomain");
  const btnFitProject = $("#btnFitProject");
  const btnReset = $("#btnReset");
  const btnFullscreen = $("#btnFullscreen");
  if (btnCenter) btnCenter.onclick = () => centerView();
  if (btnFitDomain) btnFitDomain.onclick = () => fitActiveDomain();
  if (btnFitProject) btnFitProject.onclick = () => fitActiveProject();
  if (btnReset) btnReset.onclick = () => resetView();
  if (btnFullscreen) btnFullscreen.onclick = async () => {
    try {
      if (!document.fullscreenElement) {
        await document.documentElement.requestFullscreen();
      } else if (document.exitFullscreen) {
        await document.exitFullscreen();
      }
    } catch (_) {}
  };

  // Handle fullscreen change events to fix display glitches
  document.addEventListener('fullscreenchange', () => {
    setTimeout(() => {
      try {
        if (typeof window.onResize === 'function') window.onResize();
        if (typeof layoutMap === 'function') layoutMap();
        if (typeof drawMap === 'function') drawMap();
      } catch (_) {}
    }, 100);
  });
  
  // Debounced resize handler to prevent infinite loops
  let resizeToken = 0;
  window.onResize = () => {
    const token = ++resizeToken;
    setTimeout(() => {
      if (token !== resizeToken) return;   // —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤
      const canvas = document.getElementById('canvas');
      if (!canvas) return;
      
      const w = canvas.clientWidth|0, h = canvas.clientHeight|0, dpr = Math.max(1, window.devicePixelRatio||1);
      // –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞–∑–º–µ—Ä –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ —Ü–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å
      if (canvas.width !== (w*dpr)|0 || canvas.height !== (h*dpr)|0) {
        canvas.width  = (w*dpr)|0;
        canvas.height = (h*dpr)|0;
      }
      if (typeof requestDraw === 'function') requestDraw(); // –æ–¥–∏–Ω –∫–∞–¥—Ä
    }, 120);
  };

  // Export/import moved to settings menu
  // edge cap slider
  // zoom slider (top control)
  const zoomSlider = $("#zoomSlider");
  if (zoomSlider) {
    // try to initialize from map if available
    try {
      const current =
        (window.mapApi && window.mapApi.getScale && window.mapApi.getScale()) ||
        100;
      zoomSlider.value = String(Math.round(current));
    } catch (_) {}
    zoomSlider.oninput = (e) => {
      const v = parseInt(e.target.value, 10) || 100;
      // mapApi expects percent-like value 100 -> scale 1
      if (window.mapApi && window.mapApi.setZoom) window.mapApi.setZoom(v);
    };
  }
  // about/version modal
  const btnAbout = document.getElementById("btnAbout");
  if (btnAbout) {
    btnAbout.onclick = () => {
      openModal({
        title: "–û –≤–µ—Ä—Å–∏–∏",
        bodyHTML:
          '<div style="display:flex;flex-direction:column;gap:8px">' +
          `<div><strong>–í–µ—Ä—Å–∏—è:</strong> ${APP_VERSION}</div>` +
          `<div><a href="CHANGELOG.md" target="_blank" rel="noopener">üìù –û—Ç–∫—Ä—ã—Ç—å CHANGELOG</a></div>` +
          `<div><a href="ideas/IDEAS.md" target="_blank" rel="noopener">üöÄ –û—Ç–∫—Ä—ã—Ç—å IDEAS</a></div>` +
          `<div><a href="REQUESTS.md" target="_blank" rel="noopener">üìã –û—Ç–∫—Ä—ã—Ç—å REQUESTS</a></div>` +
          '<div style="margin-top:12px;padding:8px;background:var(--panel-2);border-radius:4px;">' +
          '<strong>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</strong><br/>' +
          '–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚öôÔ∏è –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏' +
          '</div>' +
          "</div>",
        confirmText: "–û–∫",
      });
    };
  }
  
  // hotkeys settings modal
  const btnHotkeys = document.getElementById("btnHotkeys");
  if (btnHotkeys) {
    btnHotkeys.onclick = () => {
      openHotkeysModal();
    };
  }
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  document.documentElement.setAttribute('data-theme', 'dark');
  
  // Setup settings dropdown
  const btnSettings = document.getElementById("btnSettings");
  const settingsMenu = document.getElementById("settingsMenu");
  
  console.log('Settings button:', btnSettings);
  console.log('Settings menu:', settingsMenu);
  
  if (btnSettings && settingsMenu) {
    console.log('Setting up settings dropdown...');
    
    // Toggle settings menu
    btnSettings.onclick = (e) => {
      console.log('Settings button clicked');
      e.stopPropagation();
      settingsMenu.classList.toggle('show');
      console.log('Menu classes:', settingsMenu.className);
    };
    
    // Handle settings menu items
    const settingsItems = document.querySelectorAll('.settings-item');
    console.log('Settings items found:', settingsItems.length);
    
    settingsItems.forEach(item => {
      item.onclick = (e) => {
        e.stopPropagation();
        const action = item.dataset.action;
        console.log('Settings item clicked:', action);
        settingsMenu.classList.remove('show');
        
        switch (action) {
          case 'hotkeys':
            openHotkeysModal();
            break;
          case 'display':
            openDisplayModal();
            break;
          case 'hierarchy':
            openHierarchySettingsModal();
            break;
          case 'export':
            openExportModal();
            break;
        }
      };
    });
    
    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!btnSettings.contains(e.target) && !settingsMenu.contains(e.target)) {
        settingsMenu.classList.remove('show');
      }
    });
  } else {
    console.error('Settings elements not found!');
  }
}

function setupQuickAdd() {
  const qa = document.getElementById("quickAdd");
  const chips = document.getElementById("qaChips");
  
  if (!qa || !chips) {
    console.log("QuickAdd elements not found");
    return;
  }
  
  // Autocomplete suggestions
  let autocompleteVisible = false;
  let currentSuggestions = [];
  
  function showAutocomplete(suggestions) {
    if (suggestions.length === 0) {
      hideAutocomplete();
      return;
    }
    
    const autocompleteHTML = suggestions.map(s => 
      `<div class="autocomplete-item" data-value="${s.value}">
        <span class="autocomplete-icon">${s.icon}</span>
        <span class="autocomplete-text">${s.text}</span>
        <span class="autocomplete-hint">${s.hint}</span>
      </div>`
    ).join('');
    
    chips.innerHTML = `<div class="autocomplete-dropdown">${autocompleteHTML}</div>`;
    autocompleteVisible = true;
    currentSuggestions = suggestions;
    
    // Add click handlers
    chips.querySelectorAll('.autocomplete-item').forEach(item => {
      item.addEventListener('click', () => {
        const value = item.dataset.value;
        insertAutocomplete(value);
      });
    });
  }
  
  function hideAutocomplete() {
    autocompleteVisible = false;
    currentSuggestions = [];
    // Show parsed chips instead
    const parsed = parseQuick(qa.value);
    chips.innerHTML = "";
    if (parsed.tag)
      chips.innerHTML += `<div class="chip-mini">#${parsed.tag}</div>`;
    if (parsed.project)
      chips.innerHTML += `<div class="chip-mini">@${parsed.project}</div>`;
    if (parsed.when)
      chips.innerHTML += `<div class="chip-mini">!${parsed.when.label}</div>`;
    if (parsed.estimate)
      chips.innerHTML += `<div class="chip-mini">~${parsed.estimate}–º</div>`;
    if (parsed.priority)
      chips.innerHTML += `<div class="chip-mini">p${parsed.priority}</div>`;
  }
  
  function insertAutocomplete(value) {
    const cursorPos = qa.selectionStart;
    const text = qa.value;
    const beforeCursor = text.substring(0, cursorPos);
    const afterCursor = text.substring(cursorPos);
    
    // Find the last incomplete token
    const lastSpace = beforeCursor.lastIndexOf(' ');
    const currentToken = beforeCursor.substring(lastSpace + 1);
    
    // Replace the current token with the selected value
    const newText = beforeCursor.substring(0, lastSpace + 1) + value + ' ' + afterCursor;
    qa.value = newText;
    
    // Set cursor position after the inserted value
    const newCursorPos = lastSpace + 1 + value.length + 1;
    qa.setSelectionRange(newCursorPos, newCursorPos);
    
    hideAutocomplete();
    qa.focus();
  }
  
  function getAutocompleteSuggestions(text, cursorPos) {
    const beforeCursor = text.substring(0, cursorPos);
    const lastSpace = beforeCursor.lastIndexOf(' ');
    const currentToken = beforeCursor.substring(lastSpace + 1).toLowerCase();
    
    if (currentToken.startsWith('#')) {
      // Tag suggestions
      const allTags = [...new Set(state.tasks.flatMap(t => t.tags || []))];
      const commonTags = ['–¥–æ–º', '—Ä–∞–±–æ—Ç–∞', '–ø–æ–∫—É–ø–∫–∏', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Å–ø–æ—Ä—Ç', '—É—á–µ–±–∞', '—Ö–æ–±–±–∏'];
      const allSuggestions = [...new Set([...allTags, ...commonTags])];
      const matchingTags = allSuggestions.filter(tag => 
        tag.toLowerCase().includes(currentToken.substring(1))
      ).slice(0, 5);
      
      return matchingTags.map(tag => ({
        value: `#${tag}`,
        icon: 'üè∑Ô∏è',
        text: tag,
        hint: '—Ç–µ–≥'
      }));
    }
    
    if (currentToken.startsWith('@')) {
      // Project suggestions
      const matchingProjects = state.projects.filter(p => 
        p.title.toLowerCase().includes(currentToken.substring(1))
      ).slice(0, 5);
      
      return matchingProjects.map(p => ({
        value: `@${p.title}`,
        icon: 'ü™ê',
        text: p.title,
        hint: '–ø—Ä–æ–µ–∫—Ç'
      }));
    }
    
    if (currentToken.startsWith('!')) {
      // Time suggestions
      const timeSuggestions = [
        { value: '!—Å–µ–≥–æ–¥–Ω—è', text: '—Å–µ–≥–æ–¥–Ω—è', hint: '—Å–µ–≥–æ–¥–Ω—è', icon: 'üìÖ' },
        { value: '!–∑–∞–≤—Ç—Ä–∞', text: '–∑–∞–≤—Ç—Ä–∞', hint: '–∑–∞–≤—Ç—Ä–∞', icon: 'üìÖ' },
        { value: '!–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', text: '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', hint: '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', icon: 'üìÖ' },
        { value: '!–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', text: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', hint: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', icon: 'üìÖ' },
        { value: '!–≤—Ç–æ—Ä–Ω–∏–∫', text: '–≤—Ç–æ—Ä–Ω–∏–∫', hint: '–≤—Ç–æ—Ä–Ω–∏–∫', icon: 'üìÖ' },
        { value: '!—Å—Ä–µ–¥–∞', text: '—Å—Ä–µ–¥–∞', hint: '—Å—Ä–µ–¥–∞', icon: 'üìÖ' },
        { value: '!—á–µ—Ç–≤–µ—Ä–≥', text: '—á–µ—Ç–≤–µ—Ä–≥', hint: '—á–µ—Ç–≤–µ—Ä–≥', icon: 'üìÖ' },
        { value: '!–ø—è—Ç–Ω–∏—Ü–∞', text: '–ø—è—Ç–Ω–∏—Ü–∞', hint: '–ø—è—Ç–Ω–∏—Ü–∞', icon: 'üìÖ' },
        { value: '!10:00', text: '10:00', hint: '–≤—Ä–µ–º—è', icon: 'üïô' },
        { value: '!14:30', text: '14:30', hint: '–≤—Ä–µ–º—è', icon: 'üïô' }
      ];
      
      return timeSuggestions.filter(s => 
        s.text.includes(currentToken.substring(1))
      );
    }
    
    if (currentToken.startsWith('p') && /^p[1-4]?$/.test(currentToken)) {
      // Priority suggestions
      return [
        { value: 'p1', text: 'p1', hint: '–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', icon: 'üî¥' },
        { value: 'p2', text: 'p2', hint: '—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', icon: 'üü°' },
        { value: 'p3', text: 'p3', hint: '–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', icon: 'üü¢' },
        { value: 'p4', text: 'p4', hint: '–æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π', icon: '‚ö™' }
      ].filter(s => s.text.startsWith(currentToken));
    }
    
    if (currentToken.startsWith('~')) {
      // Estimate suggestions
      return [
        { value: '~15–º', text: '15–º', hint: '15 –º–∏–Ω—É—Ç', icon: '‚è±Ô∏è' },
        { value: '~30–º', text: '30–º', hint: '30 –º–∏–Ω—É—Ç', icon: '‚è±Ô∏è' },
        { value: '~1—á', text: '1—á', hint: '1 —á–∞—Å', icon: '‚è±Ô∏è' },
        { value: '~2—á', text: '2—á', hint: '2 —á–∞—Å–∞', icon: '‚è±Ô∏è' }
      ].filter(s => s.text.includes(currentToken.substring(1)));
    }
    
    return [];
  }
  
  qa.addEventListener("input", (e) => {
    const text = qa.value;
    const cursorPos = qa.selectionStart;
    const suggestions = getAutocompleteSuggestions(text, cursorPos);
    
    if (suggestions.length > 0) {
      showAutocomplete(suggestions);
    } else {
      hideAutocomplete();
    }
  });
  qa.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      submitQuick(qa.value.trim());
      qa.value = "";
      chips.innerHTML = "";
    }
  });
  
  // Simple button handlers
  const addBtn = document.getElementById('addBtn');
  const addToDomainBtn = document.getElementById('addToDomainBtn');
  const clearBtn = document.getElementById('clearBtn');
  
  if (addBtn) {
    addBtn.addEventListener('click', () => {
      const text = qa.value.trim();
      if (text) {
        submitQuick(text);
        qa.value = "";
        chips.innerHTML = "";
      }
    });
  }
  
  if (addToDomainBtn) {
    addToDomainBtn.addEventListener('click', () => {
      const text = qa.value.trim();
      if (text) {
        submitQuickToDomain(text);
        qa.value = "";
        chips.innerHTML = "";
      }
    });
  }
  
  if (clearBtn) {
    clearBtn.addEventListener('click', () => {
      qa.value = "";
      chips.innerHTML = "";
      qa.focus();
    });
  }
  
  
  // Update domain button state
  function updateDomainButton() {
    if (addToDomainBtn) {
      const hasActiveDomain = state.activeDomain && state.domains.find(d => d.id === state.activeDomain);
      addToDomainBtn.disabled = !hasActiveDomain;
      if (hasActiveDomain) {
        const domainName = state.domains.find(d => d.id === state.activeDomain)?.title || "–¥–æ–º–µ–Ω";
        addToDomainBtn.title = `–î–æ–±–∞–≤–∏—Ç—å –≤ –¥–æ–º–µ–Ω "${domainName}"`;
      } else {
        addToDomainBtn.title = "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω";
      }
    }
  }
  
  // Update button state when active domain changes
  updateDomainButton();
  window.updateDomainButton = updateDomainButton;
  // zoom slider hookup (view_map exposes setZoom)
  const zs = $("#zoomSlider");
  try{
    if(zs){
      zs.addEventListener('input', ()=>{
        if(window.mapApi && typeof window.mapApi.setZoom==='function'){
          window.mapApi.setZoom(parseInt(zs.value,10));
        }
      });
    }
  }catch(_){}
}

// Show idea editor modal
function showIdeaEditor(idea) {
  const modal = document.getElementById('modal');
  if (!modal) return;
  
  modal.innerHTML = `
    <div class="modal-content">
      <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ—é</h2>
      <div class="form-group">
        <label for="ideaTitle">–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
        <input type="text" id="ideaTitle" value="${idea.title}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏">
      </div>
      <div class="form-group">
        <label for="ideaContent">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
        <textarea id="ideaContent" rows="4" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏...">${idea.content || ''}</textarea>
      </div>
      <div class="form-group">
        <label for="ideaColor">–¶–≤–µ—Ç:</label>
        <input type="color" id="ideaColor" value="${idea.color || '#8b5cf6'}">
      </div>
      <div class="modal-actions">
        <button class="btn primary" id="saveIdea">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button class="btn" id="cancelIdea">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn danger" id="deleteIdea">–£–¥–∞–ª–∏—Ç—å</button>
      </div>
    </div>
  `;
  
  modal.style.display = 'flex';
  
  // Event handlers
  document.getElementById('saveIdea').onclick = () => {
    idea.title = document.getElementById('ideaTitle').value;
    idea.content = document.getElementById('ideaContent').value;
    idea.color = document.getElementById('ideaColor').value;
    idea.updatedAt = Date.now();
    saveState();
    if (window.layoutMap) window.layoutMap();
    if (window.drawMap) window.drawMap();
    closeModal();
    showToast('–ò–¥–µ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'ok');
  };
  
  document.getElementById('cancelIdea').onclick = () => {
    closeModal();
  };
  
  document.getElementById('deleteIdea').onclick = () => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∏–¥–µ—é?')) {
      state.ideas = state.ideas.filter(i => i.id !== idea.id);
      saveState();
      if (window.layoutMap) window.layoutMap();
      if (window.drawMap) window.drawMap();
      closeModal();
      showToast('–ò–¥–µ—è —É–¥–∞–ª–µ–Ω–∞', 'ok');
    }
  };
}

// Show domain creation modal
function showDomainCreationModal() {
  const modal = document.getElementById('modal');
  if (!modal) return;
  
  const moodOptions = [
    { value: 'balance', label: '–ë–∞–ª–∞–Ω—Å', emoji: '‚öñÔ∏è' },
    { value: 'energy', label: '–≠–Ω–µ—Ä–≥–∏—è', emoji: '‚ö°' },
    { value: 'focus', label: '–§–æ–∫—É—Å', emoji: 'üéØ' },
    { value: 'creativity', label: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', emoji: 'üé®' },
    { value: 'growth', label: '–†–æ—Å—Ç', emoji: 'üå±' },
    { value: 'rest', label: '–û—Ç–¥—ã—Ö', emoji: 'üò¥' }
  ];
  
  const moodSelect = moodOptions.map(mood => 
    `<option value="${mood.value}">${mood.emoji} ${mood.label}</option>`
  ).join('');
  
  modal.innerHTML = `
    <div class="modal-content">
      <h2>üåç –°–æ–∑–¥–∞—Ç—å –¥–æ–º–µ–Ω</h2>
      <div class="form-group">
        <label for="domainTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞:</label>
        <input type="text" id="domainTitle" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞" autofocus>
      </div>
      <div class="form-group">
        <label for="domainDescription">–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
        <textarea id="domainDescription" rows="3" placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞..."></textarea>
      </div>
      <div class="form-group">
        <label for="domainMood">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞:</label>
        <select id="domainMood">
          ${moodSelect}
        </select>
      </div>
      <div class="form-group">
        <label for="domainColor">–¶–≤–µ—Ç –¥–æ–º–µ–Ω–∞:</label>
        <div class="color-picker">
          <input type="color" id="domainColor" value="#2dd4bf">
          <div class="color-presets">
            <div class="color-preset" data-color="#2dd4bf" style="background: #2dd4bf"></div>
            <div class="color-preset" data-color="#3b82f6" style="background: #3b82f6"></div>
            <div class="color-preset" data-color="#8b5cf6" style="background: #8b5cf6"></div>
            <div class="color-preset" data-color="#f59e0b" style="background: #f59e0b"></div>
            <div class="color-preset" data-color="#ef4444" style="background: #ef4444"></div>
            <div class="color-preset" data-color="#10b981" style="background: #10b981"></div>
            <div class="color-preset" data-color="#f97316" style="background: #f97316"></div>
            <div class="color-preset" data-color="#06b6d4" style="background: #06b6d4"></div>
          </div>
        </div>
      </div>
      <div class="modal-actions">
        <button class="btn" id="cancelDomainBtn">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn primary" id="createDomainBtn">üåç –°–æ–∑–¥–∞—Ç—å –¥–æ–º–µ–Ω</button>
      </div>
    </div>
  `;
  
  modal.style.display = 'flex';
  
  // Event handlers
  document.getElementById('createDomainBtn').onclick = () => {
    const title = document.getElementById('domainTitle').value.trim();
    const description = document.getElementById('domainDescription').value.trim();
    const mood = document.getElementById('domainMood').value;
    const color = document.getElementById('domainColor').value;
    
    if (!title) {
      showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞', 'error');
      return;
    }
    
    // Create domain
    const domain = {
      id: generateId(),
      title: title,
      description: description,
      mood: mood,
      color: color,
      createdAt: Date.now(),
      updatedAt: Date.now()
    };
    
    state.domains.push(domain);
    state.activeDomain = domain.id;
    saveState();
    
    if (window.layoutMap) window.layoutMap();
    if (window.drawMap) window.drawMap();
    if (window.renderSidebar) window.renderSidebar();
    
    closeModal();
    showToast(`–î–æ–º–µ–Ω "${title}" —Å–æ–∑–¥–∞–Ω`, 'ok');
  };
  
  document.getElementById('cancelDomainBtn').onclick = () => {
    closeModal();
  };
  
  // Color preset handlers
  document.querySelectorAll('.color-preset').forEach(preset => {
    preset.onclick = () => {
      const color = preset.dataset.color;
      document.getElementById('domainColor').value = color;
      // Update visual feedback
      document.querySelectorAll('.color-preset').forEach(p => p.classList.remove('selected'));
      preset.classList.add('selected');
    };
  });
  
  // Set initial selected color
  document.querySelector('.color-preset[data-color="#2dd4bf"]').classList.add('selected');
  
  // Enter key to create
  document.getElementById('domainTitle').addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      document.getElementById('createDomainBtn').click();
    }
  });
}

// Show note editor modal
function showNoteEditor(note) {
  const modal = document.getElementById('modal');
  if (!modal) return;
  
  modal.innerHTML = `
    <div class="modal-content">
      <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É</h2>
      <div class="form-group">
        <label for="noteTitle">–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
        <input type="text" id="noteTitle" value="${note.title}" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏">
      </div>
      <div class="form-group">
        <label for="noteContent">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
        <textarea id="noteContent" rows="4" placeholder="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏...">${note.content || ''}</textarea>
      </div>
      <div class="form-group">
        <label for="noteColor">–¶–≤–µ—Ç:</label>
        <input type="color" id="noteColor" value="${note.color || '#10b981'}">
      </div>
      <div class="modal-actions">
        <button class="btn primary" id="saveNote">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button class="btn" id="cancelNote">–û—Ç–º–µ–Ω–∞</button>
        <button class="btn danger" id="deleteNote">–£–¥–∞–ª–∏—Ç—å</button>
      </div>
    </div>
  `;
  
  modal.style.display = 'flex';
  
  // Event handlers
  document.getElementById('saveNote').onclick = () => {
    note.title = document.getElementById('noteTitle').value;
    note.content = document.getElementById('noteContent').value;
    note.color = document.getElementById('noteColor').value;
    note.updatedAt = Date.now();
    saveState();
    if (window.layoutMap) window.layoutMap();
    if (window.drawMap) window.drawMap();
    closeModal();
    showToast('–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'ok');
  };
  
  document.getElementById('cancelNote').onclick = () => {
    closeModal();
  };
  
  document.getElementById('deleteNote').onclick = () => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?')) {
      state.notes = state.notes.filter(n => n.id !== note.id);
      saveState();
      if (window.layoutMap) window.layoutMap();
      if (window.drawMap) window.drawMap();
      closeModal();
      showToast('–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'ok');
    }
  };
}




const escapeChecklistHtml = (value = '') => String(value ?? '').replace(/[&<>"']/g, (ch) => ({
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;',
}[ch] || ch));

// –£–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ø–∞–ø–æ–≤ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä


// –£–±—Ä–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è toggleChecklistItemInPopup - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

function showChecklistEditor(checklist) {
  const modal = document.getElementById('modal');
  if (!modal || !checklist) return;

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫—Ä–µ—Å—Ç–∏–∫–æ–≤
  try { if (typeof window.hideChecklistToggleView === 'function') window.hideChecklistToggleView(); } catch(_) {}
  try { if (typeof window.closeChecklistWindow === 'function') window.closeChecklistWindow(); } catch(_) {}

  // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä —á–µ–∫-–ª–∏—Å—Ç–∞ (–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞)
  try { window.isChecklistEditorOpen = true; } catch(_) {}

  const originalItems = new Map((checklist.items || []).map((item) => [item.id, item]));

  const renderRow = (item) => {
    const wrapper = document.createElement('div');
    wrapper.className = 'checklist-editor-item';
    wrapper.dataset.itemId = item.id || `item-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    wrapper.innerHTML = `
      <div class="checklist-item-content">
        <label class="checklist-editor-check">
          <input type="checkbox" class="checklist-editor-item-check" ${item.completed ? 'checked' : ''}>
          <span class="checkmark"></span>
        </label>
        <input type="text" class="checklist-editor-item-text" value="${escapeChecklistHtml(item.text || '')}" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞">
        <div class="item-actions">
          <button type="button" class="btn-icon item-move-up" title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö">‚Üë</button>
          <button type="button" class="btn-icon item-move-down" title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑">‚Üì</button>
          <button type="button" class="btn-icon checklist-editor-remove" title="–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç">√ó</button>
        </div>
      </div>
    `;
    // drag & drop –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    wrapper.setAttribute('draggable', 'true');
    return wrapper;
  };

  const safeColor = /^#[0-9a-fA-F]{6}$/.test(checklist.color || '') ? checklist.color : '#3b82f6';

  modal.innerHTML = `
    <div class="modal-content checklist-editor">
      <div class="modal-header">
        <h2>–†–µ–¥–∞–∫—Ç–æ—Ä —á–µ–∫-–ª–∏—Å—Ç–∞</h2>
        <div id="editorProgress" style="position:absolute; right:56px; top:24px; font-size:12px; color:#9ca3af;"></div>
        <button class="btn-icon" id="closeChecklistEditor" title="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
      </div>
      
      <div class="checklist-editor-body">
        <div class="form-group">
          <label for="checklistTitle">–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞</label>
          <div class="input-group">
            <input type="text" id="checklistTitle" value="${escapeChecklistHtml(checklist.title || '')}" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞" class="form-input">
            <button type="button" class="btn-icon input-clear" id="clearTitle" title="–û—á–∏—Å—Ç–∏—Ç—å">√ó</button>
          </div>
        </div>
        
        <div class="form-group">
          <label for="checklistColor">–¶–≤–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–∞</label>
          <div class="color-picker-group">
            <input type="color" id="checklistColor" value="${safeColor}" class="color-input">
            <div class="color-presets">
              <div class="color-preset" data-color="#3b82f6" style="background: #3b82f6" title="–°–∏–Ω–∏–π"></div>
              <div class="color-preset" data-color="#10b981" style="background: #10b981" title="–ó–µ–ª–µ–Ω—ã–π"></div>
              <div class="color-preset" data-color="#f59e0b" style="background: #f59e0b" title="–û—Ä–∞–Ω–∂–µ–≤—ã–π"></div>
              <div class="color-preset" data-color="#ef4444" style="background: #ef4444" title="–ö—Ä–∞—Å–Ω—ã–π"></div>
              <div class="color-preset" data-color="#8b5cf6" style="background: #8b5cf6" title="–§–∏–æ–ª–µ—Ç–æ–≤—ã–π"></div>
              <div class="color-preset" data-color="#06b6d4" style="background: #06b6d4" title="–ì–æ–ª—É–±–æ–π"></div>
            </div>
          </div>
        </div>
        
        <div class="form-group">
          <label>–≠–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞</label>
          <div class="checklist-items-container">
            <div class="checklist-items-editor" id="checklistItemsEditor"></div>
            <div class="add-item-section">
              <input type="text" id="newItemInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter" class="form-input">
              <button class="btn secondary" type="button" id="addChecklistItem">+ –î–æ–±–∞–≤–∏—Ç—å</button>
            </div>
          </div>
        </div>
      </div>
      
      <div class="modal-actions">
        <button class="btn primary" id="saveChecklist">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button class="btn" id="cancelChecklist">‚ùå –û—Ç–º–µ–Ω–∞</button>
        <button class="btn danger" id="deleteChecklist">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
      </div>
    </div>
  `;

  modal.style.display = 'flex';

  const itemsEditor = document.getElementById('checklistItemsEditor');
  const addBtn = document.getElementById('addChecklistItem');
  const newItemInput = document.getElementById('newItemInput');
  const saveBtn = document.getElementById('saveChecklist');
  const cancelBtn = document.getElementById('cancelChecklist');
  const deleteBtn = document.getElementById('deleteChecklist');
  const closeBtn = document.getElementById('closeChecklistEditor');
  const titleInput = document.getElementById('checklistTitle');
  const colorInput = document.getElementById('checklistColor');
  const clearTitleBtn = document.getElementById('clearTitle');
  const editorProgress = document.getElementById('editorProgress');

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π Esc –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö)
  const onEditorKeyDownGlobal = (e) => {
    if (e.key === 'Escape') {
      e.preventDefault();
      try { if (typeof window.hideChecklistToggleView === 'function') window.hideChecklistToggleView(); } catch(_) {}
      try { window.isChecklistEditorOpen = false; } catch(_) {}
      document.removeEventListener('keydown', onEditorKeyDownGlobal, true);
      closeModal();
    }
  };
  document.addEventListener('keydown', onEditorKeyDownGlobal, true);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  (checklist.items || []).forEach((item) => {
    itemsEditor.appendChild(renderRow(item));
  });
  if (!itemsEditor.children.length) {
    itemsEditor.appendChild(renderRow({ text: '', completed: false }));
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —à–∞–ø–∫–µ
  const updateProgress = () => {
    try {
      const rows = Array.from(itemsEditor.querySelectorAll('.checklist-editor-item'));
      const validRows = rows.filter(r => (r.querySelector('.checklist-editor-item-text')?.value || '').trim().length > 0);
      const total = validRows.length;
      const completed = validRows.filter(r => r.querySelector('.checklist-editor-item-check')?.checked).length;
      if (editorProgress) editorProgress.textContent = `–ü—Ä–æ–≥—Ä–µ—Å—Å: ${completed}/${total}`;
    } catch(_) {}
  };
  updateProgress();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ–∫-–ª–∏—Å—Ç–∞
  itemsEditor.addEventListener('click', (event) => {
    const row = event.target.closest('div.checklist-editor-item');
    if (!row) return;

    if (event.target.classList.contains('checklist-editor-remove')) {
      row.remove();
      if (!itemsEditor.children.length) {
        itemsEditor.appendChild(renderRow({ text: '', completed: false }));
      }
      updateProgress();
    } else if (event.target.classList.contains('item-move-up')) {
      const prevRow = row.previousElementSibling;
      if (prevRow) {
        itemsEditor.insertBefore(row, prevRow);
      }
    } else if (event.target.classList.contains('item-move-down')) {
      const nextRow = row.nextElementSibling;
      if (nextRow) {
        itemsEditor.insertBefore(nextRow, row);
      }
    }
  });

  // –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  itemsEditor.addEventListener('change', (e) => {
    if (e.target && e.target.classList && e.target.classList.contains('checklist-editor-item-check')) {
      updateProgress();
    }
  });
  itemsEditor.addEventListener('input', (e) => {
    if (e.target && e.target.classList && e.target.classList.contains('checklist-editor-item-text')) {
      updateProgress();
    }
  });

  // Drag & Drop —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  let draggedRow = null;
  itemsEditor.addEventListener('dragstart', (e) => {
    const row = e.target.closest('.checklist-editor-item');
    if (!row) return;
    draggedRow = row;
    row.classList.add('dragging');
    try { e.dataTransfer.effectAllowed = 'move'; } catch(_) {}
  });
  itemsEditor.addEventListener('dragend', () => {
    if (draggedRow) draggedRow.classList.remove('dragging');
    draggedRow = null;
    updateProgress();
  });
  itemsEditor.addEventListener('dragover', (e) => {
    if (!draggedRow) return;
    e.preventDefault();
    const target = e.target.closest('.checklist-editor-item');
    if (!target || target === draggedRow) return;
    const rect = target.getBoundingClientRect();
    const next = (e.clientY - rect.top) > rect.height / 2;
    itemsEditor.insertBefore(draggedRow, next ? target.nextSibling : target);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Enter
  newItemInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addNewItem();
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  const addNewItem = () => {
    const text = newItemInput.value.trim();
    if (!text) return;
    
    const row = renderRow({ text, completed: false });
    itemsEditor.appendChild(row);
    newItemInput.value = '';
    newItemInput.focus();
    
    // –§–æ–∫—É—Å –Ω–∞ –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const input = row.querySelector('.checklist-editor-item-text');
    if (input) {
      input.focus();
      input.select();
    }
    updateProgress();
  };

  addBtn.onclick = addNewItem;

  // –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
  clearTitleBtn.onclick = () => {
    titleInput.value = '';
    titleInput.focus();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
  document.querySelectorAll('.color-preset').forEach(preset => {
    preset.addEventListener('click', () => {
      const color = preset.dataset.color;
      colorInput.value = color;
      // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      preset.style.transform = 'scale(1.1)';
      setTimeout(() => preset.style.transform = 'scale(1)', 150);
    });
  });

  const finalizeChecklist = () => {
    console.log('üíæ Saving checklist:', checklist.id); // Debug
    const updatedItems = [];
    itemsEditor.querySelectorAll('.checklist-editor-item').forEach((row) => {
      const textInput = row.querySelector('.checklist-editor-item-text');
      if (!textInput) return;
      const value = textInput.value.trim();
      if (!value) return;
      const checkbox = row.querySelector('.checklist-editor-item-check');
      let itemId = row.dataset.itemId;
      if (!itemId || itemId.startsWith('new-')) {
        itemId = generateId();
      }
      const original = originalItems.get(itemId);
      updatedItems.push({
        id: itemId,
        text: value,
        completed: checkbox ? checkbox.checked : false,
        createdAt: original?.createdAt || Date.now(),
        updatedAt: Date.now(),
      });
    });

    console.log('üíæ Updated items:', updatedItems); // Debug
    
    checklist.title = titleInput.value.trim() || checklist.title || 'Checklist';
    checklist.color = colorInput.value || '#3b82f6';
    checklist.items = updatedItems;
    checklist.updatedAt = Date.now();

    console.log('üíæ Final checklist:', checklist); // Debug

    try {
      saveState();
      console.log('üíæ State saved successfully'); // Debug
    } catch (error) {
      console.error('üíæ Error saving state:', error); // Debug
    }
    if (window.layoutMap) window.layoutMap();
    if (window.drawMap) window.drawMap();
    if (window.renderSidebar) window.renderSidebar();
    try { window.isChecklistEditorOpen = false; } catch(_) {}
    try { document.removeEventListener('keydown', onEditorKeyDownGlobal, true); } catch(_) {}
    closeModal();
    showToast('–ß–µ–∫-–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'ok');
  };

  saveBtn.onclick = finalizeChecklist;
  titleInput.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' && (event.metaKey || event.ctrlKey)) {
      event.preventDefault();
      finalizeChecklist();
    }
  });

  cancelBtn.onclick = () => { try { window.isChecklistEditorOpen = false; } catch(_) {} try { document.removeEventListener('keydown', onEditorKeyDownGlobal, true); } catch(_) {} closeModal(); };
  closeBtn.onclick = () => { try { window.isChecklistEditorOpen = false; } catch(_) {} try { document.removeEventListener('keydown', onEditorKeyDownGlobal, true); } catch(_) {} closeModal(); };

  deleteBtn.onclick = () => {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç?')) return;
    state.checklists = state.checklists.filter((item) => item.id !== checklist.id);
    try {
      saveState();
    } catch (_) {}
    if (window.layoutMap) window.layoutMap();
    if (window.drawMap) window.drawMap();
    if (window.renderSidebar) window.renderSidebar();
    try { window.isChecklistEditorOpen = false; } catch(_) {}
    try { document.removeEventListener('keydown', onEditorKeyDownGlobal, true); } catch(_) {}
    closeModal();
    showToast('Checklist deleted', 'ok');
  };

  // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ: Esc ‚Äî –∑–∞–∫—Ä—ã—Ç—å, Enter –≤ —Å—Ç—Ä–æ–∫–µ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
  const onKeyDown = (e) => {
    // Esc –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä (–µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ –≤ –ø–æ–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞)
    if (e.key === 'Escape') {
      e.preventDefault();
      try { if (typeof window.hideChecklistToggleView === 'function') window.hideChecklistToggleView(); } catch(_) {}
      try { window.isChecklistEditorOpen = false; } catch(_) {}
      closeModal();
      return;
    }
    // Enter –≤ –ø–æ–ª–µ —ç–ª–µ–º–µ–Ω—Ç–∞ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–≤–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ / –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é
    if (e.key === 'Enter') {
      const inputEl = e.target && e.target.classList && e.target.classList.contains('checklist-editor-item-text') ? e.target : null;
      if (inputEl) {
        e.preventDefault();
        inputEl.blur();
        // –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ –ø—É—Å—Ç–∞—è ‚Äî –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é
        const row = inputEl.closest('.checklist-editor-item');
        if (row && row.nextElementSibling == null && inputEl.value.trim()) {
          const rowNew = renderRow({ text: '', completed: false });
          itemsEditor.appendChild(rowNew);
          const nextInput = rowNew.querySelector('.checklist-editor-item-text');
          if (nextInput) nextInput.focus();
        } else if (row && row.nextElementSibling) {
          const nextInput = row.nextElementSibling.querySelector('.checklist-editor-item-text');
          if (nextInput) nextInput.focus();
        }
      }
    }
  };
  itemsEditor.addEventListener('keydown', onKeyDown, true);

  // –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ ‚Äî —Å–Ω—è—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  const _origClose = closeBtn.onclick;
  closeBtn.onclick = () => { itemsEditor.removeEventListener('keydown', onKeyDown, true); if (_origClose) _origClose(); };
  const _origCancel = cancelBtn.onclick;
  cancelBtn.onclick = () => { itemsEditor.removeEventListener('keydown', onKeyDown, true); if (_origCancel) _origCancel(); };
}

// –£–±—Ä–∞–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–ø–∞–ø–æ–≤
window.showChecklistEditor = showChecklistEditor;
// –£–±—Ä–∞–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏



// Setup creation panel buttons
function setupCreationPanel() {
  console.log('üîß setupCreationPanel called');
  // Create Task button
  const createTaskBtn = document.getElementById('createTaskBtn');
  if (createTaskBtn) {
    createTaskBtn.addEventListener('click', () => {
      const newTask = {
        id: generateId(),
        title: '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
        description: '',
        projectId: null,
        status: 'backlog',
        priority: 'p3',
        dueDate: null,
        estimatedTime: null,
        tags: [],
        createdAt: Date.now(),
        updatedAt: Date.now()
      };
      
      state.tasks.push(newTask);
      saveState();
      requestLayout(); // Update map layout with new task
      showTaskEditor(newTask);
    });
  }
  
  // Create Project button
  const createProjectBtn = document.getElementById('createProjectBtn');
  if (createProjectBtn) {
    createProjectBtn.addEventListener('click', () => {
      const domainId = state.activeDomain || state.domains[0]?.id || null;
      if (!domainId) {
        showToast("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω", "warn");
        return;
      }
      
      const newProject = {
        id: generateId(),
        domainId: domainId,
        title: '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
        description: '',
        color: getRandomProjectColor(),
        createdAt: Date.now(),
        updatedAt: Date.now()
      };
      
      state.projects.push(newProject);
      saveState();
      requestLayout(); // Update map layout with new project
      showProjectEditor(newProject);
    });
  }
  
  // Create Idea button
  const createIdeaBtn = document.getElementById('createIdeaBtn');
  if (createIdeaBtn) {
    createIdeaBtn.addEventListener('click', () => {
      const idea = createIdea();
      showIdeaEditor(idea);
    });
  }
  
  // Create Note button
  const createNoteBtn = document.getElementById('createNoteBtn');
  if (createNoteBtn) {
    createNoteBtn.addEventListener('click', () => {
      const note = createNote();
      showNoteEditor(note);
    });
  }
  
  // Create Checklist button
  const btnAddChecklist = document.getElementById('btnAddChecklist');
  if (btnAddChecklist) {
    btnAddChecklist.addEventListener('click', () => {
      try {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
        try { if (typeof window.hideChecklistToggleView === 'function') window.hideChecklistToggleView(); } catch(_) {}
        try { if (typeof window.closeChecklistWindow === 'function') window.closeChecklistWindow(); } catch(_) {}
        const checklist = createChecklist('–ù–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç');
        showChecklistEditor(checklist);
      } catch (error) {
        console.error('‚ùå Error creating checklist:', error);
      }
    });
  } else {
    console.error('‚ùå btnAddChecklist not found!');
  }

  // Inbox Capture button
  const btnInboxCapture = document.getElementById('btnInboxCapture');
  if (btnInboxCapture) {
    btnInboxCapture.addEventListener('click', () => {
      if (window.openInboxCapture) {
        window.openInboxCapture();
      } else {
        showToast('–ò–Ω–±–æ–∫—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'warn');
      }
    });
  }

  // Inbox List button
  const btnInboxList = document.getElementById('btnInboxList');
  if (btnInboxList) {
    btnInboxList.addEventListener('click', () => {
      if (window.openInboxList) {
        window.openInboxList();
      } else {
        showToast('–ò–Ω–±–æ–∫—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'warn');
      }
    });
  }
}

function submitQuick(text) {
  if (!text) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–µ–º –ª–∏ –º—ã –∏–¥–µ—é –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É
  if (text.startsWith('#–∏–¥–µ—è ') || text.startsWith('#idea ')) {
    const title = text.replace(/^#(–∏–¥–µ—è|idea)\s+/, '').trim();
    if (title) {
      const idea = createIdea();
      idea.title = title;
      showIdeaEditor(idea);
      $("#quickAdd").value = "";
      $("#qaChips").innerHTML = "";
      return;
    }
  }
  
  if (text.startsWith('#–∑–∞–º–µ—Ç–∫–∞ ') || text.startsWith('#note ')) {
    const title = text.replace(/^#(–∑–∞–º–µ—Ç–∫–∞|note)\s+/, '').trim();
    if (title) {
      const note = createNote();
      note.title = title;
      showNoteEditor(note);
      $("#quickAdd").value = "";
      $("#qaChips").innerHTML = "";
      return;
    }
  }
  
  // Simple logic: if text starts with @, create project; otherwise create task
  if (text.startsWith('@')) {
    const projectName = text.substring(1).trim();
    if (projectName) {
      const domainId = state.activeDomain || state.domains[0]?.id || null;
      if (!domainId) {
        showToast("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω", "warn");
        return;
      }
      
      const newProject = {
        id: "p" + Math.random().toString(36).slice(2, 8),
        domainId: domainId,
        title: projectName,
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º color - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ–¥–∏–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        createdAt: Date.now(),
        updatedAt: Date.now(),
      };
      
      state.projects.push(newProject);
      saveState();
      layoutMap();
      drawMap();
      showToast(`–ü—Ä–æ–µ–∫—Ç "${projectName}" —Å–æ–∑–¥–∞–Ω`, "ok");
    }
  } else {
    // Parse the text to extract time, tags, etc.
  const parsed = parseQuick(text);
    const title = parsed.title || text;
    
    // Check if user wants to assign to a specific domain
  let domainId = null;
    
    // If there's an active domain, ask user if they want to assign to it
    if (state.activeDomain) {
      const domainName = state.domains.find(d => d.id === state.activeDomain)?.title || "–¥–æ–º–µ–Ω";
      const assignToDomain = confirm(`–ü—Ä–∏–≤—è–∑–∞—Ç—å –∑–∞–¥–∞—á—É "${title}" –∫ –¥–æ–º–µ–Ω—É "${domainName}"?\n\n–ù–∞–∂–º–∏—Ç–µ "–û–ö" - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –¥–æ–º–µ–Ω—É\n–ù–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" - —Å–æ–∑–¥–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é –∑–∞–¥–∞—á—É`);
      if (assignToDomain) {
        domainId = state.activeDomain;
      }
    }
    
    // Determine status based on parsed time
    let status = "today"; // default
    if (parsed.when) {
      const now = Date.now();
      const taskTime = parsed.when.date;
      const diffHours = (taskTime - now) / (1000 * 60 * 60);
      
      if (diffHours < 0) {
        status = "backlog"; // past
      } else if (diffHours < 24) {
        status = "today"; // today
      } else {
        status = "backlog"; // future
      }
    }
    
    // Create task
    const newTask = {
    id: "t" + Math.random().toString(36).slice(2, 8),
      projectId: null,
      domainId: domainId, // null = fully independent, or specific domain
      title: title,
      tags: parsed.tag ? [parsed.tag] : [],
      status: status,
    estimateMin: parsed.estimate || null,
    priority: parsed.priority || 2,
    createdAt: Date.now(),
    updatedAt: Date.now(),
    };
    
    // Add scheduled time if parsed
    if (parsed.when) {
      newTask.scheduledFor = parsed.when.date;
    }
    
    // Debug: show where task will be placed
    console.log("Creating task:", newTask);
    console.log("Domain assignment:", domainId ? `assigned to domain ${domainId}` : "fully independent");
    console.log("Time parsing:", parsed.when ? `scheduled for ${new Date(parsed.when.date).toLocaleString()}` : "no time");
    
    state.tasks.push(newTask);
  saveState();
  layoutMap();
  drawMap();
    updateWip(); // Update WIP count
    
    // Trigger cosmic animation for task creation
    if (window.cosmicAnimations) {
      setTimeout(() => {
        const taskNode = nodes?.find(n => n.id === newTask.id);
        if (taskNode) {
          window.cosmicAnimations.animateTaskCreation(taskNode.x, taskNode.y, newTask.status);
        }
      }, 100);
    }
    
    const location = domainId ? `–≤ –¥–æ–º–µ–Ω–µ "${state.domains.find(d => d.id === domainId)?.title}"` : "–∫–∞–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è";
    const timeInfo = parsed.when ? ` –Ω–∞ ${parsed.when.label}` : "";
    showToast(`–ó–∞–¥–∞—á–∞ "${title}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ ${location}${timeInfo}`, "ok");
  }
  
  renderSidebar();
  updateWip();
}

function submitQuickToDomain(text) {
  if (!text) return;
  
  // Always create task in active domain (no confirmation needed)
  if (!state.activeDomain) {
    showToast("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω", "warn");
    return;
  }
  
  // Parse the text to extract time, tags, etc.
  const parsed = parseQuick(text);
  const title = parsed.title || text;
  
  // Determine status based on parsed time
  let status = "today"; // default
  if (parsed.when) {
    const now = Date.now();
    const taskTime = parsed.when.date;
    const diffHours = (taskTime - now) / (1000 * 60 * 60);
    
    if (diffHours < 0) {
      status = "backlog"; // past
    } else if (diffHours < 24) {
      status = "today"; // today
    } else {
      status = "backlog"; // future
    }
  }
  
  const newTask = {
    id: "t" + Math.random().toString(36).slice(2, 8),
    projectId: null,
    domainId: state.activeDomain, // Always assign to active domain
    title: title,
    tags: parsed.tag ? [parsed.tag] : [],
    status: status,
    estimateMin: parsed.estimate || null,
    priority: parsed.priority || 2,
    createdAt: Date.now(),
    updatedAt: Date.now(),
  };
  
  // Add scheduled time if parsed
  if (parsed.when) {
    newTask.scheduledFor = parsed.when.date;
  }
  
  console.log("Creating task in domain:", newTask);
  
  state.tasks.push(newTask);
  saveState();
  layoutMap();
  drawMap();
  updateWip(); // Update WIP count
  
  const domainName = state.domains.find(d => d.id === state.activeDomain)?.title || "–¥–æ–º–µ–Ω";
  const timeInfo = parsed.when ? ` –Ω–∞ ${parsed.when.label}` : "";
  showToast(`–ó–∞–¥–∞—á–∞ "${title}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–æ–º–µ–Ω "${domainName}"${timeInfo}`, "ok");
  
  renderSidebar();
  updateWip();
}

async function init() {
  // Prevent double initialization
  if (window.__atlasInitDone) {
    console.log('Atlas already initialized, skipping...');
    return;
  }
  window.__atlasInitDone = true;
  
  // Expose eventBus globally for inter-module communication
  window.eventBus = eventBus;
  
  // Check URL parameter for map version override
  const urlParams = new URLSearchParams(window.location.search);
  const mapVersion = urlParams.get('map');
  if (mapVersion === 'v1' || mapVersion === 'v2') {
    if (!state.settings) state.settings = {};
    state.settings.mapVersion = mapVersion;
    console.log(`Map version overridden to ${mapVersion} via URL parameter`);
  }
  
  // Normal initialization for all browsers (including Edge)
  const ok = loadState();
  if (!ok) initDemoData();
  
  // –ê—É–¥–∏—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏...');
    const { validateHierarchy, index } = await import('./hierarchy/index.js');
    
    // –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å—ã
    const indices = index(state);
    console.log(`üìä –ò–Ω–¥–µ–∫—Å—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã: ${indices.byId.size} –æ–±—ä–µ–∫—Ç–æ–≤, ${indices.childrenById.size} —Ä–æ–¥–∏—Ç–µ–ª–µ–π`);
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é
    const problems = validateHierarchy(state);
    if (problems.length > 0) {
      console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${problems.length} –ø—Ä–æ–±–ª–µ–º –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏:`);
      problems.forEach((problem, index) => {
        console.warn(`  ${index + 1}. ${problem.message} (${problem.code}) - ID: ${problem.id}`);
      });
      
      // –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
      let fixed = 0;
      problems.forEach(problem => {
        if (problem.code === 'missing_parent') {
          const obj = state.domains.find(d => d.id === problem.id) ||
                     state.projects.find(p => p.id === problem.id) ||
                     state.tasks.find(t => t.id === problem.id) ||
                     state.ideas.find(i => i.id === problem.id) ||
                     state.notes.find(n => n.id === problem.id) ||
                     state.checklists.find(c => c.id === problem.id);
          
          if (obj) {
            obj.parentId = null;
            obj.projectId = null;
            obj.domainId = null;
            fixed++;
            console.log(`üîß –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${problem.id} (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å)`);
          }
        }
      });
      
      if (fixed > 0) {
        console.log(`‚úÖ –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixed} –æ—à–∏–±–æ–∫ —Å–≤—è–∑–µ–π`);
        saveState();
      }
    } else {
      console.log('‚úÖ –ò–µ—Ä–∞—Ä—Ö–∏—è –≤–∞–ª–∏–¥–Ω–∞');
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏:', error);
  }
  
  // Initialize hotkeys
  initializeHotkeys();
  // Ensure DnD hints are off by default, Inbox is ON by default, tooltip delay is 500ms
  try { 
    if (!state.settings) state.settings = {}; 
    if (typeof state.settings.showDndHints==='undefined') state.settings.showDndHints = true;
    if (typeof state.settings.showInbox==='undefined') state.settings.showInbox = true; // ON by default
    if (typeof state.settings.tooltipDelay==='undefined') state.settings.tooltipDelay = 500; // 500ms by default
  } catch(_){}
  
  // Initialize autocomplete
  console.log('About to initialize autocomplete...');
  initAutocomplete();
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)
  setTimeout(() => {
    console.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ...');
    if (window.cleanupDuplicates) {
      window.cleanupDuplicates();
    }
  }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  
  // Initialize cosmic animations
  if (!window.cosmicAnimations) {
    import('./cosmic-effects.js').then(module => {
      window.cosmicAnimations = new module.CosmicAnimations();
      console.log('Cosmic animations initialized successfully');
    });
  }
  
  // Initialize analytics dashboard
  window.analyticsDashboard = analyticsDashboard;
  console.log('Analytics dashboard initialized successfully');
  
  // Initialize inbox system (after everything else is loaded)
  setTimeout(() => {
    try {
      // Wait for map to be fully initialized
      if (window.drawMap && document.getElementById('canvas')) {
        initInbox();
        console.log('Inbox system initialized');
      } else {
        console.warn('Map not ready, retrying inbox initialization...');
        setTimeout(() => {
          try {
            initInbox();
            console.log('Inbox system initialized (retry)');
          } catch (error) {
            console.error('Failed to initialize inbox (retry):', error);
          }
        }, 500);
      }
    } catch (error) {
      console.error('Failed to initialize inbox:', error);
    }
  }, 200);
  
  // Initialize info panel tooltips
  setupInfoPanelTooltips();
  
  // Initialize checklist context menu handler
  setupChecklistContextMenu();
  
  // set version in brand + document title
  const brandEl = document.querySelector("header .brand");
  // Don't override APP_VERSION from CHANGELOG - use the hardcoded version
  if (brandEl) brandEl.textContent = APP_VERSION;
  document.title = APP_VERSION + " (modular)";
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ —Å–∏—Å—Ç–µ–º—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2 (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
  // if (isHierarchyV2Enabled()) {
  //   console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2 –≤–∫–ª—é—á–µ–Ω–∞');
  //   // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2
  // } else {
    console.log('üö´ –°–∏—Å—Ç–µ–º–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2 –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏');
  // }
  
  renderSidebar();
  setupHeader();
  setupQuickAdd();
  // ensure header chips reflect persisted view
  try {
    $$(".chip").forEach((c) => {
      c.classList.toggle("active", c.dataset.view === state.view);
    });
    $("#canvas").style.display = state.view === "map" ? "block" : "none";
    $("#viewToday").style.display = state.view === "today" ? "flex" : "none";
  } catch (_) {}
  // hotkeys: C/F/P/R + N new domain, FPS toggle
  window.addEventListener("keydown", (e) => {
    // Ctrl+Z -> undo last move
    if ((e.ctrlKey || e.metaKey) && e.key && e.key.toLowerCase() === "z") {
      e.preventDefault();
      const ok = undoLastMove && undoLastMove();
      if (ok) showToast("–û—Ç–º–µ–Ω–µ–Ω–æ", "ok");
      return;
    }
    if (e.ctrlKey && e.shiftKey && e.key && e.key.toLowerCase() === "f") {
      e.preventDefault();
      setShowFps();
      return;
    }
    if (e.target && e.target.id === "quickAdd") return;
    if (!e.key) return; // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined key
    const k = e.key.toLowerCase();
    if (k === "c") {
      e.preventDefault();
      centerView();
    }
    if (k === "f") {
      e.preventDefault();
      fitActiveDomain();
    }
    if (k === "p") {
      e.preventDefault();
      fitActiveProject();
    }
    if (k === "r") {
      e.preventDefault();
      resetView();
    }
    if (k === "b") {
      e.preventDefault();
      // Toggle focus mode "Black Hole"
      if (window.toggleFocusMode) {
        window.toggleFocusMode();
      }
    }
    if (k === "n") {
      e.preventDefault();
      ui.newDomain = true;
      renderSidebar();
      $("#newDomName")?.focus();
    }
  });
  const canvas = document.getElementById("canvas");
  const tooltip = document.getElementById("tooltip");
  if (canvas && tooltip) {
    // Feature gate for future map v2 (currently legacy only)
    const useV2 = (() => {
      try {
        const q = new URLSearchParams(location.search);
        return state?.ui?.features?.modularMap === true || q.get('map') === 'v2';
      } catch (_) { return false; }
    })();
    // For now always run legacy implementation to keep behavior unchanged.
    // When v2 is ready: if (useV2) createMapV2(...) else initMap(...)
  initMap(canvas, tooltip);
  }
  updateWip();
  
  // Setup creation panel buttons
  setupCreationPanel();
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const modal = document.getElementById('modal');
  if (modal) {
    modal.style.display = 'none';
  }
}
init();


// Setup checklist context menu handler
function setupChecklistContextMenu() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏—á–µ—Ñ–ª–∞–≥
  if (!state.ui?.features?.checklist) {
    return;
  }
  
  // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
  window.openChecklist = openChecklist;
  window.closeChecklist = closeChecklist;
  window.openChecklistWindow = openChecklistWindow;
  window.closeChecklistWindow = closeChecklistWindow;
  
  console.log('üîß Checklist system initialized:', {
    featureFlag: state.ui?.features?.checklist,
    openChecklist: typeof openChecklist,
    closeChecklist: typeof closeChecklist
  });
  
  // –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ contextmenu —É–±—Ä–∞–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ view_map.js
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
function screenToWorld(screenX, screenY) {
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∏–∑ view_map.js
  if (window.mapApi && window.mapApi.getViewState) {
    const viewState = window.mapApi.getViewState();
    const inv = 1 / Math.max(0.0001, viewState.scale);
    return {
      x: (screenX - viewState.tx) * inv,
      y: (screenY - viewState.ty) * inv
    };
  }
  return { x: screenX, y: screenY };
}

function findNodeAt(x, y) {
  // –ü–æ–ª—É—á–∞–µ–º —É–∑–ª—ã –∏–∑ view_map.js
  if (window.mapApi && window.mapApi.getMapNodes) {
    const nodes = window.mapApi.getMapNodes();
    const DPR = window.devicePixelRatio || 1;
    
    for (let i = nodes.length - 1; i >= 0; i--) {
      const n = nodes[i];
      const dx = x - n.x;
      const dy = y - n.y;
      const rr = n._type === "task" ? n.r + 6 * DPR :
                 n._type === "project" ? n.r + 10 * DPR :
                 n._type === "domain" ? n.r + 15 * DPR : n.r;
      
      if (dx * dx + dy * dy < rr * rr) {
        return n;
      }
    }
  }
  return null;
}

// expose renderers for external refresh (storage, addons)
try { window.renderSidebar = renderSidebar; } catch(_) {}
try { window.renderToday = renderToday; } catch(_) {}
try { window.openInspectorFor = openInspectorFor; } catch(_) {}

// Toggle all tags visibility
window.toggleAllTags = function() {
  state.showAllTags = !state.showAllTags;
  renderSidebar();
};



