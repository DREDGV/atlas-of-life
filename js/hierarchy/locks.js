// js/hierarchy/locks.js
// –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2

import { LOCK_TYPES } from '../types/hierarchy.js';

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—ä–µ–∫—Ç–∞
 * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {string} lockType - –¢–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ('move' –∏–ª–∏ 'hierarchy')
 * @returns {boolean} –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–±—ä–µ–∫—Ç
 */
export function isObjectLocked(obj, lockType) {
  if (!obj || !obj.locks) {
    return false;
  }

  if (lockType === LOCK_TYPES.MOVE) {
    return obj.locks.move === true;
  }

  if (lockType === LOCK_TYPES.HIERARCHY) {
    return obj.locks.hierarchy === true;
  }

  console.warn(`‚ö†Ô∏è isObjectLocked: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${lockType}`);
  return false;
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—ä–µ–∫—Ç–∞
 * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
 * @param {string} lockType - –¢–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ('move' –∏–ª–∏ 'hierarchy')
 * @param {boolean} locked - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
 * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export function setObjectLock(obj, lockType, locked) {
  try {
    if (!obj) {
      console.warn('‚ùå setObjectLock: –û–±—ä–µ–∫—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      return false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è locks –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!obj.locks) {
      obj.locks = {
        move: false,
        hierarchy: false
      };
    }

    if (lockType === LOCK_TYPES.MOVE) {
      obj.locks.move = locked === true;
      console.log(`üîí setObjectLock: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è ${locked ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '—Å–Ω—è—Ç–∞'} –¥–ª—è ${obj.id}`);
      return true;
    }

    if (lockType === LOCK_TYPES.HIERARCHY) {
      obj.locks.hierarchy = locked === true;
      console.log(`üîí setObjectLock: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ ${locked ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '—Å–Ω—è—Ç–∞'} –¥–ª—è ${obj.id}`);
      return true;
    }

    console.warn(`‚ùå setObjectLock: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${lockType}`);
    return false;

  } catch (error) {
    console.error('‚ùå setObjectLock: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
 * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –æ–±—ä–µ–∫—Ç
 */
export function canMoveObject(obj) {
  if (!obj) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
  if (isObjectLocked(obj, LOCK_TYPES.MOVE)) {
    console.log(`üîí canMoveObject: –û–±—ä–µ–∫—Ç ${obj.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è`);
    return false;
  }

  return true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –æ–±—ä–µ–∫—Ç–∞
 * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –æ–±—ä–µ–∫—Ç–∞
 */
export function canChangeHierarchy(obj) {
  if (!obj) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–µ—Ä–∞—Ä—Ö–∏–∏
  if (isObjectLocked(obj, LOCK_TYPES.HIERARCHY)) {
    console.log(`üîí canChangeHierarchy: –û–±—ä–µ–∫—Ç ${obj.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏`);
    return false;
  }

  return true;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {string} lockType - –¢–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
export function getLockedObjects(state, lockType = null) {
  try {
    const allObjects = [
      ...(state.domains || []),
      ...(state.projects || []),
      ...(state.tasks || []),
      ...(state.ideas || []),
      ...(state.notes || [])
    ];

    if (lockType) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–∏–ø–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      return allObjects.filter(obj => isObjectLocked(obj, lockType));
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
      return allObjects.filter(obj => 
        isObjectLocked(obj, LOCK_TYPES.MOVE) || 
        isObjectLocked(obj, LOCK_TYPES.HIERARCHY)
      );
    }

  } catch (error) {
    console.error('‚ùå getLockedObjects: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:', error);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
 */
export function getLockStatistics(state) {
  try {
    const allObjects = [
      ...(state.domains || []),
      ...(state.projects || []),
      ...(state.tasks || []),
      ...(state.ideas || []),
      ...(state.notes || [])
    ];

    const stats = {
      total: allObjects.length,
      moveLocked: 0,
      hierarchyLocked: 0,
      bothLocked: 0,
      unlocked: 0,
      byType: {
        domains: { total: 0, moveLocked: 0, hierarchyLocked: 0 },
        projects: { total: 0, moveLocked: 0, hierarchyLocked: 0 },
        tasks: { total: 0, moveLocked: 0, hierarchyLocked: 0 },
        ideas: { total: 0, moveLocked: 0, hierarchyLocked: 0 },
        notes: { total: 0, moveLocked: 0, hierarchyLocked: 0 }
      }
    };

    allObjects.forEach(obj => {
      const objType = getObjectType(obj);
      const moveLocked = isObjectLocked(obj, LOCK_TYPES.MOVE);
      const hierarchyLocked = isObjectLocked(obj, LOCK_TYPES.HIERARCHY);

      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      if (moveLocked) stats.moveLocked++;
      if (hierarchyLocked) stats.hierarchyLocked++;
      if (moveLocked && hierarchyLocked) stats.bothLocked++;
      if (!moveLocked && !hierarchyLocked) stats.unlocked++;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
      if (stats.byType[objType + 's']) {
        stats.byType[objType + 's'].total++;
        if (moveLocked) stats.byType[objType + 's'].moveLocked++;
        if (hierarchyLocked) stats.byType[objType + 's'].hierarchyLocked++;
      }
    });

    return stats;

  } catch (error) {
    console.error('‚ùå getLockStatistics: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫:', error);
    return {
      total: 0,
      moveLocked: 0,
      hierarchyLocked: 0,
      bothLocked: 0,
      unlocked: 0,
      byType: {}
    };
  }
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
 * @param {Array} objectIds - –ú–∞—Å—Å–∏–≤ ID –æ–±—ä–µ–∫—Ç–æ–≤
 * @param {string} lockType - –¢–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
 * @param {boolean} locked - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export function batchSetLocks(objectIds, lockType, locked, state) {
  const result = {
    success: 0,
    failed: 0,
    details: []
  };

  try {
    console.log(`üîí batchSetLocks: ${locked ? '–ë–ª–æ–∫–∏—Ä—É–µ–º' : '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º'} ${objectIds.length} –æ–±—ä–µ–∫—Ç–æ–≤`);

    objectIds.forEach(objId => {
      try {
        const obj = findObjectById(state, objId);
        if (!obj) {
          result.failed++;
          result.details.push(`–û–±—ä–µ–∫—Ç ${objId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return;
        }

        if (setObjectLock(obj, lockType, locked)) {
          result.success++;
          result.details.push(`–û–±—ä–µ–∫—Ç ${objId} ${locked ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`);
        } else {
          result.failed++;
          result.details.push(`–ù–µ —É–¥–∞–ª–æ—Å—å ${locked ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'} ${objId}`);
        }
      } catch (error) {
        result.failed++;
        result.details.push(`–û—à–∏–±–∫–∞ –¥–ª—è ${objId}: ${error.message}`);
      }
    });

    console.log(`‚úÖ batchSetLocks: –£—Å–ø–µ—à–Ω–æ: ${result.success}, –û—à–∏–±–æ–∫: ${result.failed}`);

  } catch (error) {
    console.error('‚ùå batchSetLocks: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    result.failed = objectIds.length;
    result.details.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }

  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
 * @param {string} objId - ID –æ–±—ä–µ–∫—Ç–∞
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export function checkMovePermissions(objId, state) {
  try {
    const obj = findObjectById(state, objId);
    if (!obj) {
      return {
        canMove: false,
        reason: '–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        locks: []
      };
    }

    const locks = [];
    let canMove = true;
    let reason = '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    if (isObjectLocked(obj, LOCK_TYPES.MOVE)) {
      canMove = false;
      locks.push('move');
      reason = '–û–±—ä–µ–∫—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–µ—Ä–∞—Ä—Ö–∏–∏ (–µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∏–º–µ–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è)
    if (obj.parentId && isObjectLocked(obj, LOCK_TYPES.HIERARCHY)) {
      canMove = false;
      locks.push('hierarchy');
      reason = '–û–±—ä–µ–∫—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏';
    }

    return {
      canMove,
      reason,
      locks,
      objectId: objId
    };

  } catch (error) {
    console.error('‚ùå checkMovePermissions: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
    return {
      canMove: false,
      reason: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π',
      locks: [],
      objectId: objId
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
 * @param {string} objId - ID –æ–±—ä–µ–∫—Ç–∞
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
export function checkHierarchyPermissions(objId, state) {
  try {
    const obj = findObjectById(state, objId);
    if (!obj) {
      return {
        canChange: false,
        reason: '–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        locks: []
      };
    }

    const locks = [];
    let canChange = true;
    let reason = '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–µ—Ä–∞—Ä—Ö–∏–∏
    if (isObjectLocked(obj, LOCK_TYPES.HIERARCHY)) {
      canChange = false;
      locks.push('hierarchy');
      reason = '–û–±—ä–µ–∫—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏';
    }

    return {
      canChange,
      reason,
      locks,
      objectId: objId
    };

  } catch (error) {
    console.error('‚ùå checkHierarchyPermissions: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
    return {
      canChange: false,
      reason: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π',
      locks: [],
      objectId: objId
    };
  }
}

// –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ state.js
import { findObjectById, getObjectType } from '../state.js';

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default {
  isObjectLocked,
  setObjectLock,
  canMoveObject,
  canChangeHierarchy,
  getLockedObjects,
  getLockStatistics,
  batchSetLocks,
  checkMovePermissions,
  checkHierarchyPermissions
};
