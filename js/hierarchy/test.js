// js/hierarchy/test.js
// –¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2

import { 
  initHierarchyFields,
  setParentChild,
  removeParentChild,
  getParentObject,
  getChildObjects,
  validateHierarchy,
  isObjectLocked,
  setObjectLock,
  canMoveObject,
  canChangeHierarchy
} from './index.js';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
const testState = {
  domains: [
    {
      id: 'd1',
      title: '–†–∞–±–æ—Ç–∞',
      mood: 'productive'
    },
    {
      id: 'd2', 
      title: '–î–æ–º',
      mood: 'cozy'
    }
  ],
  projects: [
    {
      id: 'p1',
      title: '–ü—Ä–æ–µ–∫—Ç –ê',
      domainId: 'd1'
    },
    {
      id: 'p2',
      title: '–ü—Ä–æ–µ–∫—Ç –ë',
      domainId: 'd1'
    }
  ],
  tasks: [
    {
      id: 't1',
      title: '–ó–∞–¥–∞—á–∞ 1',
      status: 'backlog',
      projectId: 'p1'
    },
    {
      id: 't2',
      title: '–ó–∞–¥–∞—á–∞ 2', 
      status: 'today',
      projectId: 'p1'
    }
  ],
  ideas: [
    {
      id: 'i1',
      title: '–ò–¥–µ—è 1',
      content: '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –º—ã—Å–ª—å'
    }
  ],
  notes: [
    {
      id: 'n1',
      title: '–ó–∞–º–µ—Ç–∫–∞ 1',
      text: '–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
    }
  ]
};

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
export function runAllTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2...');
  
  const results = {
    passed: 0,
    failed: 0,
    total: 0,
    details: []
  };

  // –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
  testInitHierarchyFields(results);
  
  // –¢–µ—Å—Ç 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π
  testSetParentChild(results);
  
  // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π
  testGetConnections(results);
  
  // –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  testLocks(results);
  
  // –¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è
  testValidation(results);

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.failed}`);
  console.log(`üìà –í—Å–µ–≥–æ: ${results.total}`);
  console.log(`üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((results.passed / results.total) * 100)}%`);

  if (results.failed > 0) {
    console.log(`\n‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:`);
    results.details.forEach(detail => {
      console.log(`  - ${detail}`);
    });
  }

  return results;
}

/**
 * –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
 */
function testInitHierarchyFields(results) {
  console.log('üîß –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏');
  
  try {
    const testObj = { id: 'test1', title: 'Test' };
    const result = initHierarchyFields(testObj, 'domain');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π
    if (!result.parentId === null) {
      throw new Error('parentId –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    if (!result.children || !result.children.projects) {
      throw new Error('children –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    if (!result.locks || typeof result.locks.move !== 'boolean') {
      throw new Error('locks –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    if (!result.constraints || typeof result.constraints.maxRadius !== 'number') {
      throw new Error('constraints –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    results.passed++;
    results.details.push('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ - –ü–†–û–ô–î–ï–ù');
    
  } catch (error) {
    results.failed++;
    results.details.push(`‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`);
  }
  
  results.total++;
}

/**
 * –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–µ–π
 */
function testSetParentChild(results) {
  console.log('üîó –¢–µ—Å—Ç 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    const parent = { id: 'parent1', title: 'Parent' };
    const child = { id: 'child1', title: 'Child' };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
    initHierarchyFields(parent, 'domain');
    initHierarchyFields(child, 'project');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
    const success = setParentChild(parent.id, child.id, 'project');
    
    if (!success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if (child.parentId !== parent.id) {
      throw new Error('parentId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    
    if (!parent.children.projects.includes(child.id)) {
      throw new Error('child –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π');
    }

    results.passed++;
    results.details.push('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π - –ü–†–û–ô–î–ï–ù');
    
  } catch (error) {
    results.failed++;
    results.details.push(`‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`);
  }
  
  results.total++;
}

/**
 * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π
 */
function testGetConnections(results) {
  console.log('üîç –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    const parent = { id: 'parent2', title: 'Parent' };
    const child1 = { id: 'child2', title: 'Child 1' };
    const child2 = { id: 'child3', title: 'Child 2' };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è
    initHierarchyFields(parent, 'domain');
    initHierarchyFields(child1, 'project');
    initHierarchyFields(child2, 'project');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏
    setParentChild(parent.id, child1.id, 'project');
    setParentChild(parent.id, child2.id, 'project');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—è
    const parentResult = getParentObject(child1.id);
    if (!parentResult || parentResult.id !== parent.id) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–π
    const childrenResult = getChildObjects(parent.id);
    if (!childrenResult.projects.includes(child1.id) || !childrenResult.projects.includes(child2.id)) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–µ–π');
    }

    results.passed++;
    results.details.push('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π - –ü–†–û–ô–î–ï–ù');
    
  } catch (error) {
    results.failed++;
    results.details.push(`‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`);
  }
  
  results.total++;
}

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
 */
function testLocks(results) {
  console.log('üîí –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    const obj = { id: 'test4', title: 'Test' };
    initHierarchyFields(obj, 'domain');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if (isObjectLocked(obj, 'move')) {
      throw new Error('–û–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    const success = setObjectLock(obj, 'move', true);
    if (!success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if (!isObjectLocked(obj, 'move')) {
      throw new Error('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º canMoveObject
    if (canMoveObject(obj)) {
      throw new Error('canMoveObject –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å false –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞');
    }
    
    // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    setObjectLock(obj, 'move', false);
    if (isObjectLocked(obj, 'move')) {
      throw new Error('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å–Ω—è—Ç–∞');
    }

    results.passed++;
    results.details.push('‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ - –ü–†–û–ô–î–ï–ù');
    
  } catch (error) {
    results.failed++;
    results.details.push(`‚ùå –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`);
  }
  
  results.total++;
}

/**
 * –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function testValidation(results) {
  console.log('üîç –¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è');
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const testStateCopy = JSON.parse(JSON.stringify(testState));
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
    testStateCopy.domains.forEach(domain => initHierarchyFields(domain, 'domain'));
    testStateCopy.projects.forEach(project => initHierarchyFields(project, 'project'));
    testStateCopy.tasks.forEach(task => initHierarchyFields(task, 'task'));
    testStateCopy.ideas.forEach(idea => initHierarchyFields(idea, 'idea'));
    testStateCopy.notes.forEach(note => initHierarchyFields(note, 'note'));
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º
    const errors = validateHierarchy(testStateCopy);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–æ–∫ –Ω–µ—Ç (–∏–ª–∏ –æ–Ω–∏ –æ–∂–∏–¥–∞–µ–º—ã–µ)
    if (errors.length > 0) {
      console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)`);
    }

    results.passed++;
    results.details.push('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è - –ü–†–û–ô–î–ï–ù');
    
  } catch (error) {
    results.failed++;
    results.details.push(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`);
  }
  
  results.total++;
}

/**
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
 */
if (typeof window !== 'undefined') {
  // –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  window.runHierarchyTests = runAllTests;
  console.log('üß™ –¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ runHierarchyTests() –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
} else {
  // –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ Node.js
  runAllTests();
}
