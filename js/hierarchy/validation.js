// js/hierarchy/validation.js
// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–µ—Ä–∞—Ä—Ö–∏–∏ v2

import { 
  OBJECT_TYPES, 
  VALIDATION_ERROR_TYPES,
  ERROR_MESSAGES,
  PERFORMANCE_LIMITS,
  HierarchyUtils 
} from '../types/hierarchy.js';

/**
 * –ö–ª–∞—Å—Å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏
 */
export class HierarchyValidationError extends Error {
  constructor(type, message, objectId, parentId = null, childId = null) {
    super(message);
    this.name = 'HierarchyValidationError';
    this.type = type;
    this.objectId = objectId;
    this.parentId = parentId;
    this.childId = childId;
    this.timestamp = Date.now();
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function validateHierarchy(state) {
  const errors = [];
  
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–µ—Ä–∞—Ä—Ö–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
    const allObjects = [
      ...(state.domains || []),
      ...(state.projects || []),
      ...(state.tasks || []),
      ...(state.ideas || []),
      ...(state.notes || [])
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç
    allObjects.forEach(obj => {
      if (!obj.id) {
        errors.push(new HierarchyValidationError(
          VALIDATION_ERROR_TYPES.MISSING_OBJECT,
          '–û–±—ä–µ–∫—Ç –Ω–µ –∏–º–µ–µ—Ç ID',
          'unknown'
        ));
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
      const objErrors = validateObject(obj, state);
      errors.push(...objErrors);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const cyclicErrors = findCyclicDependencies(allObjects);
    errors.push(...cyclicErrors);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const performanceErrors = validatePerformanceLimits(allObjects);
    errors.push(...performanceErrors);

    console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${errors.length}`);
    return errors;

  } catch (error) {
    console.error('‚ùå validateHierarchy: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
    errors.push(new HierarchyValidationError(
      VALIDATION_ERROR_TYPES.MISSING_OBJECT,
      '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ' + error.message,
      'system'
    ));
    return errors;
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function validateObject(obj, state) {
  const errors = [];
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!obj.id) {
      errors.push(new HierarchyValidationError(
        VALIDATION_ERROR_TYPES.MISSING_OBJECT,
        '–û–±—ä–µ–∫—Ç –Ω–µ –∏–º–µ–µ—Ç ID',
        'unknown'
      ));
      return errors;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º parentId
    if (obj.parentId) {
      const parent = findObjectById(state, obj.parentId);
      if (!parent) {
        errors.push(new HierarchyValidationError(
          VALIDATION_ERROR_TYPES.MISSING_OBJECT,
          `–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç ${obj.parentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
          obj.id,
          obj.parentId
        ));
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
        const objType = getObjectType(obj);
        const parentType = getObjectType(parent);
        
        if (!HierarchyUtils.isConnectionAllowed(parentType, objType)) {
          errors.push(new HierarchyValidationError(
            VALIDATION_ERROR_TYPES.INVALID_PARENT_TYPE,
            `–°–≤—è–∑—å ${parentType} ‚Üí ${objType} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞`,
            obj.id,
            obj.parentId
          ));
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º children
    if (obj.children) {
      Object.entries(obj.children).forEach(([childType, childIds]) => {
        if (!Array.isArray(childIds)) {
          errors.push(new HierarchyValidationError(
            VALIDATION_ERROR_TYPES.MISSING_OBJECT,
            `–ü–æ–ª–µ children.${childType} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º`,
            obj.id
          ));
          return;
        }

        childIds.forEach(childId => {
          const child = findObjectById(state, childId);
          if (!child) {
            errors.push(new HierarchyValidationError(
              VALIDATION_ERROR_TYPES.MISSING_OBJECT,
              `–î–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç ${childId} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
              obj.id,
              obj.id,
              childId
            ));
          } else if (child.parentId !== obj.id) {
            errors.push(new HierarchyValidationError(
              VALIDATION_ERROR_TYPES.ORPHANED_OBJECT,
              `–î–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç ${childId} –Ω–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è ${obj.id}`,
              obj.id,
              obj.id,
              childId
            ));
          }
        });
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º locks
    if (obj.locks) {
      if (typeof obj.locks.move !== 'boolean') {
        errors.push(new HierarchyValidationError(
          VALIDATION_ERROR_TYPES.MISSING_OBJECT,
          '–ü–æ–ª–µ locks.move –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean',
          obj.id
        ));
      }
      if (typeof obj.locks.hierarchy !== 'boolean') {
        errors.push(new HierarchyValidationError(
          VALIDATION_ERROR_TYPES.MISSING_OBJECT,
          '–ü–æ–ª–µ locks.hierarchy –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean',
          obj.id
        ));
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º constraints
    if (obj.constraints) {
      if (typeof obj.constraints.maxRadius !== 'number' || obj.constraints.maxRadius <= 0) {
        errors.push(new HierarchyValidationError(
          VALIDATION_ERROR_TYPES.MISSING_OBJECT,
          '–ü–æ–ª–µ constraints.maxRadius –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
          obj.id
        ));
      }
      if (typeof obj.constraints.orbitRadius !== 'number' || obj.constraints.orbitRadius <= 0) {
        errors.push(new HierarchyValidationError(
          VALIDATION_ERROR_TYPES.MISSING_OBJECT,
          '–ü–æ–ª–µ constraints.orbitRadius –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º',
          obj.id
        ));
      }
      if (typeof obj.constraints.autoLayout !== 'boolean') {
        errors.push(new HierarchyValidationError(
          VALIDATION_ERROR_TYPES.MISSING_OBJECT,
          '–ü–æ–ª–µ constraints.autoLayout –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean',
          obj.id
        ));
      }
    }

  } catch (error) {
    console.error('‚ùå validateObject: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞:', error);
    errors.push(new HierarchyValidationError(
      VALIDATION_ERROR_TYPES.MISSING_OBJECT,
      '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞: ' + error.message,
      obj.id
    ));
  }

  return errors;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏
 * @param {string} parentId - ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 * @param {string} childId - ID –¥–æ—á–µ—Ä–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 * @param {string} childType - –¢–∏–ø –¥–æ—á–µ—Ä–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å
 */
export function canSetParentChild(parentId, childId, childType, state) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const parent = findObjectById(state, parentId);
    const child = findObjectById(state, childId);
    
    if (!parent || !child) {
      console.warn('‚ùå canSetParentChild: –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
    const parentType = getObjectType(parent);
    if (!HierarchyUtils.isConnectionAllowed(parentType, childType)) {
      console.warn('‚ùå canSetParentChild: –°–≤—è–∑—å –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    if (hasCyclicDependency(parentId, childId, state)) {
      console.warn('‚ùå canSetParentChild: –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å');
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if (isObjectLocked(child, 'hierarchy')) {
      console.warn('‚ùå canSetParentChild: –û–±—ä–µ–∫—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏');
      return false;
    }

    return true;

  } catch (error) {
    console.error('‚ùå canSetParentChild: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏:', error);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 * @param {string} parentId - ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 * @param {string} childId - ID –¥–æ—á–µ—Ä–Ω–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {boolean} –ï—Å—Ç—å –ª–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
 */
export function hasCyclicDependency(parentId, childId, state) {
  try {
    // –ï—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è –∫–∞–∫ —Ä–µ–±–µ–Ω–∫–∞ –µ–≥–æ –ø–æ—Ç–æ–º–∫–∞
    const descendants = getAllDescendants(childId, state);
    return descendants.includes(parentId);

  } catch (error) {
    console.error('‚ùå hasCyclicDependency: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error);
    return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
  }
}

/**
 * –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
 * @param {Array} allObjects - –í—Å–µ –æ–±—ä–µ–∫—Ç—ã
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
export function findCyclicDependencies(allObjects) {
  const errors = [];
  
  try {
    allObjects.forEach(obj => {
      if (obj.parentId) {
        const path = getObjectPath(obj.id, allObjects);
        if (path.includes(obj.id)) {
          errors.push(new HierarchyValidationError(
            VALIDATION_ERROR_TYPES.CYCLIC_DEPENDENCY,
            `–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤ –ø—É—Ç–∏: ${path.join(' ‚Üí ')}`,
            obj.id
          ));
        }
      }
    });

  } catch (error) {
    console.error('‚ùå findCyclicDependencies: –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error);
  }

  return errors;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @param {Array} allObjects - –í—Å–µ –æ–±—ä–µ–∫—Ç—ã
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export function validatePerformanceLimits(allObjects) {
  const errors = [];
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π —É –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
    allObjects.forEach(obj => {
      if (obj.children) {
        const totalChildren = Object.values(obj.children).reduce((sum, arr) => sum + arr.length, 0);
        if (totalChildren > PERFORMANCE_LIMITS.MAX_CHILDREN_PER_PARENT) {
          errors.push(new HierarchyValidationError(
            VALIDATION_ERROR_TYPES.MISSING_OBJECT,
            `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π: ${totalChildren} > ${PERFORMANCE_LIMITS.MAX_CHILDREN_PER_PARENT}`,
            obj.id
          ));
        }
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É –∏–µ—Ä–∞—Ä—Ö–∏–∏
    allObjects.forEach(obj => {
      const depth = getObjectDepth(obj.id, allObjects);
      if (depth > PERFORMANCE_LIMITS.MAX_HIERARCHY_DEPTH) {
        errors.push(new HierarchyValidationError(
          VALIDATION_ERROR_TYPES.MISSING_OBJECT,
          `–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏: ${depth} > ${PERFORMANCE_LIMITS.MAX_HIERARCHY_DEPTH}`,
          obj.id
        ));
      }
    });

  } catch (error) {
    console.error('‚ùå validatePerformanceLimits: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', error);
  }

  return errors;
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @param {Array} errors - –ú–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫
 * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export function fixValidationErrors(errors, state) {
  const result = {
    fixed: 0,
    failed: 0,
    details: []
  };

  try {
    console.log(`üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${errors.length} –æ—à–∏–±–æ–∫...`);

    errors.forEach(error => {
      try {
        switch (error.type) {
          case VALIDATION_ERROR_TYPES.CYCLIC_DEPENDENCY:
            // –£–¥–∞–ª—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é —Å–≤—è–∑—å
            if (error.objectId) {
              const obj = findObjectById(state, error.objectId);
              if (obj) {
                obj.parentId = null;
                result.fixed++;
                result.details.push(`–£–¥–∞–ª–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å –¥–ª—è ${error.objectId}`);
              }
            }
            break;

          case VALIDATION_ERROR_TYPES.ORPHANED_OBJECT:
            // –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å–≤—è–∑—å
            if (error.childId) {
              const child = findObjectById(state, error.childId);
              if (child) {
                child.parentId = null;
                result.fixed++;
                result.details.push(`–£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è ${error.childId}`);
              }
            }
            break;

          case VALIDATION_ERROR_TYPES.MISSING_OBJECT:
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            if (error.objectId) {
              const obj = findObjectById(state, error.objectId);
              if (obj) {
                const objType = getObjectType(obj);
                initHierarchyFields(obj, objType);
                result.fixed++;
                result.details.push(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–ª—è ${error.objectId}`);
              }
            }
            break;

          default:
            result.failed++;
            result.details.push(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É: ${error.type}`);
        }
      } catch (fixError) {
        result.failed++;
        result.details.push(`–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${fixError.message}`);
      }
    });

    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.fixed}, –ù–µ —É–¥–∞–ª–æ—Å—å: ${result.failed}`);

  } catch (error) {
    console.error('‚ùå fixValidationErrors: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
    result.failed = errors.length;
    result.details.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  }

  return result;
}

// –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ state.js
import { findObjectById, getObjectType } from '../state.js';

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
 * @param {string} parentId - ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 * @param {Array} allObjects - –í—Å–µ –æ–±—ä–µ–∫—Ç—ã
 * @returns {Array} –ú–∞—Å—Å–∏–≤ ID –ø–æ—Ç–æ–º–∫–æ–≤
 */
function getAllDescendants(parentId, stateOrAll) {
  try {
    const isState = !!(stateOrAll && (Array.isArray(stateOrAll.domains) || Array.isArray(stateOrAll.projects)));
    const allObjects = isState
      ? [
          ...(stateOrAll.domains || []),
          ...(stateOrAll.projects || []),
          ...(stateOrAll.tasks || []),
          ...(stateOrAll.ideas || []),
          ...(stateOrAll.notes || [])
        ]
      : (Array.isArray(stateOrAll) ? stateOrAll : []);

    const byId = new Map(allObjects.map(o => [o.id, o]));
    const start = isState ? findObjectById(stateOrAll, parentId) : byId.get(parentId);
    if (!start) return [];

    const result = [];
    const queue = [parentId];
    const seen = new Set([parentId]);

    while (queue.length) {
      const curId = queue.shift();
      const cur = isState ? findObjectById(stateOrAll, curId) : byId.get(curId);
      if (!cur || !cur.children) continue;
      const childIds = Object.values(cur.children).reduce((sum, arr) => sum.concat(arr), []);
      for (const cid of childIds) {
        if (seen.has(cid)) continue;
        seen.add(cid);
        result.push(cid);
        queue.push(cid);
      }
    }

    return result;
  } catch (_) {
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –æ–±—ä–µ–∫—Ç—É (–∑–∞–≥–ª—É—à–∫–∞)
 * @param {string} objId - ID –æ–±—ä–µ–∫—Ç–∞
 * @param {Array} allObjects - –í—Å–µ –æ–±—ä–µ–∫—Ç—ã
 * @returns {Array} –ú–∞—Å—Å–∏–≤ ID –ø—É—Ç–∏
 */
function getObjectPath(objId, allObjects) {
  try {
    const byId = new Map((allObjects || []).map(o => [o.id, o]));
    const path = [objId];
    let cur = byId.get(objId);
    const visited = new Set([objId]);
    while (cur && cur.parentId) {
      path.push(cur.parentId);
      if (visited.has(cur.parentId)) break; // —Ü–∏–∫–ª
      visited.add(cur.parentId);
      cur = byId.get(cur.parentId);
    }
    return path;
  } catch (_) {
    return [objId];
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –æ–±—ä–µ–∫—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
 * @param {string} objId - ID –æ–±—ä–µ–∫—Ç–∞
 * @param {Array} allObjects - –í—Å–µ –æ–±—ä–µ–∫—Ç—ã
 * @returns {number} –ì–ª—É–±–∏–Ω–∞
 */
function getObjectDepth(objId, allObjects) {
  try {
    const byId = new Map((allObjects || []).map(o => [o.id, o]));
    let depth = 0;
    let cur = byId.get(objId);
    const visited = new Set();
    while (cur && cur.parentId) {
      if (visited.has(cur.id)) break; // –∑–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤
      visited.add(cur.id);
      depth++;
      cur = byId.get(cur.parentId);
    }
    return depth;
  } catch (_) {
    return 0;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—ä–µ–∫—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
 * @param {Object} obj - –û–±—ä–µ–∫—Ç
 * @param {string} lockType - –¢–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
 * @returns {boolean} –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–±—ä–µ–∫—Ç
 */
function isObjectLocked(obj, lockType) {
  // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å state.js
  return obj.locks && obj.locks[lockType] === true;
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
 * @param {Object} obj - –û–±—ä–µ–∫—Ç
 * @param {string} type - –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
 */
function initHierarchyFields(obj, type) {
  // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å core.js
  if (!obj.parentId) obj.parentId = null;
  if (!obj.children) obj.children = { projects: [], tasks: [], ideas: [], notes: [] };
  if (!obj.locks) obj.locks = { move: false, hierarchy: false };
  if (!obj.constraints) obj.constraints = { maxRadius: 50, orbitRadius: 30, autoLayout: false };
  return obj;
}

// –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã—à–µ
