// js/inspector.js
import {
  state,
  byId,
  project,
  domainOf,
  tasksOfProject,
  daysSince,
  statusPill,
  getProjectColor,
  getRandomProjectColor,
  getContrastColor,
  PROJECT_COLOR_PRESETS,
  getChildObjects,
  getParentObject,
  findObjectById,
  getObjectType,
  byTypeAndId,
  canChangeHierarchy,
  attachObjectToParent,
  detachObjectFromParent,
  getAvailableParents,
  createChecklist,
  getChecklistsOfProject,
  getChecklistProgress,
  createProject,
  createTask
} from "./state.js";
import { saveState } from "./storage.js";
import { normalizeType, normalizeId } from "./utils/normalize.js";
import { getParentObjectFallback } from "./inspector/utils.js";

// view_map helpers are accessed via window.mapApi to avoid circular import issues
function drawMap() {
  return window.mapApi && window.mapApi.drawMap && window.mapApi.drawMap();
}
function requestLayout() {
  return window.mapApi && window.mapApi.requestLayout && window.mapApi.requestLayout();
}
function refreshMap(opts){
  return window.mapApi && window.mapApi.refresh && window.mapApi.refresh(opts||{});
}
function getPendingAttach() {
  return (
    window.mapApi &&
    window.mapApi.getPendingAttach &&
    window.mapApi.getPendingAttach()
  );
}
function confirmAttach() {
  return (
    window.mapApi &&
    window.mapApi.confirmAttach &&
    window.mapApi.confirmAttach()
  );
}
function cancelAttach() {
  return (
    window.mapApi && window.mapApi.cancelAttach && window.mapApi.cancelAttach()
  );
}

// Fallback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
function getChildObjectsFallback(obj) {
  if (!obj) return { projects: [], tasks: [], ideas: [], notes: [], checklists: [] };
  
  const children = { projects: [], tasks: [], ideas: [], notes: [], checklists: [] };
  
  if (obj._type === 'domain') {
    // –ü—Ä–æ–µ–∫—Ç—ã –≤ –¥–æ–º–µ–Ω–µ
    children.projects = state.projects.filter(p => p.domainId === obj.id);
    
    // –ó–∞–¥–∞—á–∏ –≤ –¥–æ–º–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –¥–æ–º–µ–Ω–∞)
    const domainProjectIds = children.projects.map(p => p.id);
    children.tasks = state.tasks.filter(t => 
      t.domainId === obj.id || 
      (t.projectId && domainProjectIds.includes(t.projectId))
    );
    
    // –ò–¥–µ–∏ –≤ –¥–æ–º–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –≤—Å–µ –∏–¥–µ–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –¥–æ–º–µ–Ω–∞)
    children.ideas = state.ideas.filter(i => 
      i.domainId === obj.id || 
      (i.projectId && domainProjectIds.includes(i.projectId))
    );
    
    // –ó–∞–º–µ—Ç–∫–∏ –≤ –¥–æ–º–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –¥–æ–º–µ–Ω–∞)
    children.notes = state.notes.filter(n => 
      n.domainId === obj.id || 
      (n.projectId && domainProjectIds.includes(n.projectId))
    );
    
    // –ß–µ–∫-–ª–∏—Å—Ç—ã –≤ –¥–æ–º–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –≤—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –¥–æ–º–µ–Ω–∞)
    children.checklists = state.checklists.filter(c => 
      c.domainId === obj.id || 
      (c.projectId && domainProjectIds.includes(c.projectId))
    );
  }
  
  if (obj._type === 'project') {
    // –ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    children.tasks = state.tasks.filter(t => t.projectId === obj.id);
    
    // –ò–¥–µ–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    children.ideas = state.ideas.filter(i => i.projectId === obj.id);
    
    // –ó–∞–º–µ—Ç–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    children.notes = state.notes.filter(n => n.projectId === obj.id);
    
    // –ß–µ–∫-–ª–∏—Å—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
    children.checklists = state.checklists.filter(c => c.projectId === obj.id);
  }
  
  return children;
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ (—Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏) –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
function buildHierarchyPath(obj) {
  if (!obj) return [];
  const parts = [];
  try {
    if (obj._type === 'task') {
      const proj = obj.projectId ? state.projects.find(p => p.id === obj.projectId) : null;
      const dom = obj.domainId
        ? state.domains.find(d => d.id === obj.domainId)
        : (proj ? state.domains.find(d => d.id === proj.domainId) : null);
      if (dom) parts.push({ type: 'domain', title: dom.title });
      if (proj) parts.push({ type: 'project', title: proj.title });
      parts.push({ type: 'task', title: obj.title });
      return parts;
    }
    if (obj._type === 'project') {
      const dom = obj.domainId ? state.domains.find(d => d.id === obj.domainId) : null;
      if (dom) parts.push({ type: 'domain', title: dom.title });
      parts.push({ type: 'project', title: obj.title });
      return parts;
    }
    if (obj._type === 'idea' || obj._type === 'note') {
      const proj = obj.projectId ? state.projects.find(p => p.id === obj.projectId) : null;
      const dom = obj.domainId
        ? state.domains.find(d => d.id === obj.domainId)
        : (proj ? state.domains.find(d => d.id === proj.domainId) : null);
      if (dom) parts.push({ type: 'domain', title: dom.title });
      if (proj) parts.push({ type: 'project', title: proj.title });
      parts.push({ type: obj._type, title: obj.title });
      return parts;
    }
    if (obj._type === 'domain') {
      parts.push({ type: 'domain', title: obj.title });
      return parts;
    }
  } catch (_) {}
  return [{ type: obj._type || 'object', title: obj.title || '–û–±—ä–µ–∫—Ç' }];
}

function renderPathBreadcrumb(obj) {
  const path = buildHierarchyPath(obj);
  if (!path || path.length === 0) return '';
  const label = path
    .map(p => {
      const t = p.type === 'domain' ? '–î–æ–º–µ–Ω'
              : p.type === 'project' ? '–ü—Ä–æ–µ–∫—Ç'
              : p.type === 'task' ? '–ó–∞–¥–∞—á–∞'
              : p.type === 'idea' ? '–ò–¥–µ—è'
              : p.type === 'note' ? '–ó–∞–º–µ—Ç–∫–∞' : '–û–±—ä–µ–∫—Ç';
      return `${t} "${p.title}"`;
    })
    .join(' ‚Üí ');
  return `
    <div class="hierarchy-item path">
      <span class="hierarchy-icon">üß≠</span>
      <span class="hierarchy-label">–ü—É—Ç—å:</span>
      <span class="hierarchy-value">${label}</span>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –æ–±—ä–µ–∫—Ç–∞
function renderHierarchySection(obj) {
  if (!obj) return '';
  
  const children = getChildObjectsFallback(obj);
  const parent = getParentObjectFallback(obj);
  
  let html = `
    <div class="section">
      <h3>üåê –ò–µ—Ä–∞—Ä—Ö–∏—è</h3>
      <div class="hierarchy-info">
  `;
  
  // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å (—Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏)
  html += renderPathBreadcrumb(obj);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
  if (parent) {
    const parentType = parent._type === 'domain' ? '–î–æ–º–µ–Ω' : 
                      parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : 
                      parent._type === 'idea' ? '–ò–¥–µ—è' : 
                      parent._type === 'note' ? '–ó–∞–º–µ—Ç–∫–∞' : '–û–±—ä–µ–∫—Ç';
    html += `
      <div class="hierarchy-item parent">
        <span class="hierarchy-icon">‚¨ÜÔ∏è</span>
        <span class="hierarchy-label">–†–æ–¥–∏—Ç–µ–ª—å:</span>
        <span class="hierarchy-value">${parentType} "${parent.title}"</span>
      </div>
    `;
  } else {
    html += `
      <div class="hierarchy-item parent">
        <span class="hierarchy-icon">üåå</span>
        <span class="hierarchy-label">–°—Ç–∞—Ç—É—Å:</span>
        <span class="hierarchy-value">–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –æ–±—ä–µ–∫—Ç</span>
      </div>
    `;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–µ–π
  if (children && Object.keys(children).length > 0) {
    html += `
      <div class="hierarchy-item children">
        <span class="hierarchy-icon">‚¨áÔ∏è</span>
        <span class="hierarchy-label">–î–µ—Ç–∏:</span>
        <div class="children-list">
    `;
    
    Object.keys(children).forEach(childType => {
      const childIds = children[childType] || [];
      if (childIds.length > 0) {
        const typeLabel = childType === 'projects' ? '–ü—Ä–æ–µ–∫—Ç—ã' :
                         childType === 'tasks' ? '–ó–∞–¥–∞—á–∏' :
                         childType === 'ideas' ? '–ò–¥–µ–∏' :
                         childType === 'notes' ? '–ó–∞–º–µ—Ç–∫–∏' :
                         childType === 'checklists' ? '–ß–µ–∫-–ª–∏—Å—Ç—ã' : childType;
        html += `
          <div class="child-type">
            <span class="child-count">${childIds.length}</span>
            <span class="child-label">${typeLabel}</span>
          </div>
        `;
      }
    });
    
    html += `
        </div>
      </div>
    `;
  } else {
    html += `
      <div class="hierarchy-item children">
        <span class="hierarchy-icon">üå±</span>
        <span class="hierarchy-label">–î–µ—Ç–∏:</span>
        <span class="hierarchy-value">–ù–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤</span>
      </div>
    `;
  }
  
  html += `
      </div>
      
      ${renderHierarchyActions(obj)}
    </div>
  `;
  
  return html;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
function renderHierarchyActions(obj) {
  if (!obj) return '';
  
  const parent = getParentObjectFallback(obj);
  const canChange = canChangeHierarchy(obj);
  
  if (!canChange) {
    return '<div class="hierarchy-actions disabled">üîí –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</div>';
  }
  
  let html = '<div class="hierarchy-actions">';
  
  // –ö–Ω–æ–ø–∫–∞ –æ—Ç–≤—è–∑–∫–∏ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
  if (parent) {
    html += `
      <button class="btn small danger" id="detachFromParent">
        üîó –û—Ç–≤—è–∑–∞—Ç—å –æ—Ç "${parent.title}"
      </button>
    `;
  }
  
  // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –Ω–æ–≤–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é
  const availableParents = getAvailableParents(obj);
  if (availableParents.length > 0) {
    html += `
      <button class="btn small primary" id="attachToParent">
        üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
      </button>
    `;
  }
  
  html += '</div>';
  return html;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
function setupHierarchyActionHandlers(obj) {
  const detachBtn = document.getElementById('detachFromParent');
  if (detachBtn) {
    detachBtn.onclick = () => {
      const parent = getParentObjectFallback(obj);
      if (parent && confirm(`–û—Ç–≤—è–∑–∞—Ç—å "${obj.title}" –æ—Ç "${parent.title}"?`)) {
        detachObjectFromParent(obj);
        saveState();
        refreshMap();
        openInspectorFor(obj);
      }
    };
  }
  
  const attachBtn = document.getElementById('attachToParent');
  if (attachBtn) {
    attachBtn.onclick = () => {
      const availableParents = getAvailableParents(obj);
      if (availableParents.length === 0) return;
      
      const options = availableParents.map(p => `${p._type === 'domain' ? '–î–æ–º–µ–Ω' : '–ü—Ä–æ–µ–∫—Ç'}: ${p.title}`).join('\n');
      const choice = prompt(`–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—è (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n${availableParents.map((p, i) => `${i + 1}. ${p._type === 'domain' ? '–î–æ–º–µ–Ω' : '–ü—Ä–æ–µ–∫—Ç'}: ${p.title}`).join('\n')}`);
      
      if (choice) {
        const index = parseInt(choice) - 1;
        if (index >= 0 && index < availableParents.length) {
          const selectedParent = availableParents[index];
          attachObjectToParent(obj, selectedParent);
          saveState();
          refreshMap();
          openInspectorFor(obj);
        }
      }
    };
  }
}

export function openInspectorFor(objOrSel, state = window.state) {
  if (!objOrSel) return showPlaceholder();

  // objOrSel –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∏ {type,id}
  const type = normalizeType(objOrSel._type ?? objOrSel.type ?? objOrSel.kind);
  const id = normalizeId(objOrSel.id ?? objOrSel._id);
  const obj = (objOrSel.title || objOrSel.name)
    ? objOrSel
    : byTypeAndId(type, id) ?? objOrSel;

  console.debug('[inspector:open]', { type, id, hasObj: !!(obj && (obj.title||obj.name)) });

  if (!obj) return showPlaceholder();

  const ins = document.getElementById("inspector");
  if (!ins) return;

  switch (type) {
    case 'domain':   return showDomainInspector(obj, ins);
    case 'project':  return showProjectInspector(obj, ins);
    case 'task':     return showTaskInspector(obj, ins);
    case 'idea':     return showIdeaInspector(obj, ins);
    case 'note':     return showNoteInspector(obj, ins);
    case 'checklist': return showChecklistInspector(obj, ins);
    default: {
      // fallback: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ parentId
      const parent = getParentObjectFallback(obj, state);
      if (parent) return openInspectorFor(parent, state);
      return showPlaceholder();
    }
  }
}

function showPlaceholder() {
  const ins = document.getElementById("inspector");
  if (ins) {
    ins.innerHTML = `<div class="hint">–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏.</div>`;
  }
}

function showDomainInspector(obj, ins) {
  const prjs = state.projects.filter((p) => p.domainId === obj.id);
  const totalTasks = prjs.reduce(
    (a, p) => a + tasksOfProject(p.id).length,
    0
  );
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (!obj.locks) {
    obj.locks = { move: false, hierarchy: false };
  }
  
  ins.innerHTML = `
    <h2>–î–æ–º–µ–Ω: ${obj.title}</h2>
    <div class="kv">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${obj.mood || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'}</div>
    <div class="kv">–ü—Ä–æ–µ–∫—Ç–æ–≤: ${prjs.length} ¬∑ –ó–∞–¥–∞—á: ${totalTasks}</div>
    
    <div class="section">
      <h3>üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏</h3>
      <div class="locks">
        <label class="lock-item">
          <input type="checkbox" id="lockMove" ${obj.locks.move ? 'checked' : ''}>
          <span>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</span>
        </label>
        <label class="lock-item">
          <input type="checkbox" id="lockHierarchy" ${obj.locks.hierarchy ? 'checked' : ''}>
          <span>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–º–µ–Ω—ã —Å–≤—è–∑–µ–π</span>
        </label>
      </div>
    </div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="addProject">+ –ü—Ä–æ–µ–∫—Ç</button>
      <button class="btn danger" id="delDomain">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω</button>
    </div>
    <div class="list">${prjs
      .map(
        (p) => `
      <div class="card">
        <div><strong>${p.title}</strong></div>
        <div class="meta">#${(p.tags || []).join(" #")}</div>
        <div class="meta">–ó–∞–¥–∞—á: ${tasksOfProject(p.id).length}</div>
      </div>
    `
      )
      .join("")}</div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("addProject").onclick = () => {
    const title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:", "–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç");
    if (!title) return;
    const id = "p" + Math.random().toString(36).slice(2, 8);
    state.projects.push({
      id,
      domainId: obj.id,
      title,
      tags: [],
      createdAt: Date.now(),
      updatedAt: Date.now(),
    });
    saveState();
    refreshMap({ layout: true });
    openInspectorFor(obj);
  };
  
  document.getElementById("delDomain").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω "${obj.title}" –∏ –≤—Å–µ –µ–≥–æ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞–¥–∞—á–∏?`)) {
      // Remove all projects and tasks in this domain
      const projIds = state.projects.filter((p) => p.domainId === obj.id).map((p) => p.id);
      state.tasks = state.tasks.filter((t) => !projIds.includes(t.projectId));
      state.projects = state.projects.filter((p) => p.domainId !== obj.id);
      state.domains = state.domains.filter((d) => d.id !== obj.id);
      
      // Clear active domain to show entire project instead of focusing on remaining domain
      state.activeDomain = null;
      
      saveState();
      
      // Force layout and redraw
      if (window.layoutMap) window.layoutMap();
      if (window.drawMap) window.drawMap();
      
      openInspectorFor(null);
      
      // Update UI
      if (window.updateDomainsList) window.updateDomainsList();
      if (window.updateStatistics) window.updateStatistics();
      if (window.renderToday) window.renderToday();
      if (window.renderSidebar) window.renderSidebar();
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  document.getElementById("lockMove").onchange = (e) => {
    obj.locks.move = e.target.checked;
    saveState();
    refreshMap();
  };
  
  document.getElementById("lockHierarchy").onchange = (e) => {
    obj.locks.hierarchy = e.target.checked;
    saveState();
    refreshMap();
  };
  
  setupHierarchyActionHandlers(obj);
}

function showProjectInspector(obj, ins) {
  const tks = tasksOfProject(obj.id);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (!obj.locks) {
    obj.locks = { move: false, hierarchy: false };
  }
  
  ins.innerHTML = `
    <h2>–ü—Ä–æ–µ–∫—Ç: ${obj.title}</h2>
    <div class="kv">–î–æ–º–µ–Ω: ${domainOf(obj)?.title || '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π'}</div>
    <div class="kv">–¢–µ–≥–∏: #${(obj.tags || []).join(" #")}</div>
    <div class="kv">–ó–∞–¥–∞—á: ${tks.length}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    <div class="section">
      <h3>üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏</h3>
      <div class="locks">
        <label class="lock-item">
          <input type="checkbox" id="lockMove" ${obj.locks.move ? 'checked' : ''}>
          <span>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</span>
        </label>
        <label class="lock-item">
          <input type="checkbox" id="lockHierarchy" ${obj.locks.hierarchy ? 'checked' : ''}>
          <span>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–º–µ–Ω—ã —Å–≤—è–∑–µ–π</span>
        </label>
      </div>
    </div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="addTask">+ –ó–∞–¥–∞—á–∞</button>
      <button class="btn" id="addChecklist">‚úì –ß–µ–∫-–ª–∏—Å—Ç</button>
      <button class="btn danger" id="delProject">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("addTask").onclick = () => {
    const title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
    if (title) {
      const task = createTask(title, obj.id);
      requestLayout();
      openInspectorFor(task);
    }
  };
  
  document.getElementById("addChecklist").onclick = () => {
    const title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞:");
    if (title) {
      const checklist = createChecklist(title, obj.id);
      requestLayout();
      openInspectorFor(checklist);
    }
  };
  
  document.getElementById("delProject").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "${obj.title}" –∏ –≤—Å–µ –µ–≥–æ –∑–∞–¥–∞—á–∏?`)) {
      state.projects = state.projects.filter(p => p.id !== obj.id);
      state.tasks = state.tasks.filter(t => t.projectId !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
  document.getElementById("lockMove").onchange = (e) => {
    obj.locks.move = e.target.checked;
    saveState();
    refreshMap();
  };
  
  document.getElementById("lockHierarchy").onchange = (e) => {
    obj.locks.hierarchy = e.target.checked;
    saveState();
    refreshMap();
  };
  
  setupHierarchyActionHandlers(obj);
}

function showTaskInspector(obj, ins) {
  const pending = getPendingAttach();
  const pendForThis = pending && pending.taskId === obj.id;
  const task = state.tasks.find(t => t.id === obj.id);
  
  ins.innerHTML = `
    <h2>–ó–∞–¥–∞—á–∞</h2>
    
    <!-- Title editing -->
    <div class="kv">
      <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
      <div class="title-edit-container" style="display: flex; gap: 4px; margin-top: 4px; align-items: center;">
        <input type="text" id="taskTitle" value="${obj.title}" style="flex: 1; padding: 4px 8px; border: 1px solid var(--panel-2); border-radius: 4px; background: var(--panel-1); color: var(--text);">
        <button id="editTitle" class="btn-small" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" style="padding: 4px 8px; background: var(--accent); color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">‚úèÔ∏è</button>
        <button id="saveTitle" class="btn-small" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" style="padding: 4px 8px; background: var(--ok); color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px; display: none;">üíæ</button>
        <button id="cancelTitle" class="btn-small" title="–û—Ç–º–µ–Ω–∏—Ç—å" style="padding: 4px 8px; background: var(--muted); color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px; display: none;">‚ùå</button>
      </div>
    </div>
    
    <!-- Status -->
    <div class="kv">
      <label>–°—Ç–∞—Ç—É—Å:</label>
      <div class="status-buttons" style="margin-top: 4px;">
        <button class="btn ${obj.status === 'backlog' ? 'active' : ''}" data-st="backlog">–ü–ª–∞–Ω</button>
        <button class="btn ${obj.status === 'today' ? 'active' : ''}" data-st="today">–°–µ–≥–æ–¥–Ω—è</button>
        <button class="btn ${obj.status === 'doing' ? 'active' : ''}" data-st="doing">–í —Ä–∞–±–æ—Ç–µ</button>
        <button class="btn ok ${obj.status === 'done' ? 'active' : ''}" data-st="done">–ì–æ—Ç–æ–≤–æ</button>
      </div>
    </div>
    
    <!-- Priority -->
    <div class="kv">
      <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</label>
      <select id="taskPriority" style="margin-top: 4px; padding: 4px; border: 1px solid var(--panel-2); border-radius: 4px; background: var(--panel-1); color: var(--text);">
        <option value="1" ${task?.priority === 1 ? 'selected' : ''}>1 - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
        <option value="2" ${task?.priority === 2 ? 'selected' : ''}>2 - –í—ã—Å–æ–∫–∏–π</option>
        <option value="3" ${task?.priority === 3 ? 'selected' : ''}>3 - –°—Ä–µ–¥–Ω–∏–π</option>
        <option value="4" ${task?.priority === 4 ? 'selected' : ''}>4 - –ù–∏–∑–∫–∏–π</option>
      </select>
    </div>
    
    <!-- Estimate -->
    <div class="kv">
      <label>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</label>
      <input type="text" id="taskEstimate" value="${task?.estimateMin || ''}" placeholder="30–º, 1—á, 2—á 30–º" style="width: 100%; margin-top: 4px; padding: 4px; border: 1px solid var(--panel-2); border-radius: 4px; background: var(--panel-1); color: var(--text);">
    </div>
    
    <!-- Tags -->
    <div class="kv">
      <label>–¢–µ–≥–∏:</label>
      <input type="text" id="taskTags" value="${(task?.tags || []).join(', ')}" placeholder="—Ä–∞–±–æ—Ç–∞, —Å—Ä–æ—á–Ω–æ, –≤–∞–∂–Ω–æ–µ" style="width: 100%; margin-top: 4px; padding: 4px; border: 1px solid var(--panel-2); border-radius: 4px; background: var(--panel-1); color: var(--text);">
    </div>
    
    <!-- Project and Domain info -->
    <div class="kv">–ü—Ä–æ–µ–∫—Ç: ${project(obj.projectId)?.title || '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}</div>
    <div class="kv">–î–æ–º–µ–Ω: ${obj.domainId ? byId(state.domains, obj.domainId)?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–º–µ–Ω' : '–ë–µ–∑ –¥–æ–º–µ–Ω–∞'}</div>
    <div class="kv">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${daysSince(obj.updatedAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    ${renderHierarchySection(obj)}
    
    ${
      pendForThis
        ? `<div class="kv hint">–û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É: ${
            project(pending.toProjectId).title
          }</div>`
        : ""
    }
    
    <div class="btns">
      <button class="btn primary" id="saveTask">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      <button class="btn" id="mkProject">–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç–æ–º</button>
      <button class="btn warn" id="delTask">–£–¥–∞–ª–∏—Ç—å</button>
      ${
        pendForThis
          ? `<button class="btn" id="confirmAttach">–ü—Ä–∏–≤—è–∑–∞—Ç—å</button><button class="btn" id="cancelAttach">–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É</button>`
          : ""
      }
    </div>
  `;
  
  if (pendForThis) {
    document.getElementById("confirmAttach").onclick = () => {
      confirmAttach();
      openInspectorFor(obj);
    };
    document.getElementById("cancelAttach").onclick = () => {
      cancelAttach();
      openInspectorFor(obj);
    };
  }
  
  // Status buttons
  ins.querySelectorAll(".btn[data-st]").forEach((b) => {
    b.onclick = () => {
      obj.status = b.dataset.st;
      obj.updatedAt = Date.now();
      saveState();
      drawMap();
      if (window.renderToday) window.renderToday();
      openInspectorFor(obj);
    };
  });
  
  // Save task button
  document.getElementById("saveTask").onclick = () => {
    const title = document.getElementById("taskTitle").value.trim();
    const priority = parseInt(document.getElementById("taskPriority").value);
    const estimate = document.getElementById("taskEstimate").value.trim();
    const tagsText = document.getElementById("taskTags").value.trim();
    
    if (!title) {
      alert("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
      return;
    }
    
    // Update task
    obj.title = title;
    task.priority = priority;
    task.estimateMin = estimate ? parseEstimate(estimate) : null;
    task.tags = tagsText ? tagsText.split(',').map(t => t.trim()).filter(t => t) : [];
    task.updatedAt = Date.now();
    
    saveState();
    drawMap();
    if (window.renderToday) window.renderToday();
    openInspectorFor(obj);
  };
  
  // Parse estimate helper
  function parseEstimate(text) {
    const match = text.match(/(\d+)\s*(—á|–º|–º–∏–Ω|min|h|hour)/i);
    if (!match) return null;
    const value = parseInt(match[1]);
    const unit = match[2].toLowerCase();
    if (unit === '—á' || unit === 'h' || unit === 'hour') {
      return value * 60;
    } else {
      return value;
    }
  }
  
  document.getElementById("delTask").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${obj.title}"?`)) {
      state.tasks = state.tasks.filter(t => t.id !== obj.id);
      saveState();
      drawMap();
      if (window.renderToday) window.renderToday();
      showPlaceholder();
    }
  };
  
  // Handle "Make project" button
  document.getElementById("mkProject").onclick = () => {
    const domId = obj.projectId ? (state.projects.find(p=>p.id===obj.projectId)?.domainId) : (obj.domainId||state.activeDomain||state.domains[0]?.id);
    if(!domId) return;
    const pid = 'p'+Math.random().toString(36).slice(2,8);
    state.projects.push({ id:pid, domainId:domId, title: obj.title, tags:[...(obj.tags||[])], priority: obj.priority||2, createdAt:Date.now(), updatedAt:Date.now() });
    obj.projectId = pid;
    try{ if(state.settings && state.settings.layoutMode==='auto'){ delete obj.pos; } }catch(_){}
    obj.updatedAt = Date.now();
    saveState();
    refreshMap({ layout: true });
    openInspectorFor(state.projects.find(p=>p.id===pid));
  };
  
  // Handle title editing
  let originalTitle = obj.title;
  const titleInput = document.getElementById("taskTitle");
  const editBtn = document.getElementById("editTitle");
  const saveBtn = document.getElementById("saveTitle");
  const cancelBtn = document.getElementById("cancelTitle");
  
  // Initially disable input
  titleInput.disabled = true;
  
  editBtn.onclick = () => {
    originalTitle = titleInput.value;
    titleInput.disabled = false;
    titleInput.focus();
    titleInput.select();
    editBtn.style.display = 'none';
    saveBtn.style.display = 'inline-block';
    cancelBtn.style.display = 'inline-block';
  };
  
  saveBtn.onclick = () => {
    const newTitle = titleInput.value.trim();
    if (newTitle && newTitle !== obj.title) {
      obj.title = newTitle;
      obj.updatedAt = Date.now();
      saveState();
      drawMap();
      if (window.renderToday) window.renderToday();
    }
    titleInput.disabled = true;
    editBtn.style.display = 'inline-block';
    saveBtn.style.display = 'none';
    cancelBtn.style.display = 'none';
  };
  
  cancelBtn.onclick = () => {
    titleInput.value = originalTitle;
    titleInput.disabled = true;
    editBtn.style.display = 'inline-block';
    saveBtn.style.display = 'none';
    cancelBtn.style.display = 'none';
  };
  
  setupHierarchyActionHandlers(obj);
}

function showIdeaInspector(obj, ins) {
  const parent = getParentObjectFallback(obj, state);
  const parentInfo = parent ? `${parent._type === 'domain' ? '–î–æ–º–µ–Ω' : parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : '–û–±—ä–µ–∫—Ç'}: ${parent.title}` : '–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è';
  
  ins.innerHTML = `
    <h2>–ò–¥–µ—è: ${obj.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h2>
    
    <!-- Content editing -->
    <div class="kv">
      <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
      <div class="content-edit-container" style="margin-top: 4px;">
        <textarea id="ideaContent" placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ..." style="width: 100%; min-height: 60px; padding: 8px; border: 1px solid var(--panel-2); border-radius: 4px; background: var(--panel-1); color: var(--text); resize: vertical;">${obj.content || ''}</textarea>
      </div>
    </div>
    
    <!-- Visual properties -->
    <div class="kv">
      <label>–¶–≤–µ—Ç:</label>
      <div class="color-picker" style="margin-top: 4px;">
        <input type="color" id="ideaColor" value="${obj.color}" style="width: 40px; height: 30px; border: none; border-radius: 4px; cursor: pointer;">
        <div class="color-presets" style="display: flex; gap: 4px; margin-left: 8px;">
          <div class="color-preset" data-color="#ff6b6b" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–ö—Ä–∞—Å–Ω—ã–π"></div>
          <div class="color-preset" data-color="#4ecdc4" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–ë–∏—Ä—é–∑–æ–≤—ã–π"></div>
          <div class="color-preset" data-color="#45b7d1" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–°–∏–Ω–∏–π"></div>
          <div class="color-preset" data-color="#96ceb4" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–ó–µ–ª–µ–Ω—ã–π"></div>
          <div class="color-preset" data-color="#feca57" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–ñ–µ–ª—Ç—ã–π"></div>
          <div class="color-preset" data-color="#ff9ff3" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–†–æ–∑–æ–≤—ã–π"></div>
        </div>
      </div>
    </div>
    
    <div class="kv">
      <label>–†–∞–∑–º–µ—Ä:</label>
      <div style="display: flex; align-items: center; gap: 8px; margin-top: 4px;">
        <input type="range" id="ideaSize" min="10" max="40" value="${obj.r}" style="flex: 1;">
        <span id="ideaSizeValue" style="min-width: 40px; font-size: 12px;">${obj.r}px</span>
      </div>
    </div>
    
    <div class="kv">
      <label>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</label>
      <div style="display: flex; align-items: center; gap: 8px; margin-top: 4px;">
        <input type="range" id="ideaOpacity" min="0.1" max="1" step="0.1" value="${obj.opacity}" style="flex: 1;">
        <span id="ideaOpacityValue" style="min-width: 40px; font-size: 12px;">${Math.round(obj.opacity * 100)}%</span>
      </div>
    </div>
    
    <div class="kv">–†–æ–¥–∏—Ç–µ–ª—å: ${parentInfo}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω–æ: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    <div class="kv">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${daysSince(obj.updatedAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="saveIdea">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      <button class="btn" id="editIdeaAdvanced">‚úèÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
      <button class="btn danger" id="delIdea">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("saveIdea").onclick = () => {
    const content = document.getElementById("ideaContent").value.trim();
    const color = document.getElementById("ideaColor").value;
    const size = parseInt(document.getElementById("ideaSize").value);
    const opacity = parseFloat(document.getElementById("ideaOpacity").value);
    
    obj.content = content;
    obj.color = color;
    obj.r = size;
    obj.opacity = opacity;
    obj.updatedAt = Date.now();
    
    saveState();
    drawMap();
    openInspectorFor(obj);
  };
  
  document.getElementById("editIdeaAdvanced").onclick = () => {
    if (window.showIdeaEditor) {
      window.showIdeaEditor(obj);
    }
  };
  
  document.getElementById("delIdea").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∏–¥–µ—é "${obj.title}"?`)) {
      state.ideas = state.ideas.filter(i => i.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
  document.querySelectorAll('.color-preset').forEach(preset => {
    preset.addEventListener('click', () => {
      const color = preset.dataset.color;
      document.getElementById('ideaColor').value = color;
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤
  document.getElementById('ideaSize').addEventListener('input', (e) => {
    document.getElementById('ideaSizeValue').textContent = e.target.value + 'px';
  });
  
  document.getElementById('ideaOpacity').addEventListener('input', (e) => {
    document.getElementById('ideaOpacityValue').textContent = Math.round(e.target.value * 100) + '%';
  });
  
  setupHierarchyActionHandlers(obj);
}

function showNoteInspector(obj, ins) {
  const parent = getParentObjectFallback(obj, state);
  const parentInfo = parent ? `${parent._type === 'domain' ? '–î–æ–º–µ–Ω' : parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : parent._type === 'task' ? '–ó–∞–¥–∞—á–∞' : '–û–±—ä–µ–∫—Ç'}: ${parent.title}` : '–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è';
  
  ins.innerHTML = `
    <h2>–ó–∞–º–µ—Ç–∫–∞: ${obj.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h2>
    
    <!-- Content editing -->
    <div class="kv">
      <label>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
      <div class="content-edit-container" style="margin-top: 4px;">
        <textarea id="noteText" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏..." style="width: 100%; min-height: 80px; padding: 8px; border: 1px solid var(--panel-2); border-radius: 4px; background: var(--panel-1); color: var(--text); resize: vertical;">${obj.text || ''}</textarea>
      </div>
    </div>
    
    <!-- Visual properties -->
    <div class="kv">
      <label>–¶–≤–µ—Ç:</label>
      <div class="color-picker" style="margin-top: 4px;">
        <input type="color" id="noteColor" value="${obj.color}" style="width: 40px; height: 30px; border: none; border-radius: 4px; cursor: pointer;">
        <div class="color-presets" style="display: flex; gap: 4px; margin-left: 8px;">
          <div class="color-preset" data-color="#6b7280" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–°–µ—Ä—ã–π"></div>
          <div class="color-preset" data-color="#4b5563" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π"></div>
          <div class="color-preset" data-color="#374151" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–û—á–µ–Ω—å —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π"></div>
          <div class="color-preset" data-color="#1f2937" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–ü–æ—á—Ç–∏ —á–µ—Ä–Ω—ã–π"></div>
          <div class="color-preset" data-color="#059669" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–ó–µ–ª–µ–Ω—ã–π"></div>
          <div class="color-preset" data-color="#dc2626" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–ö—Ä–∞—Å–Ω—ã–π"></div>
        </div>
      </div>
    </div>
    
    <div class="kv">
      <label>–†–∞–∑–º–µ—Ä:</label>
      <div style="display: flex; align-items: center; gap: 8px; margin-top: 4px;">
        <input type="range" id="noteSize" min="8" max="30" value="${obj.r}" style="flex: 1;">
        <span id="noteSizeValue" style="min-width: 40px; font-size: 12px;">${obj.r}px</span>
      </div>
    </div>
    
    <div class="kv">
      <label>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</label>
      <div style="display: flex; align-items: center; gap: 8px; margin-top: 4px;">
        <input type="range" id="noteOpacity" min="0.1" max="1" step="0.1" value="${obj.opacity}" style="flex: 1;">
        <span id="noteOpacityValue" style="min-width: 40px; font-size: 12px;">${Math.round(obj.opacity * 100)}%</span>
      </div>
    </div>
    
    <div class="kv">–†–æ–¥–∏—Ç–µ–ª—å: ${parentInfo}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω–æ: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    <div class="kv">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${daysSince(obj.updatedAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="saveNote">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      <button class="btn" id="editNoteAdvanced">‚úèÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
      <button class="btn danger" id="delNote">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("saveNote").onclick = () => {
    const text = document.getElementById("noteText").value.trim();
    const color = document.getElementById("noteColor").value;
    const size = parseInt(document.getElementById("noteSize").value);
    const opacity = parseFloat(document.getElementById("noteOpacity").value);
    
    obj.text = text;
    obj.color = color;
    obj.r = size;
    obj.opacity = opacity;
    obj.updatedAt = Date.now();
    
    saveState();
    drawMap();
    openInspectorFor(obj);
  };
  
  document.getElementById("editNoteAdvanced").onclick = () => {
    if (window.showNoteEditor) {
      window.showNoteEditor(obj);
    }
  };
  
  document.getElementById("delNote").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É "${obj.title}"?`)) {
      state.notes = state.notes.filter(n => n.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
  document.querySelectorAll('.color-preset').forEach(preset => {
    preset.addEventListener('click', () => {
      const color = preset.dataset.color;
      document.getElementById('noteColor').value = color;
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤
  document.getElementById('noteSize').addEventListener('input', (e) => {
    document.getElementById('noteSizeValue').textContent = e.target.value + 'px';
  });
  
  document.getElementById('noteOpacity').addEventListener('input', (e) => {
    document.getElementById('noteOpacityValue').textContent = Math.round(e.target.value * 100) + '%';
  });
  
  setupHierarchyActionHandlers(obj);
}

function showChecklistInspector(obj, ins) {
  const parent = getParentObjectFallback(obj, state);
  const parentInfo = parent ? `${parent._type === 'domain' ? '–î–æ–º–µ–Ω' : parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : parent._type === 'task' ? '–ó–∞–¥–∞—á–∞' : '–û–±—ä–µ–∫—Ç'}: ${parent.title}` : '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π';
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  const totalItems = obj.items?.length || 0;
  const completedItems = obj.items?.filter(item => item.completed) || [];
  const progress = totalItems > 0 ? Math.round((completedItems.length / totalItems) * 100) : 0;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞
  const itemsHtml = obj.items && obj.items.length > 0 ? 
    obj.items.map(item => `
      <div class="checklist-item-preview" style="display: flex; align-items: center; gap: 8px; padding: 4px 0; border-bottom: 1px solid var(--panel-2);">
        <input type="checkbox" ${item.completed ? 'checked' : ''} disabled style="margin: 0;">
        <span style="flex: 1; ${item.completed ? 'text-decoration: line-through; opacity: 0.6;' : ''}">${item.text || '–ü—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç'}</span>
      </div>
    `).join('') : 
    '<div style="color: var(--muted); font-style: italic; padding: 8px 0;">–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤</div>';
  
  ins.innerHTML = `
    <h2>–ß–µ–∫-–ª–∏—Å—Ç: ${obj.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h2>
    
    <!-- Progress -->
    <div class="kv">
      <label>–ü—Ä–æ–≥—Ä–µ—Å—Å:</label>
      <div style="margin-top: 4px;">
        <div style="display: flex; align-items: center; gap: 8px;">
          <div style="flex: 1; height: 8px; background: var(--panel-2); border-radius: 4px; overflow: hidden;">
            <div style="height: 100%; background: var(--ok); width: ${progress}%; transition: width 0.3s ease;"></div>
          </div>
          <span style="min-width: 60px; font-size: 12px; font-weight: bold;">${progress}%</span>
        </div>
        <div style="font-size: 12px; color: var(--muted); margin-top: 2px;">${completedItems.length} –∏–∑ ${totalItems} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
      </div>
    </div>
    
    <!-- Items preview -->
    <div class="kv">
      <label>–≠–ª–µ–º–µ–Ω—Ç—ã:</label>
      <div class="checklist-items-preview" style="margin-top: 4px; max-height: 120px; overflow-y: auto; border: 1px solid var(--panel-2); border-radius: 4px; padding: 8px;">
        ${itemsHtml}
      </div>
    </div>
    
    <!-- Visual properties -->
    <div class="kv">
      <label>–¶–≤–µ—Ç:</label>
      <div class="color-picker" style="margin-top: 4px;">
        <input type="color" id="checklistColor" value="${obj.color}" style="width: 40px; height: 30px; border: none; border-radius: 4px; cursor: pointer;">
        <div class="color-presets" style="display: flex; gap: 4px; margin-left: 8px;">
          <div class="color-preset" data-color="#3b82f6" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–°–∏–Ω–∏–π"></div>
          <div class="color-preset" data-color="#10b981" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–ó–µ–ª–µ–Ω—ã–π"></div>
          <div class="color-preset" data-color="#f59e0b" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–û—Ä–∞–Ω–∂–µ–≤—ã–π"></div>
          <div class="color-preset" data-color="#ef4444" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–ö—Ä–∞—Å–Ω—ã–π"></div>
          <div class="color-preset" data-color="#8b5cf6" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–§–∏–æ–ª–µ—Ç–æ–≤—ã–π"></div>
          <div class="color-preset" data-color="#06b6d4" style="width: 20px; height: 20px; border-radius: 50%; cursor: pointer; border: 2px solid transparent;" title="–ì–æ–ª—É–±–æ–π"></div>
        </div>
      </div>
    </div>
    
    <div class="kv">
      <label>–†–∞–∑–º–µ—Ä:</label>
      <div style="display: flex; align-items: center; gap: 8px; margin-top: 4px;">
        <input type="range" id="checklistSize" min="15" max="35" value="${obj.r}" style="flex: 1;">
        <span id="checklistSizeValue" style="min-width: 40px; font-size: 12px;">${obj.r}px</span>
      </div>
    </div>
    
    <div class="kv">
      <label>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:</label>
      <div style="display: flex; align-items: center; gap: 8px; margin-top: 4px;">
        <input type="range" id="checklistOpacity" min="0.1" max="1" step="0.1" value="${obj.opacity}" style="flex: 1;">
        <span id="checklistOpacityValue" style="min-width: 40px; font-size: 12px;">${Math.round(obj.opacity * 100)}%</span>
      </div>
    </div>
    
    <div class="kv">–†–æ–¥–∏—Ç–µ–ª—å: ${parentInfo}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    <div class="kv">–û–±–Ω–æ–≤–ª–µ–Ω: ${daysSince(obj.updatedAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="saveChecklist">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
      <button class="btn" id="editChecklistAdvanced">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã</button>
      <button class="btn danger" id="delChecklist">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("saveChecklist").onclick = () => {
    const color = document.getElementById("checklistColor").value;
    const size = parseInt(document.getElementById("checklistSize").value);
    const opacity = parseFloat(document.getElementById("checklistOpacity").value);
    
    obj.color = color;
    obj.r = size;
    obj.opacity = opacity;
    obj.updatedAt = Date.now();
    
    saveState();
    drawMap();
    openInspectorFor(obj);
  };
  
  document.getElementById("editChecklistAdvanced").onclick = () => {
    if (window.showChecklistEditor) {
      window.showChecklistEditor(obj);
    }
  };
  
  document.getElementById("delChecklist").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç "${obj.title}"?`)) {
      state.checklists = state.checklists.filter(c => c.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
  document.querySelectorAll('.color-preset').forEach(preset => {
    preset.addEventListener('click', () => {
      const color = preset.dataset.color;
      document.getElementById('checklistColor').value = color;
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤
  document.getElementById('checklistSize').addEventListener('input', (e) => {
    document.getElementById('checklistSizeValue').textContent = e.target.value + 'px';
  });
  
  document.getElementById('checklistOpacity').addEventListener('input', (e) => {
    document.getElementById('checklistOpacityValue').textContent = Math.round(e.target.value * 100) + '%';
  });
  
  setupHierarchyActionHandlers(obj);
}
