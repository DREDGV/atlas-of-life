// js/inspector.js
import {
  state,
  byId,
  project,
  domainOf,
  tasksOfProject,
  daysSince,
  statusPill,
  getProjectColor,
  getRandomProjectColor,
  getContrastColor,
  PROJECT_COLOR_PRESETS,
  getChildObjects,
  getParentObject,
  findObjectById,
  getObjectType,
  byTypeAndId,
  canChangeHierarchy,
  attachObjectToParent,
  detachObjectFromParent,
  getAvailableParents,
  createChecklist,
  getChecklistsOfProject,
  getChecklistProgress,
  createProject,
  createTask,
  saveState
} from "./state.js";
import { normalizeType, normalizeId } from "./utils/normalize.js";
import { getParentObjectFallback } from "./inspector/utils.js";

// view_map helpers are accessed via window.mapApi to avoid circular import issues
function drawMap() {
  return window.mapApi && window.mapApi.drawMap && window.mapApi.drawMap();
}
function requestLayout() {
  return window.mapApi && window.mapApi.requestLayout && window.mapApi.requestLayout();
}

export function openInspectorFor(objOrSel, state = window.state) {
  if (!objOrSel) return showPlaceholder();

  // objOrSel –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∏ {type,id}
  const type = normalizeType(objOrSel._type ?? objOrSel.type ?? objOrSel.kind);
  const id = normalizeId(objOrSel.id ?? objOrSel._id);
  const obj = (objOrSel.title || objOrSel.name)
    ? objOrSel
    : byTypeAndId(type, id) ?? objOrSel;

  console.debug('[inspector:open]', { type, id, hasObj: !!(obj && (obj.title||obj.name)) });

  if (!obj) return showPlaceholder();

  const ins = document.getElementById("inspector");
  if (!ins) return;

  switch (type) {
    case 'domain':   return showDomainInspector(obj, ins);
    case 'project':  return showProjectInspector(obj, ins);
    case 'task':     return showTaskInspector(obj, ins);
    case 'idea':     return showIdeaInspector(obj, ins);
    case 'note':     return showNoteInspector(obj, ins);
    case 'checklist': return showChecklistInspector(obj, ins);
    default: {
      // fallback: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ parentId
      const parent = getParentObjectFallback(obj, state);
      if (parent) return openInspectorFor(parent, state);
      return showPlaceholder();
    }
  }
}

function showPlaceholder() {
  const ins = document.getElementById("inspector");
  if (ins) {
    ins.innerHTML = `<div class="hint">–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏.</div>`;
  }
}

function showDomainInspector(obj, ins) {
  const prjs = state.projects.filter((p) => p.domainId === obj.id);
  const totalTasks = prjs.reduce(
    (a, p) => a + tasksOfProject(p.id).length,
    0
  );
  
  ins.innerHTML = `
    <h2>–î–æ–º–µ–Ω: ${obj.title}</h2>
    <div class="kv">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${obj.mood || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'}</div>
    <div class="kv">–ü—Ä–æ–µ–∫—Ç–æ–≤: ${prjs.length}</div>
    <div class="kv">–ó–∞–¥–∞—á: ${totalTasks}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    <div class="btns">
      <button class="btn primary" id="addProject">+ –ü—Ä–æ–µ–∫—Ç</button>
      <button class="btn danger" id="delDomain">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("addProject").onclick = () => {
    const title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:");
    if (title) {
      const project = createProject(title, obj.id);
      requestLayout();
      openInspectorFor(project);
    }
  };
  
  document.getElementById("delDomain").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω "${obj.title}" –∏ –≤—Å–µ –µ–≥–æ –ø—Ä–æ–µ–∫—Ç—ã?`)) {
      state.domains = state.domains.filter(d => d.id !== obj.id);
      state.projects = state.projects.filter(p => p.domainId !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
}

function showProjectInspector(obj, ins) {
  const tks = tasksOfProject(obj.id);
  
  ins.innerHTML = `
    <h2>–ü—Ä–æ–µ–∫—Ç: ${obj.title}</h2>
    <div class="kv">–î–æ–º–µ–Ω: ${domainOf(obj)?.title || '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π'}</div>
    <div class="kv">–¢–µ–≥–∏: #${(obj.tags || []).join(" #")}</div>
    <div class="kv">–ó–∞–¥–∞—á: ${tks.length}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    <div class="btns">
      <button class="btn primary" id="addTask">+ –ó–∞–¥–∞—á–∞</button>
      <button class="btn" id="addChecklist">‚úì –ß–µ–∫-–ª–∏—Å—Ç</button>
      <button class="btn danger" id="delProject">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("addTask").onclick = () => {
    const title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
    if (title) {
      const task = createTask(title, obj.id);
      requestLayout();
      openInspectorFor(task);
    }
  };
  
  document.getElementById("addChecklist").onclick = () => {
    const title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞:");
    if (title) {
      const checklist = createChecklist(title, obj.id);
      requestLayout();
      openInspectorFor(checklist);
    }
  };
  
  document.getElementById("delProject").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "${obj.title}" –∏ –≤—Å–µ –µ–≥–æ –∑–∞–¥–∞—á–∏?`)) {
      state.projects = state.projects.filter(p => p.id !== obj.id);
      state.tasks = state.tasks.filter(t => t.projectId !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
}

function showTaskInspector(obj, ins) {
  ins.innerHTML = `
    <h2>–ó–∞–¥–∞—á–∞: ${obj.title}</h2>
    <div class="kv">–°—Ç–∞—Ç—É—Å: ${statusPill(obj.status)}</div>
    <div class="kv">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${obj.priority || '–æ–±—ã—á–Ω—ã–π'}</div>
    <div class="kv">–ü—Ä–æ–µ–∫—Ç: ${project(obj.projectId)?.title || '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}</div>
    <div class="kv">–î–æ–º–µ–Ω: ${obj.domainId ? byId(state.domains, obj.domainId)?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–º–µ–Ω' : '–ë–µ–∑ –¥–æ–º–µ–Ω–∞'}</div>
    <div class="kv">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${daysSince(obj.updatedAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    <div class="btns">
      <button class="btn primary" id="editTask">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
      <button class="btn danger" id="delTask">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("editTask").onclick = () => {
    const newTitle = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", obj.title);
    if (newTitle && newTitle !== obj.title) {
      obj.title = newTitle;
      obj.updatedAt = Date.now();
      saveState();
      drawMap();
      openInspectorFor(obj);
    }
  };
  
  document.getElementById("delTask").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${obj.title}"?`)) {
      state.tasks = state.tasks.filter(t => t.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
}

function showIdeaInspector(obj, ins) {
  const parent = getParentObjectFallback(obj, state);
  const parentInfo = parent ? `${parent._type === 'domain' ? '–î–æ–º–µ–Ω' : parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : '–û–±—ä–µ–∫—Ç'}: ${parent.title}` : '–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è';
  
  ins.innerHTML = `
    <h2>–ò–¥–µ—è: ${obj.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h2>
    <div class="kv">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${obj.content || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
    <div class="kv">–†–æ–¥–∏—Ç–µ–ª—å: ${parentInfo}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω–æ: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    <div class="btns">
      <button class="btn primary" id="editIdea">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
      <button class="btn danger" id="delIdea">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("editIdea").onclick = () => {
    const newTitle = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏:", obj.title);
    if (newTitle && newTitle !== obj.title) {
      obj.title = newTitle;
      obj.updatedAt = Date.now();
      saveState();
      drawMap();
      openInspectorFor(obj);
    }
  };
  
  document.getElementById("delIdea").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∏–¥–µ—é "${obj.title}"?`)) {
      state.ideas = state.ideas.filter(i => i.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
}

function showNoteInspector(obj, ins) {
  const parent = getParentObjectFallback(obj, state);
  const parentInfo = parent ? `${parent._type === 'domain' ? '–î–æ–º–µ–Ω' : parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : parent._type === 'task' ? '–ó–∞–¥–∞—á–∞' : '–û–±—ä–µ–∫—Ç'}: ${parent.title}` : '–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è';
  
  ins.innerHTML = `
    <h2>–ó–∞–º–µ—Ç–∫–∞: ${obj.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h2>
    <div class="kv">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${obj.text || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
    <div class="kv">–†–æ–¥–∏—Ç–µ–ª—å: ${parentInfo}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω–æ: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    <div class="btns">
      <button class="btn primary" id="editNote">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
      <button class="btn danger" id="delNote">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("editNote").onclick = () => {
    const newTitle = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:", obj.title);
    if (newTitle && newTitle !== obj.title) {
      obj.title = newTitle;
      obj.updatedAt = Date.now();
      saveState();
      drawMap();
      openInspectorFor(obj);
    }
  };
  
  document.getElementById("delNote").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É "${obj.title}"?`)) {
      state.notes = state.notes.filter(n => n.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
}

function showChecklistInspector(obj, ins) {
  const parent = getParentObjectFallback(obj, state);
  const parentInfo = parent ? `${parent._type === 'domain' ? '–î–æ–º–µ–Ω' : parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : parent._type === 'task' ? '–ó–∞–¥–∞—á–∞' : '–û–±—ä–µ–∫—Ç'}: ${parent.title}` : '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π';
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  const totalItems = obj.items?.length || 0;
  const completedItems = obj.items?.filter(item => item.completed) || [];
  const progress = totalItems > 0 ? Math.round((completedItems.length / totalItems) * 100) : 0;
  
  ins.innerHTML = `
    <h2>–ß–µ–∫-–ª–∏—Å—Ç: ${obj.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h2>
    <div class="kv">–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% (${completedItems.length}/${totalItems})</div>
    <div class="kv">–†–æ–¥–∏—Ç–µ–ª—å: ${parentInfo}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    <div class="btns">
      <button class="btn primary" id="editChecklist">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
      <button class="btn danger" id="delChecklist">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("editChecklist").onclick = () => {
    if (window.showChecklistEditor) {
      window.showChecklistEditor(obj);
    }
  };
  
  document.getElementById("delChecklist").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç "${obj.title}"?`)) {
      state.checklists = state.checklists.filter(c => c.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
}
