// js/inspector.js
import {
  state,
  byId,
  project,
  domainOf,
  tasksOfProject,
  daysSince,
  statusPill,
  getProjectColor,
  getRandomProjectColor,
  getContrastColor,
  PROJECT_COLOR_PRESETS,
  getChildObjects,
  getParentObject,
  findObjectById,
  getObjectType,
  byTypeAndId,
  canChangeHierarchy,
  attachObjectToParent,
  detachObjectFromParent,
  getAvailableParents,
  createChecklist,
  getChecklistsOfProject,
  getChecklistProgress,
  createProject,
  createTask
} from "./state.js";
import { saveState } from "./storage.js";
import { normalizeType, normalizeId } from "./utils/normalize.js";
import { getParentObjectFallback } from "./inspector/utils.js";

// view_map helpers are accessed via window.mapApi to avoid circular import issues
function drawMap() {
  return window.mapApi && window.mapApi.drawMap && window.mapApi.drawMap();
}
function requestLayout() {
  return window.mapApi && window.mapApi.requestLayout && window.mapApi.requestLayout();
}
function refreshMap(opts){
  return window.mapApi && window.mapApi.refresh && window.mapApi.refresh(opts||{});
}
function getPendingAttach() {
  return (
    window.mapApi &&
    window.mapApi.getPendingAttach &&
    window.mapApi.getPendingAttach()
  );
}
function confirmAttach() {
  return (
    window.mapApi &&
    window.mapApi.confirmAttach &&
    window.mapApi.confirmAttach()
  );
}
function cancelAttach() {
  return (
    window.mapApi && window.mapApi.cancelAttach && window.mapApi.cancelAttach()
  );
}

// Fallback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
function getChildObjectsFallback(obj) {
  if (!obj) return { projects: [], tasks: [], ideas: [], notes: [], checklists: [] };
  
  const children = { projects: [], tasks: [], ideas: [], notes: [], checklists: [] };
  
  if (obj._type === 'domain') {
    // –ü—Ä–æ–µ–∫—Ç—ã –≤ –¥–æ–º–µ–Ω–µ
    children.projects = state.projects.filter(p => p.domainId === obj.id);
    
    // –ó–∞–¥–∞—á–∏ –≤ –¥–æ–º–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –¥–æ–º–µ–Ω–∞)
    const domainProjectIds = children.projects.map(p => p.id);
    children.tasks = state.tasks.filter(t => 
      t.domainId === obj.id || 
      (t.projectId && domainProjectIds.includes(t.projectId))
    );
    
    // –ò–¥–µ–∏ –≤ –¥–æ–º–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –≤—Å–µ –∏–¥–µ–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –¥–æ–º–µ–Ω–∞)
    children.ideas = state.ideas.filter(i => 
      i.domainId === obj.id || 
      (i.projectId && domainProjectIds.includes(i.projectId))
    );
    
    // –ó–∞–º–µ—Ç–∫–∏ –≤ –¥–æ–º–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –¥–æ–º–µ–Ω–∞)
    children.notes = state.notes.filter(n => 
      n.domainId === obj.id || 
      (n.projectId && domainProjectIds.includes(n.projectId))
    );
    
    // –ß–µ–∫-–ª–∏—Å—Ç—ã –≤ –¥–æ–º–µ–Ω–µ (–≤–∫–ª—é—á–∞—è –≤—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –¥–æ–º–µ–Ω–∞)
    children.checklists = state.checklists.filter(c => 
      c.domainId === obj.id || 
      (c.projectId && domainProjectIds.includes(c.projectId))
    );
  }
  
  if (obj._type === 'project') {
    // –ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    children.tasks = state.tasks.filter(t => t.projectId === obj.id);
    
    // –ò–¥–µ–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    children.ideas = state.ideas.filter(i => i.projectId === obj.id);
    
    // –ó–∞–º–µ—Ç–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    children.notes = state.notes.filter(n => n.projectId === obj.id);
    
    // –ß–µ–∫-–ª–∏—Å—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
    children.checklists = state.checklists.filter(c => c.projectId === obj.id);
  }
  
  return children;
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ (—Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏) –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
function buildHierarchyPath(obj) {
  if (!obj) return [];
  const parts = [];
  try {
    if (obj._type === 'task') {
      const proj = obj.projectId ? state.projects.find(p => p.id === obj.projectId) : null;
      const dom = obj.domainId
        ? state.domains.find(d => d.id === obj.domainId)
        : (proj ? state.domains.find(d => d.id === proj.domainId) : null);
      if (dom) parts.push({ type: 'domain', title: dom.title });
      if (proj) parts.push({ type: 'project', title: proj.title });
      parts.push({ type: 'task', title: obj.title });
      return parts;
    }
    if (obj._type === 'project') {
      const dom = obj.domainId ? state.domains.find(d => d.id === obj.domainId) : null;
      if (dom) parts.push({ type: 'domain', title: dom.title });
      parts.push({ type: 'project', title: obj.title });
      return parts;
    }
    if (obj._type === 'idea' || obj._type === 'note') {
      const proj = obj.projectId ? state.projects.find(p => p.id === obj.projectId) : null;
      const dom = obj.domainId
        ? state.domains.find(d => d.id === obj.domainId)
        : (proj ? state.domains.find(d => d.id === proj.domainId) : null);
      if (dom) parts.push({ type: 'domain', title: dom.title });
      if (proj) parts.push({ type: 'project', title: proj.title });
      parts.push({ type: obj._type, title: obj.title });
      return parts;
    }
    if (obj._type === 'domain') {
      parts.push({ type: 'domain', title: obj.title });
      return parts;
    }
  } catch (_) {}
  return [{ type: obj._type || 'object', title: obj.title || '–û–±—ä–µ–∫—Ç' }];
}

function renderPathBreadcrumb(obj) {
  const path = buildHierarchyPath(obj);
  if (!path || path.length === 0) return '';
  const label = path
    .map(p => {
      const t = p.type === 'domain' ? '–î–æ–º–µ–Ω'
              : p.type === 'project' ? '–ü—Ä–æ–µ–∫—Ç'
              : p.type === 'task' ? '–ó–∞–¥–∞—á–∞'
              : p.type === 'idea' ? '–ò–¥–µ—è'
              : p.type === 'note' ? '–ó–∞–º–µ—Ç–∫–∞' : '–û–±—ä–µ–∫—Ç';
      return `${t} "${p.title}"`;
    })
    .join(' ‚Üí ');
  return `
    <div class="hierarchy-item path">
      <span class="hierarchy-icon">üß≠</span>
      <span class="hierarchy-label">–ü—É—Ç—å:</span>
      <span class="hierarchy-value">${label}</span>
    </div>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –æ–±—ä–µ–∫—Ç–∞
function renderHierarchySection(obj) {
  if (!obj) return '';
  
  const children = getChildObjectsFallback(obj);
  const parent = getParentObjectFallback(obj);
  
  let html = `
    <div class="section">
      <h3>üåê –ò–µ—Ä–∞—Ä—Ö–∏—è</h3>
      <div class="hierarchy-info">
  `;
  
  // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å (—Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏)
  html += renderPathBreadcrumb(obj);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
  if (parent) {
    const parentType = parent._type === 'domain' ? '–î–æ–º–µ–Ω' : 
                      parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : 
                      parent._type === 'idea' ? '–ò–¥–µ—è' : 
                      parent._type === 'note' ? '–ó–∞–º–µ—Ç–∫–∞' : '–û–±—ä–µ–∫—Ç';
    html += `
      <div class="hierarchy-item parent">
        <span class="hierarchy-icon">‚¨ÜÔ∏è</span>
        <span class="hierarchy-label">–†–æ–¥–∏—Ç–µ–ª—å:</span>
        <span class="hierarchy-value">${parentType} "${parent.title}"</span>
      </div>
    `;
  } else {
    html += `
      <div class="hierarchy-item parent">
        <span class="hierarchy-icon">üåå</span>
        <span class="hierarchy-label">–°—Ç–∞—Ç—É—Å:</span>
        <span class="hierarchy-value">–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –æ–±—ä–µ–∫—Ç</span>
      </div>
    `;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–µ–π
  if (children && Object.keys(children).length > 0) {
    html += `
      <div class="hierarchy-item children">
        <span class="hierarchy-icon">‚¨áÔ∏è</span>
        <span class="hierarchy-label">–î–µ—Ç–∏:</span>
        <div class="children-list">
    `;
    
    Object.keys(children).forEach(childType => {
      const childIds = children[childType] || [];
      if (childIds.length > 0) {
        const typeLabel = childType === 'projects' ? '–ü—Ä–æ–µ–∫—Ç—ã' :
                         childType === 'tasks' ? '–ó–∞–¥–∞—á–∏' :
                         childType === 'ideas' ? '–ò–¥–µ–∏' :
                         childType === 'notes' ? '–ó–∞–º–µ—Ç–∫–∏' :
                         childType === 'checklists' ? '–ß–µ–∫-–ª–∏—Å—Ç—ã' : childType;
        html += `
          <div class="child-type">
            <span class="child-count">${childIds.length}</span>
            <span class="child-label">${typeLabel}</span>
          </div>
        `;
      }
    });
    
    html += `
        </div>
      </div>
    `;
  } else {
    html += `
      <div class="hierarchy-item children">
        <span class="hierarchy-icon">üå±</span>
        <span class="hierarchy-label">–î–µ—Ç–∏:</span>
        <span class="hierarchy-value">–ù–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤</span>
      </div>
    `;
  }
  
  html += `
      </div>
      
      ${renderHierarchyActions(obj)}
    </div>
  `;
  
  return html;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
function renderHierarchyActions(obj) {
  if (!obj) return '';
  
  const parent = getParentObjectFallback(obj);
  const canChange = canChangeHierarchy(obj);
  
  if (!canChange) {
    return '<div class="hierarchy-actions disabled">üîí –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</div>';
  }
  
  let html = '<div class="hierarchy-actions">';
  
  // –ö–Ω–æ–ø–∫–∞ –æ—Ç–≤—è–∑–∫–∏ –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è
  if (parent) {
    html += `
      <button class="btn small danger" id="detachFromParent">
        üîó –û—Ç–≤—è–∑–∞—Ç—å –æ—Ç "${parent.title}"
      </button>
    `;
  }
  
  // –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –Ω–æ–≤–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é
  const availableParents = getAvailableParents(obj);
  if (availableParents.length > 0) {
    html += `
      <button class="btn small primary" id="attachToParent">
        üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
      </button>
    `;
  }
  
  html += '</div>';
  return html;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
function setupHierarchyActionHandlers(obj) {
  const detachBtn = document.getElementById('detachFromParent');
  if (detachBtn) {
    detachBtn.onclick = () => {
      const parent = getParentObjectFallback(obj);
      if (parent && confirm(`–û—Ç–≤—è–∑–∞—Ç—å "${obj.title}" –æ—Ç "${parent.title}"?`)) {
        detachObjectFromParent(obj);
        saveState();
        refreshMap();
        openInspectorFor(obj);
      }
    };
  }
  
  const attachBtn = document.getElementById('attachToParent');
  if (attachBtn) {
    attachBtn.onclick = () => {
      const availableParents = getAvailableParents(obj);
      if (availableParents.length === 0) return;
      
      const options = availableParents.map(p => `${p._type === 'domain' ? '–î–æ–º–µ–Ω' : '–ü—Ä–æ–µ–∫—Ç'}: ${p.title}`).join('\n');
      const choice = prompt(`–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—è (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n${availableParents.map((p, i) => `${i + 1}. ${p._type === 'domain' ? '–î–æ–º–µ–Ω' : '–ü—Ä–æ–µ–∫—Ç'}: ${p.title}`).join('\n')}`);
      
      if (choice) {
        const index = parseInt(choice) - 1;
        if (index >= 0 && index < availableParents.length) {
          const selectedParent = availableParents[index];
          attachObjectToParent(obj, selectedParent);
          saveState();
          refreshMap();
          openInspectorFor(obj);
        }
      }
    };
  }
}

export function openInspectorFor(objOrSel, state = window.state) {
  if (!objOrSel) return showPlaceholder();

  // objOrSel –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∏ {type,id}
  const type = normalizeType(objOrSel._type ?? objOrSel.type ?? objOrSel.kind);
  const id = normalizeId(objOrSel.id ?? objOrSel._id);
  const obj = (objOrSel.title || objOrSel.name)
    ? objOrSel
    : byTypeAndId(type, id) ?? objOrSel;

  console.debug('[inspector:open]', { type, id, hasObj: !!(obj && (obj.title||obj.name)) });

  if (!obj) return showPlaceholder();

  const ins = document.getElementById("inspector");
  if (!ins) return;

  switch (type) {
    case 'domain':   return showDomainInspector(obj, ins);
    case 'project':  return showProjectInspector(obj, ins);
    case 'task':     return showTaskInspector(obj, ins);
    case 'idea':     return showIdeaInspector(obj, ins);
    case 'note':     return showNoteInspector(obj, ins);
    case 'checklist': return showChecklistInspector(obj, ins);
    default: {
      // fallback: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ parentId
      const parent = getParentObjectFallback(obj, state);
      if (parent) return openInspectorFor(parent, state);
      return showPlaceholder();
    }
  }
}

function showPlaceholder() {
  const ins = document.getElementById("inspector");
  if (ins) {
    ins.innerHTML = `<div class="hint">–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏.</div>`;
  }
}

function showDomainInspector(obj, ins) {
  const prjs = state.projects.filter((p) => p.domainId === obj.id);
  const totalTasks = prjs.reduce(
    (a, p) => a + tasksOfProject(p.id).length,
    0
  );
  
  ins.innerHTML = `
    <h2>–î–æ–º–µ–Ω: ${obj.title}</h2>
    <div class="kv">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${obj.mood || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'}</div>
    <div class="kv">–ü—Ä–æ–µ–∫—Ç–æ–≤: ${prjs.length}</div>
    <div class="kv">–ó–∞–¥–∞—á: ${totalTasks}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="addProject">+ –ü—Ä–æ–µ–∫—Ç</button>
      <button class="btn danger" id="delDomain">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("addProject").onclick = () => {
    const title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:");
    if (title) {
      const project = createProject(title, obj.id);
      requestLayout();
      openInspectorFor(project);
    }
  };
  
  document.getElementById("delDomain").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω "${obj.title}" –∏ –≤—Å–µ –µ–≥–æ –ø—Ä–æ–µ–∫—Ç—ã?`)) {
      state.domains = state.domains.filter(d => d.id !== obj.id);
      state.projects = state.projects.filter(p => p.domainId !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
  
  setupHierarchyActionHandlers(obj);
}

function showProjectInspector(obj, ins) {
  const tks = tasksOfProject(obj.id);
  
  ins.innerHTML = `
    <h2>–ü—Ä–æ–µ–∫—Ç: ${obj.title}</h2>
    <div class="kv">–î–æ–º–µ–Ω: ${domainOf(obj)?.title || '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π'}</div>
    <div class="kv">–¢–µ–≥–∏: #${(obj.tags || []).join(" #")}</div>
    <div class="kv">–ó–∞–¥–∞—á: ${tks.length}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="addTask">+ –ó–∞–¥–∞—á–∞</button>
      <button class="btn" id="addChecklist">‚úì –ß–µ–∫-–ª–∏—Å—Ç</button>
      <button class="btn danger" id="delProject">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("addTask").onclick = () => {
    const title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:");
    if (title) {
      const task = createTask(title, obj.id);
      requestLayout();
      openInspectorFor(task);
    }
  };
  
  document.getElementById("addChecklist").onclick = () => {
    const title = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞:");
    if (title) {
      const checklist = createChecklist(title, obj.id);
      requestLayout();
      openInspectorFor(checklist);
    }
  };
  
  document.getElementById("delProject").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "${obj.title}" –∏ –≤—Å–µ –µ–≥–æ –∑–∞–¥–∞—á–∏?`)) {
      state.projects = state.projects.filter(p => p.id !== obj.id);
      state.tasks = state.tasks.filter(t => t.projectId !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
  
  setupHierarchyActionHandlers(obj);
}

function showTaskInspector(obj, ins) {
  ins.innerHTML = `
    <h2>–ó–∞–¥–∞—á–∞: ${obj.title}</h2>
    <div class="kv">–°—Ç–∞—Ç—É—Å: ${statusPill(obj.status)}</div>
    <div class="kv">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${obj.priority || '–æ–±—ã—á–Ω—ã–π'}</div>
    <div class="kv">–ü—Ä–æ–µ–∫—Ç: ${project(obj.projectId)?.title || '–ë–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞'}</div>
    <div class="kv">–î–æ–º–µ–Ω: ${obj.domainId ? byId(state.domains, obj.domainId)?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–º–µ–Ω' : '–ë–µ–∑ –¥–æ–º–µ–Ω–∞'}</div>
    <div class="kv">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${daysSince(obj.updatedAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="editTask">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
      <button class="btn danger" id="delTask">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("editTask").onclick = () => {
    const newTitle = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", obj.title);
    if (newTitle && newTitle !== obj.title) {
      obj.title = newTitle;
      obj.updatedAt = Date.now();
      saveState();
      drawMap();
      openInspectorFor(obj);
    }
  };
  
  document.getElementById("delTask").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${obj.title}"?`)) {
      state.tasks = state.tasks.filter(t => t.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
  
  setupHierarchyActionHandlers(obj);
}

function showIdeaInspector(obj, ins) {
  const parent = getParentObjectFallback(obj, state);
  const parentInfo = parent ? `${parent._type === 'domain' ? '–î–æ–º–µ–Ω' : parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : '–û–±—ä–µ–∫—Ç'}: ${parent.title}` : '–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è';
  
  ins.innerHTML = `
    <h2>–ò–¥–µ—è: ${obj.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h2>
    <div class="kv">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${obj.content || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
    <div class="kv">–†–æ–¥–∏—Ç–µ–ª—å: ${parentInfo}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω–æ: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="editIdea">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
      <button class="btn danger" id="delIdea">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("editIdea").onclick = () => {
    const newTitle = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∏–¥–µ–∏:", obj.title);
    if (newTitle && newTitle !== obj.title) {
      obj.title = newTitle;
      obj.updatedAt = Date.now();
      saveState();
      drawMap();
      openInspectorFor(obj);
    }
  };
  
  document.getElementById("delIdea").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∏–¥–µ—é "${obj.title}"?`)) {
      state.ideas = state.ideas.filter(i => i.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
  
  setupHierarchyActionHandlers(obj);
}

function showNoteInspector(obj, ins) {
  const parent = getParentObjectFallback(obj, state);
  const parentInfo = parent ? `${parent._type === 'domain' ? '–î–æ–º–µ–Ω' : parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : parent._type === 'task' ? '–ó–∞–¥–∞—á–∞' : '–û–±—ä–µ–∫—Ç'}: ${parent.title}` : '–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è';
  
  ins.innerHTML = `
    <h2>–ó–∞–º–µ—Ç–∫–∞: ${obj.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h2>
    <div class="kv">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${obj.text || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
    <div class="kv">–†–æ–¥–∏—Ç–µ–ª—å: ${parentInfo}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω–æ: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="editNote">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
      <button class="btn danger" id="delNote">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("editNote").onclick = () => {
    const newTitle = prompt("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:", obj.title);
    if (newTitle && newTitle !== obj.title) {
      obj.title = newTitle;
      obj.updatedAt = Date.now();
      saveState();
      drawMap();
      openInspectorFor(obj);
    }
  };
  
  document.getElementById("delNote").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É "${obj.title}"?`)) {
      state.notes = state.notes.filter(n => n.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
  
  setupHierarchyActionHandlers(obj);
}

function showChecklistInspector(obj, ins) {
  const parent = getParentObjectFallback(obj, state);
  const parentInfo = parent ? `${parent._type === 'domain' ? '–î–æ–º–µ–Ω' : parent._type === 'project' ? '–ü—Ä–æ–µ–∫—Ç' : parent._type === 'task' ? '–ó–∞–¥–∞—á–∞' : '–û–±—ä–µ–∫—Ç'}: ${parent.title}` : '–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π';
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  const totalItems = obj.items?.length || 0;
  const completedItems = obj.items?.filter(item => item.completed) || [];
  const progress = totalItems > 0 ? Math.round((completedItems.length / totalItems) * 100) : 0;
  
  ins.innerHTML = `
    <h2>–ß–µ–∫-–ª–∏—Å—Ç: ${obj.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h2>
    <div class="kv">–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}% (${completedItems.length}/${totalItems})</div>
    <div class="kv">–†–æ–¥–∏—Ç–µ–ª—å: ${parentInfo}</div>
    <div class="kv">–°–æ–∑–¥–∞–Ω: ${daysSince(obj.createdAt)} –¥–Ω. –Ω–∞–∑–∞–¥</div>
    
    ${renderHierarchySection(obj)}
    
    <div class="btns">
      <button class="btn primary" id="editChecklist">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
      <button class="btn danger" id="delChecklist">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
    </div>
  `;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  document.getElementById("editChecklist").onclick = () => {
    if (window.showChecklistEditor) {
      window.showChecklistEditor(obj);
    }
  };
  
  document.getElementById("delChecklist").onclick = () => {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç "${obj.title}"?`)) {
      state.checklists = state.checklists.filter(c => c.id !== obj.id);
      saveState();
      drawMap();
      showPlaceholder();
    }
  };
  
  setupHierarchyActionHandlers(obj);
}
