#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node update-version.js "v0.6.1-new-feature"
 */

const fs = require('fs');
const path = require('path');

// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const newVersion = process.argv[2];
if (!newVersion) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node update-version.js "v0.6.1-new-feature"');
  process.exit(1);
}

console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –¥–æ: ${newVersion}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ —Ñ–∞–π–ª–µ
function updateVersionInFile(filePath, patterns) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    let updated = false;
    
    patterns.forEach(pattern => {
      const regex = new RegExp(pattern.search, 'g');
      if (regex.test(content)) {
        content = content.replace(regex, pattern.replace);
        updated = true;
      }
    });
    
    if (updated) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
    } else {
      console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
  }
}

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
const versionPatterns = [
  {
    file: 'index.html',
    patterns: [
      {
        search: '<title>–ê—Ç–ª–∞—Å –∂–∏–∑–Ω–∏ v[^<]+</title>',
        replace: `<title>–ê—Ç–ª–∞—Å –∂–∏–∑–Ω–∏ ${newVersion}</title>`
      },
      {
        search: 'src="./js/app.js\\?v=[^"]+',
        replace: `src="./js/app.js?v=${newVersion}&t=${Date.now()}&cache=bust&force=${Math.floor(Math.random() * 100)}`
      }
    ]
  },
  {
    file: 'js/app.js',
    patterns: [
      {
        search: 'let APP_VERSION = "[^"]+";',
        replace: `let APP_VERSION = "Atlas_of_life_${newVersion}";`
      }
    ]
  }
];

// –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏–∏ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö
versionPatterns.forEach(({ file, patterns }) => {
  updateVersionInFile(file, patterns);
});

console.log(`üéâ –í–µ—Ä—Å–∏—è ${newVersion} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`);
console.log('üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å CHANGELOG.md –∏ REQUESTS.md');
