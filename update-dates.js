const fs = require('fs');
const path = require('path');

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
const today = new Date();
const dateDDMMYYYY = today.toLocaleDateString('ru-RU'); // 22.09.2025
const dateYYYYMMDD = today.toISOString().split('T')[0]; // 2025-09-22
const dateRussian = today.toLocaleDateString('ru-RU', { 
  day: 'numeric', 
  month: 'long', 
  year: 'numeric' 
}); // 22 —Å–µ–Ω—Ç—è–±—Ä—è 2025

console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞: ${dateRussian}`);
console.log(`üìÖ DD.MM.YYYY: ${dateDDMMYYYY}`);
console.log(`üìÖ YYYY-MM-DD: ${dateYYYYMMDD}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function updateFile(filePath, updates) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }

  let content = fs.readFileSync(filePath, 'utf8');
  let changed = false;

  updates.forEach(update => {
    const originalContent = content;
    content = content.replace(update.regex, update.replacement);
    if (content !== originalContent) {
      changed = true;
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${path.basename(filePath)} - ${update.description}`);
    }
  });

  if (changed) {
    fs.writeFileSync(filePath, content, 'utf8');
    return true;
  }
  return false;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
const updates = [
  {
    file: 'CURRENT_STATUS.md',
    updates: [
      {
        regex: /(# –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å \()\d{2}\.\d{2}\.\d{4}(\))/,
        replacement: `$1${dateDDMMYYYY}$2`,
        description: '–¥–∞—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞'
      }
    ]
  },
  {
    file: 'CHANGELOG.md',
    updates: [
      {
        regex: /(## Atlas_of_life_v\d+\.\d+\.\d+\.\d+-[^ ]+ \()\d{2}\.\d{2}\.\d{4}(\))/,
        replacement: `$1${dateDDMMYYYY}$2`,
        description: '–¥–∞—Ç–∞ –≤–µ—Ä—Å–∏–∏ –≤ changelog'
      }
    ]
  },
  {
    file: 'REQUESTS.md',
    updates: [
      {
        regex: /(### )\d{4}-\d{2}-\d{2}( ‚Äî [^<]+)/,
        replacement: `$1${dateYYYYMMDD}$2`,
        description: '–¥–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞'
      }
    ]
  },
  {
    file: 'USER_MANUAL.md',
    updates: [
      {
        regex: /(\*\*–î–∞—Ç–∞:\*\* )\d{1,2} [–∞-—è]+ \d{4}/,
        replacement: `$1${dateRussian}`,
        description: '–¥–∞—Ç–∞ –≤ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ'
      }
    ]
  }
];

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
let totalUpdated = 0;
updates.forEach(fileUpdate => {
  if (updateFile(fileUpdate.file, fileUpdate.updates)) {
    totalUpdated++;
  }
});

console.log(`\nüéØ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalUpdated}`);
console.log(`üìÖ –í—Å–µ –¥–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: ${dateRussian}`);
console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.`);
