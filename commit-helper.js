// commit-helper.js - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–º–º–∏—Ç–æ–≤
const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const commitTypes = {
  feat: '–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è',
  fix: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏',
  docs: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
  style: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∏)',
  refactor: '–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞',
  perf: '–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
  test: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤',
  chore: '–û–±—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Å–±–æ—Ä–∫–∞, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)',
  build: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ —Å–±–æ—Ä–∫–∏',
  ci: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ CI/CD',
  revert: '–û—Ç–∫–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π'
};

function getChangedFiles() {
  try {
    const stdout = execSync('git diff --name-only --cached', { encoding: 'utf8' });
    return stdout.trim().split('\n').filter(Boolean);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error.message);
    return [];
  }
}

function prompt(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function generateCommitMessage() {
  console.log('\n--- üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞ ---');
  console.log('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–º–∏—Ç–∞:');
  const typesArray = Object.entries(commitTypes);
  typesArray.forEach(([key, desc], index) => {
    console.log(`${index + 1}. ${key}: ${desc}`);
  });

  let typeKey;
  while (true) {
    const answer = await prompt(`\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–ø–∞ (1-${typesArray.length}) –∏–ª–∏ "${typesArray[0][0]}" –¥–ª—è "${typesArray[0][0]}": `);
    if (Object.keys(commitTypes).includes(answer.toLowerCase())) {
      typeKey = answer.toLowerCase();
      break;
    }
    const typeIndex = parseInt(answer, 10) - 1;
    if (typeIndex >= 0 && typeIndex < typesArray.length) {
      typeKey = typesArray[typeIndex][0];
      break;
    }
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }

  const scope = await prompt('–í–≤–µ–¥–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "sidebar", "map", "auth", –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º): ');
  const subject = await prompt('–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ');

  if (!subject.trim()) {
    console.error('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –û—Ç–º–µ–Ω–∞ –∫–æ–º–º–∏—Ç–∞.');
    rl.close();
    return;
  }

  let commitMessage = `${typeKey}`;
  if (scope.trim()) {
    commitMessage += `(${scope.trim()})`;
  }
  commitMessage += `: ${subject.trim()}`;

  const changedFiles = getChangedFiles();
  if (changedFiles.length > 0) {
    console.log('\nüìÅ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
    changedFiles.forEach(file => console.log(`- ${file}`));
    const addFilesToBody = await prompt('–î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–ª–æ –∫–æ–º–º–∏—Ç–∞? (–¥–∞/–Ω–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—Ç): ');
    if (addFilesToBody.toLowerCase() === '–¥–∞') {
      commitMessage += '\n\n–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n' + changedFiles.map(file => `- ${file}`).join('\n');
    }
  }

  const body = await prompt('–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ç–µ–ª–æ –∫–æ–º–º–∏—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ');
  if (body.trim()) {
    commitMessage += `\n\n${body.trim()}`;
  }

  console.log('\n--- üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ ---');
  console.log(commitMessage);

  const confirm = await prompt('\n‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–∏—Ç? (–¥–∞/–Ω–µ—Ç): ');
  if (confirm.toLowerCase() === '–¥–∞') {
    try {
      execSync(`git commit -m "${commitMessage.replace(/"/g, '\\"')}"`, { stdio: 'inherit' });
      console.log('\nüéâ –ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    } catch (error) {
      console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞:', error.message);
    }
  } else {
    console.log('‚ùå –ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω.');
  }

  rl.close();
}

generateCommitMessage();
